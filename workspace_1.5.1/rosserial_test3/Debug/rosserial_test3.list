
rosserial_test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000729c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800778c  0800778c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007794  08007794  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080077a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000074  08007818  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  08007818  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014594  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ce3  00000000  00000000  00034638  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00038308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259ab  00000000  00000000  000391e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf79  00000000  00000000  0005eb8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5e4a  00000000  00000000  0006ab04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014094e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b4  00000000  00000000  001409cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007448 	.word	0x08007448

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08007448 	.word	0x08007448

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	; 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000352:	f1a4 0401 	sub.w	r4, r4, #1
 8000356:	d1e9      	bne.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_uldivmod>:
 8000a00:	b953      	cbnz	r3, 8000a18 <__aeabi_uldivmod+0x18>
 8000a02:	b94a      	cbnz	r2, 8000a18 <__aeabi_uldivmod+0x18>
 8000a04:	2900      	cmp	r1, #0
 8000a06:	bf08      	it	eq
 8000a08:	2800      	cmpeq	r0, #0
 8000a0a:	bf1c      	itt	ne
 8000a0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a14:	f000 b972 	b.w	8000cfc <__aeabi_idiv0>
 8000a18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a20:	f000 f806 	bl	8000a30 <__udivmoddi4>
 8000a24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <__udivmoddi4>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	9e08      	ldr	r6, [sp, #32]
 8000a36:	4604      	mov	r4, r0
 8000a38:	4688      	mov	r8, r1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d14b      	bne.n	8000ad6 <__udivmoddi4+0xa6>
 8000a3e:	428a      	cmp	r2, r1
 8000a40:	4615      	mov	r5, r2
 8000a42:	d967      	bls.n	8000b14 <__udivmoddi4+0xe4>
 8000a44:	fab2 f282 	clz	r2, r2
 8000a48:	b14a      	cbz	r2, 8000a5e <__udivmoddi4+0x2e>
 8000a4a:	f1c2 0720 	rsb	r7, r2, #32
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	fa20 f707 	lsr.w	r7, r0, r7
 8000a56:	4095      	lsls	r5, r2
 8000a58:	ea47 0803 	orr.w	r8, r7, r3
 8000a5c:	4094      	lsls	r4, r2
 8000a5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a62:	0c23      	lsrs	r3, r4, #16
 8000a64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a68:	fa1f fc85 	uxth.w	ip, r5
 8000a6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a74:	fb07 f10c 	mul.w	r1, r7, ip
 8000a78:	4299      	cmp	r1, r3
 8000a7a:	d909      	bls.n	8000a90 <__udivmoddi4+0x60>
 8000a7c:	18eb      	adds	r3, r5, r3
 8000a7e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a82:	f080 811b 	bcs.w	8000cbc <__udivmoddi4+0x28c>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 8118 	bls.w	8000cbc <__udivmoddi4+0x28c>
 8000a8c:	3f02      	subs	r7, #2
 8000a8e:	442b      	add	r3, r5
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa4:	45a4      	cmp	ip, r4
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x8c>
 8000aa8:	192c      	adds	r4, r5, r4
 8000aaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aae:	f080 8107 	bcs.w	8000cc0 <__udivmoddi4+0x290>
 8000ab2:	45a4      	cmp	ip, r4
 8000ab4:	f240 8104 	bls.w	8000cc0 <__udivmoddi4+0x290>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	442c      	add	r4, r5
 8000abc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac0:	eba4 040c 	sub.w	r4, r4, ip
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	b11e      	cbz	r6, 8000ad0 <__udivmoddi4+0xa0>
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	2300      	movs	r3, #0
 8000acc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad0:	4639      	mov	r1, r7
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0xbe>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	f000 80eb 	beq.w	8000cb6 <__udivmoddi4+0x286>
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ae6:	4638      	mov	r0, r7
 8000ae8:	4639      	mov	r1, r7
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	fab3 f783 	clz	r7, r3
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d147      	bne.n	8000b86 <__udivmoddi4+0x156>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xd0>
 8000afa:	4282      	cmp	r2, r0
 8000afc:	f200 80fa 	bhi.w	8000cf4 <__udivmoddi4+0x2c4>
 8000b00:	1a84      	subs	r4, r0, r2
 8000b02:	eb61 0303 	sbc.w	r3, r1, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	4698      	mov	r8, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d0e0      	beq.n	8000ad0 <__udivmoddi4+0xa0>
 8000b0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000b12:	e7dd      	b.n	8000ad0 <__udivmoddi4+0xa0>
 8000b14:	b902      	cbnz	r2, 8000b18 <__udivmoddi4+0xe8>
 8000b16:	deff      	udf	#255	; 0xff
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f040 808f 	bne.w	8000c40 <__udivmoddi4+0x210>
 8000b22:	1b49      	subs	r1, r1, r5
 8000b24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b28:	fa1f f885 	uxth.w	r8, r5
 8000b2c:	2701      	movs	r7, #1
 8000b2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b32:	0c23      	lsrs	r3, r4, #16
 8000b34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d907      	bls.n	8000b54 <__udivmoddi4+0x124>
 8000b44:	18eb      	adds	r3, r5, r3
 8000b46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x122>
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	f200 80cd 	bhi.w	8000cec <__udivmoddi4+0x2bc>
 8000b52:	4684      	mov	ip, r0
 8000b54:	1a59      	subs	r1, r3, r1
 8000b56:	b2a3      	uxth	r3, r4
 8000b58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b64:	fb08 f800 	mul.w	r8, r8, r0
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	d907      	bls.n	8000b7c <__udivmoddi4+0x14c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x14a>
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	f200 80b6 	bhi.w	8000ce6 <__udivmoddi4+0x2b6>
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	eba4 0408 	sub.w	r4, r4, r8
 8000b80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b84:	e79f      	b.n	8000ac6 <__udivmoddi4+0x96>
 8000b86:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8a:	40bb      	lsls	r3, r7
 8000b8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b94:	fa01 f407 	lsl.w	r4, r1, r7
 8000b98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba4:	4325      	orrs	r5, r4
 8000ba6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000baa:	0c2c      	lsrs	r4, r5, #16
 8000bac:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb0:	fa1f fa8e 	uxth.w	sl, lr
 8000bb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000bc6:	d90b      	bls.n	8000be0 <__udivmoddi4+0x1b0>
 8000bc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000bcc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd0:	f080 8087 	bcs.w	8000ce2 <__udivmoddi4+0x2b2>
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	f240 8084 	bls.w	8000ce2 <__udivmoddi4+0x2b2>
 8000bda:	f1a9 0902 	sub.w	r9, r9, #2
 8000bde:	4473      	add	r3, lr
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	b2ad      	uxth	r5, r5
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf4:	45a2      	cmp	sl, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1da>
 8000bf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c00:	d26b      	bcs.n	8000cda <__udivmoddi4+0x2aa>
 8000c02:	45a2      	cmp	sl, r4
 8000c04:	d969      	bls.n	8000cda <__udivmoddi4+0x2aa>
 8000c06:	3802      	subs	r0, #2
 8000c08:	4474      	add	r4, lr
 8000c0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c12:	eba4 040a 	sub.w	r4, r4, sl
 8000c16:	454c      	cmp	r4, r9
 8000c18:	46c2      	mov	sl, r8
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	d354      	bcc.n	8000cc8 <__udivmoddi4+0x298>
 8000c1e:	d051      	beq.n	8000cc4 <__udivmoddi4+0x294>
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d069      	beq.n	8000cf8 <__udivmoddi4+0x2c8>
 8000c24:	ebb1 050a 	subs.w	r5, r1, sl
 8000c28:	eb64 0403 	sbc.w	r4, r4, r3
 8000c2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c30:	40fd      	lsrs	r5, r7
 8000c32:	40fc      	lsrs	r4, r7
 8000c34:	ea4c 0505 	orr.w	r5, ip, r5
 8000c38:	e9c6 5400 	strd	r5, r4, [r6]
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e747      	b.n	8000ad0 <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f703 	lsr.w	r7, r0, r3
 8000c48:	4095      	lsls	r5, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c56:	4338      	orrs	r0, r7
 8000c58:	0c01      	lsrs	r1, r0, #16
 8000c5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c5e:	fa1f f885 	uxth.w	r8, r5
 8000c62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6a:	fb07 f308 	mul.w	r3, r7, r8
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	fa04 f402 	lsl.w	r4, r4, r2
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x256>
 8000c76:	1869      	adds	r1, r5, r1
 8000c78:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c7c:	d22f      	bcs.n	8000cde <__udivmoddi4+0x2ae>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d92d      	bls.n	8000cde <__udivmoddi4+0x2ae>
 8000c82:	3f02      	subs	r7, #2
 8000c84:	4429      	add	r1, r5
 8000c86:	1acb      	subs	r3, r1, r3
 8000c88:	b281      	uxth	r1, r0
 8000c8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb00 f308 	mul.w	r3, r0, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x27e>
 8000c9e:	1869      	adds	r1, r5, r1
 8000ca0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca4:	d217      	bcs.n	8000cd6 <__udivmoddi4+0x2a6>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d915      	bls.n	8000cd6 <__udivmoddi4+0x2a6>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4429      	add	r1, r5
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb4:	e73b      	b.n	8000b2e <__udivmoddi4+0xfe>
 8000cb6:	4637      	mov	r7, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e709      	b.n	8000ad0 <__udivmoddi4+0xa0>
 8000cbc:	4607      	mov	r7, r0
 8000cbe:	e6e7      	b.n	8000a90 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fb      	b.n	8000abc <__udivmoddi4+0x8c>
 8000cc4:	4541      	cmp	r1, r8
 8000cc6:	d2ab      	bcs.n	8000c20 <__udivmoddi4+0x1f0>
 8000cc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ccc:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	e7a4      	b.n	8000c20 <__udivmoddi4+0x1f0>
 8000cd6:	4660      	mov	r0, ip
 8000cd8:	e7e9      	b.n	8000cae <__udivmoddi4+0x27e>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	e795      	b.n	8000c0a <__udivmoddi4+0x1da>
 8000cde:	4667      	mov	r7, ip
 8000ce0:	e7d1      	b.n	8000c86 <__udivmoddi4+0x256>
 8000ce2:	4681      	mov	r9, r0
 8000ce4:	e77c      	b.n	8000be0 <__udivmoddi4+0x1b0>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	442c      	add	r4, r5
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0x14c>
 8000cec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf0:	442b      	add	r3, r5
 8000cf2:	e72f      	b.n	8000b54 <__udivmoddi4+0x124>
 8000cf4:	4638      	mov	r0, r7
 8000cf6:	e708      	b.n	8000b0a <__udivmoddi4+0xda>
 8000cf8:	4637      	mov	r7, r6
 8000cfa:	e6e9      	b.n	8000ad0 <__udivmoddi4+0xa0>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f91f 	bl	8000f8c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000d56:	b480      	push	{r7}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d72:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000d7a:	89fa      	ldrh	r2, [r7, #14]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d102      	bne.n	8000d86 <_ZN14BufferedSerial4readEv+0x30>
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d84:	e016      	b.n	8000db4 <_ZN14BufferedSerial4readEv+0x5e>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 8000db2:	68bb      	ldr	r3, [r7, #8]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ddc:	da25      	bge.n	8000e2a <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000de4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	3304      	adds	r3, #4
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 f9e0 	bl	80071b8 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d921      	bls.n	8000e60 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000e28:	e01a      	b.n	8000e60 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 f9bf 	bl	80071b8 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d905      	bls.n	8000e56 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 f805 	bl	8000e70 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00f      	beq.n	8000ea2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d107      	bne.n	8000ea2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b20      	cmp	r3, #32
 8000eae:	d10b      	bne.n	8000ec8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d003      	beq.n	8000ec8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000ec0:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d156      	bne.n	8000f80 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d103      	bne.n	8000ef0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d21c      	bcs.n	8000f3a <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	3304      	adds	r3, #4
 8000f24:	89ba      	ldrh	r2, [r7, #12]
 8000f26:	4619      	mov	r1, r3
 8000f28:	f005 f980 	bl	800622c <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000f38:	e01e      	b.n	8000f78 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f005 f963 	bl	800622c <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e000      	b.n	8000f82 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000f80:	bf00      	nop
}
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000049c 	.word	0x2000049c

08000f8c <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f005 f9af 	bl	8006304 <HAL_UART_Receive_DMA>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_UART_TxCpltCallback+0x34>)
 8000fd6:	f7ff ffea 	bl	8000fae <_ZN14BufferedSerial10get_handleEv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429c      	cmp	r4, r3
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <HAL_UART_TxCpltCallback+0x34>)
 8000fee:	f7ff ff3f 	bl	8000e70 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000090 	.word	0x20000090

08001000 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_UART_RxCpltCallback+0x18>)
 800100a:	f7ff ffbf 	bl	8000f8c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000090 	.word	0x20000090

0800101c <_Z41__static_initialization_and_destruction_0ii>:
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d108      	bne.n	800103e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	4293      	cmp	r3, r2
 8001034:	d103      	bne.n	800103e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 8001036:	4904      	ldr	r1, [pc, #16]	; (8001048 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800103a:	f7ff fe61 	bl	8000d00 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000ba0 	.word	0x20000ba0
 800104c:	20000090 	.word	0x20000090

08001050 <_GLOBAL__sub_I_buff_serial>:
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
 8001054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ffdf 	bl	800101c <_Z41__static_initialization_and_destruction_0ii>
 800105e:	bd80      	pop	{r7, pc}

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f002 fe0e 	bl	8003c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f812 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fa26 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001070:	f000 f9fc 	bl	800146c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001074:	f000 f9d0 	bl	8001418 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001078:	f000 f86a 	bl	8001150 <MX_TIM1_Init>
  MX_TIM10_Init();
 800107c:	f000 f930 	bl	80012e0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001080:	f000 f97c 	bl	800137c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001084:	f001 fcc0 	bl	8002a08 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	loop();
 8001088:	f001 fcd4 	bl	8002a34 <loop>
 800108c:	e7fc      	b.n	8001088 <main+0x28>
	...

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 f895 	bl	80071ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <SystemClock_Config+0xb8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <SystemClock_Config+0xb8>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <SystemClock_Config+0xb8>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <SystemClock_Config+0xbc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <SystemClock_Config+0xbc>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <SystemClock_Config+0xbc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4618      	mov	r0, r3
 8001106:	f003 ff59 	bl	8004fbc <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001110:	f000 fa44 	bl	800159c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fc8a 	bl	8004a48 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800113a:	f000 fa2f 	bl	800159c <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b096      	sub	sp, #88	; 0x58
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 f820 	bl	80071ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118e:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <MX_TIM1_Init+0x188>)
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <MX_TIM1_Init+0x18c>)
 8001192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <MX_TIM1_Init+0x188>)
 8001196:	2207      	movs	r2, #7
 8001198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <MX_TIM1_Init+0x188>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011a2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4847      	ldr	r0, [pc, #284]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011bc:	f004 f958 	bl	8005470 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011c6:	f000 f9e9 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d4:	4619      	mov	r1, r3
 80011d6:	4840      	ldr	r0, [pc, #256]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011d8:	f004 fb44 	bl	8005864 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 f9db 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80011e6:	483c      	ldr	r0, [pc, #240]	; (80012d8 <MX_TIM1_Init+0x188>)
 80011e8:	f004 f96d 	bl	80054c6 <HAL_TIM_OC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011f2:	f000 f9d3 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001202:	4619      	mov	r1, r3
 8001204:	4834      	ldr	r0, [pc, #208]	; (80012d8 <MX_TIM1_Init+0x188>)
 8001206:	f004 fef5 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001210:	f000 f9c4 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001218:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_TIM1_Init+0x188>)
 800123c:	f004 f9ec 	bl	8005618 <HAL_TIM_OC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001246:	f000 f9a9 	bl	800159c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	2204      	movs	r2, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <MX_TIM1_Init+0x188>)
 8001258:	f004 f9de 	bl	8005618 <HAL_TIM_OC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001262:	f000 f99b 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	2208      	movs	r2, #8
 800126c:	4619      	mov	r1, r3
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <MX_TIM1_Init+0x188>)
 8001270:	f004 f9d2 	bl	8005618 <HAL_TIM_OC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800127a:	f000 f98f 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	220c      	movs	r2, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <MX_TIM1_Init+0x188>)
 8001288:	f004 f9c6 	bl	8005618 <HAL_TIM_OC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001292:	f000 f983 	bl	800159c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM1_Init+0x188>)
 80012ba:	f004 ff17 	bl	80060ec <HAL_TIMEx_ConfigBreakDeadTime>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80012c4:	f000 f96a 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM1_Init+0x188>)
 80012ca:	f002 fa8f 	bl	80037ec <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3758      	adds	r7, #88	; 0x58
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000b60 	.word	0x20000b60
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM10_Init+0x94>)
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <MX_TIM10_Init+0x98>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM10_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM10_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM10_Init+0x94>)
 800130c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001310:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM10_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM10_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <MX_TIM10_Init+0x94>)
 8001320:	f004 f8a6 	bl	8005470 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800132a:	f000 f937 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_TIM10_Init+0x94>)
 8001330:	f004 f8fe 	bl	8005530 <HAL_TIM_PWM_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800133a:	f000 f92f 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133e:	2360      	movs	r3, #96	; 0x60
 8001340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM10_Init+0x94>)
 8001356:	f004 f9bf 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001360:	f000 f91c 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM10_Init+0x94>)
 8001366:	f002 fa41 	bl	80037ec <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000a80 	.word	0x20000a80
 8001378:	40014400 	.word	0x40014400

0800137c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_TIM11_Init+0x94>)
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <MX_TIM11_Init+0x98>)
 8001398:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_TIM11_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_TIM11_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_TIM11_Init+0x94>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_TIM11_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_TIM11_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013ba:	4815      	ldr	r0, [pc, #84]	; (8001410 <MX_TIM11_Init+0x94>)
 80013bc:	f004 f858 	bl	8005470 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80013c6:	f000 f8e9 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_TIM11_Init+0x94>)
 80013cc:	f004 f8b0 	bl	8005530 <HAL_TIM_PWM_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80013d6:	f000 f8e1 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM11_Init+0x94>)
 80013f2:	f004 f971 	bl	80056d8 <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80013fc:	f000 f8ce 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM11_Init+0x94>)
 8001402:	f002 f9f3 	bl	80037ec <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000b20 	.word	0x20000b20
 8001414:	40014800 	.word	0x40014800

08001418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART2_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART2_UART_Init+0x4c>)
 8001450:	f004 fe9e 	bl	8006190 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f89f 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000ba0 	.word	0x20000ba0
 8001468:	40004400 	.word	0x40004400

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_DMA_Init+0x4c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <MX_DMA_Init+0x4c>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_DMA_Init+0x4c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2010      	movs	r0, #16
 8001494:	f002 fd65 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001498:	2010      	movs	r0, #16
 800149a:	f002 fd7e 	bl	8003f9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2011      	movs	r0, #17
 80014a4:	f002 fd5d 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014a8:	2011      	movs	r0, #17
 80014aa:	f002 fd76 	bl	8003f9a <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a2c      	ldr	r2, [pc, #176]	; (800158c <MX_GPIO_Init+0xd0>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <MX_GPIO_Init+0xd0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_GPIO_Init+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a25      	ldr	r2, [pc, #148]	; (800158c <MX_GPIO_Init+0xd0>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_GPIO_Init+0xd0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_GPIO_Init+0xd0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <MX_GPIO_Init+0xd0>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_GPIO_Init+0xd0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_GPIO_Init+0xd0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <MX_GPIO_Init+0xd0>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_GPIO_Init+0xd0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2120      	movs	r1, #32
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_GPIO_Init+0xd4>)
 8001548:	f003 fa64 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_GPIO_Init+0xd8>)
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_GPIO_Init+0xdc>)
 8001562:	f003 f8c5 	bl	80046f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001566:	2320      	movs	r3, #32
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_GPIO_Init+0xd4>)
 800157e:	f003 f8b7 	bl	80046f0 <HAL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	10210000 	.word	0x10210000
 8001598:	40020800 	.word	0x40020800

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <Error_Handler+0x6>

080015a4 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <_ZN13STM32HardwareC1Ev+0x1c>)
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	20000090 	.word	0x20000090

080015c4 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fbb5 	bl	8000d40 <_ZN14BufferedSerial4initEv>
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fbb3 	bl	8000d56 <_ZN14BufferedSerial4readEv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fbd6 	bl	8000dc0 <_ZN14BufferedSerial5writeEPKhi>
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	f002 fb94 	bl	8003d50 <HAL_GetTick>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <_ZN3ros3MsgC1Ev+0x1c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	0800775c 	.word	0x0800775c

08001674 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
      data()
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffe8 	bl	8001654 <_ZN3ros3MsgC1Ev>
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ffcf 	bl	8001632 <_ZN3ros4TimeC1Ev>
    {
    }
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	08007744 	.word	0x08007744

080016a4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	0a19      	lsrs	r1, r3, #8
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0c19      	lsrs	r1, r3, #16
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3302      	adds	r3, #2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0e19      	lsrs	r1, r3, #24
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3303      	adds	r3, #3
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3304      	adds	r3, #4
 80016fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6899      	ldr	r1, [r3, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	4413      	add	r3, r2
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	0a19      	lsrs	r1, r3, #8
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	b2ca      	uxtb	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	0c19      	lsrs	r1, r3, #16
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3302      	adds	r3, #2
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	4413      	add	r3, r2
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	0e19      	lsrs	r1, r3, #24
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3303      	adds	r3, #3
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3304      	adds	r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
      return offset;
 8001746:	68fb      	ldr	r3, [r7, #12]
    }
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	440b      	add	r3, r1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3302      	adds	r3, #2
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3303      	adds	r3, #3
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	440b      	add	r3, r1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	061b      	lsls	r3, r3, #24
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3304      	adds	r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	440b      	add	r3, r1
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3302      	adds	r3, #2
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	440b      	add	r3, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3303      	adds	r3, #3
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	440b      	add	r3, r1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3304      	adds	r3, #4
 800180c:	60fb      	str	r3, [r7, #12]
     return offset;
 800180e:	68fb      	ldr	r3, [r7, #12]
    }
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08007460 	.word	0x08007460

08001838 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	08007470 	.word	0x08007470

08001854 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fef8 	bl	8001654 <_ZN3ros3MsgC1Ev>
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	809a      	strh	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
    {
    }
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0800772c 	.word	0x0800772c
 8001898:	08007494 	.word	0x08007494

0800189c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8899      	ldrh	r1, [r3, #4]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b299      	uxth	r1, r3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3302      	adds	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc94 	bl	8000204 <strlen>
 80018dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	69b9      	ldr	r1, [r7, #24]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f92e 	bl	8002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3304      	adds	r3, #4
 80018f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	18d0      	adds	r0, r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4619      	mov	r1, r3
 8001900:	f005 fc5a 	bl	80071b8 <memcpy>
      offset += length_topic_name;
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4413      	add	r3, r2
 800190a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fc77 	bl	8000204 <strlen>
 8001916:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	6979      	ldr	r1, [r7, #20]
 8001920:	4618      	mov	r0, r3
 8001922:	f001 f911 	bl	8002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	18d0      	adds	r0, r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4619      	mov	r1, r3
 800193a:	f005 fc3d 	bl	80071b8 <memcpy>
      offset += length_message_type;
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4413      	add	r3, r2
 8001944:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc5a 	bl	8000204 <strlen>
 8001950:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f8f4 	bl	8002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	3304      	adds	r3, #4
 8001964:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	18d0      	adds	r0, r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4619      	mov	r1, r3
 8001974:	f005 fc20 	bl	80071b8 <memcpy>
      offset += length_md5sum;
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4413      	add	r3, r2
 800197e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0a19      	lsrs	r1, r3, #8
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	4413      	add	r3, r2
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	0c19      	lsrs	r1, r3, #16
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3302      	adds	r3, #2
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	b2ca      	uxtb	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0e19      	lsrs	r1, r3, #24
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3303      	adds	r3, #3
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	b2ca      	uxtb	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80019c8:	69fb      	ldr	r3, [r7, #28]
    }
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b08a      	sub	sp, #40	; 0x28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	889b      	ldrh	r3, [r3, #4]
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	3301      	adds	r3, #1
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	440b      	add	r3, r1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	441a      	add	r2, r3
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 f8b0 	bl	8002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3304      	adds	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	441a      	add	r2, r3
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	440b      	add	r3, r1
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e7ec      	b.n	8001a2e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	4413      	add	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 f87d 	bl	8002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	6a3a      	ldr	r2, [r7, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d20c      	bcs.n	8001aba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	440b      	add	r3, r1
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	e7ec      	b.n	8001a94 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 f84a 	bl	8002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	3304      	adds	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d20c      	bcs.n	8001b20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	440b      	add	r3, r1
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e7ec      	b.n	8001afa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	3b01      	subs	r3, #1
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	441a      	add	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	440a      	add	r2, r1
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	440b      	add	r3, r1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	440b      	add	r3, r1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	3303      	adds	r3, #3
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	440b      	add	r3, r1
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3304      	adds	r3, #4
 8001b96:	61bb      	str	r3, [r7, #24]
     return offset;
 8001b98:	69bb      	ldr	r3, [r7, #24]
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	08007498 	.word	0x08007498

08001bc0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	080074b4 	.word	0x080074b4

08001bdc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fd34 	bl	8001654 <_ZN3ros3MsgC1Ev>
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	711a      	strb	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001bfc:	609a      	str	r2, [r3, #8]
    {
    }
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	08007714 	.word	0x08007714
 8001c0c:	08007494 	.word	0x08007494

08001c10 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	7912      	ldrb	r2, [r2, #4]
 8001c28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fae5 	bl	8000204 <strlen>
 8001c3a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 ff7f 	bl	8002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	18d0      	adds	r0, r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f005 faab 	bl	80071b8 <memcpy>
      offset += length_msg;
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    }
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	3301      	adds	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	441a      	add	r2, r3
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 ff6f 	bl	8002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d20c      	bcs.n	8001cd6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	440b      	add	r3, r1
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e7ec      	b.n	8001cb0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	441a      	add	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
     return offset;
 8001cfa:	693b      	ldr	r3, [r7, #16]
    }
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	080074d8 	.word	0x080074d8

08001d20 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	080074ec 	.word	0x080074ec

08001d3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc84 	bl	8001654 <_ZN3ros3MsgC1Ev>
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	080076fc 	.word	0x080076fc

08001d84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0a19      	lsrs	r1, r3, #8
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	0c19      	lsrs	r1, r3, #16
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3302      	adds	r3, #2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0e19      	lsrs	r1, r3, #24
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3303      	adds	r3, #3
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2ca      	uxtb	r2, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3304      	adds	r3, #4
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d22b      	bcs.n	8001e42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	0a19      	lsrs	r1, r3, #8
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b2ca      	uxtb	r2, r1
 8001e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	0c19      	lsrs	r1, r3, #16
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2ca      	uxtb	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	0e19      	lsrs	r1, r3, #24
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3303      	adds	r3, #3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2ca      	uxtb	r2, r1
 8001e32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3304      	adds	r3, #4
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	e7ce      	b.n	8001de0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	0a19      	lsrs	r1, r3, #8
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	0c19      	lsrs	r1, r3, #16
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	0e19      	lsrs	r1, r3, #24
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3304      	adds	r3, #4
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d22b      	bcs.n	8001ef2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2ca      	uxtb	r2, r1
 8001eb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	0a19      	lsrs	r1, r3, #8
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3301      	adds	r3, #1
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	0c19      	lsrs	r1, r3, #16
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3302      	adds	r3, #2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2ca      	uxtb	r2, r1
 8001ed2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	0e19      	lsrs	r1, r3, #24
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	3303      	adds	r3, #3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2ca      	uxtb	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	e7ce      	b.n	8001e90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69d9      	ldr	r1, [r3, #28]
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	0a19      	lsrs	r1, r3, #8
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	3301      	adds	r3, #1
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	0c19      	lsrs	r1, r3, #16
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	b2ca      	uxtb	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	0e19      	lsrs	r1, r3, #24
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	3303      	adds	r3, #3
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	b2ca      	uxtb	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	3304      	adds	r3, #4
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d228      	bcs.n	8001f9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f954 	bl	8000204 <strlen>
 8001f5c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fdee 	bl	8002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	18d0      	adds	r0, r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4619      	mov	r1, r3
 8001f88:	f005 f916 	bl	80071b8 <memcpy>
      offset += length_stringsi;
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4413      	add	r3, r2
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	3301      	adds	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e7d1      	b.n	8001f40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08e      	sub	sp, #56	; 0x38
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	6a3a      	ldr	r2, [r7, #32]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	3303      	adds	r3, #3
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	6a3a      	ldr	r2, [r7, #32]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	6a3a      	ldr	r2, [r7, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d90a      	bls.n	800201a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f005 f8e6 	bl	80071e0 <realloc>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800202a:	429a      	cmp	r2, r3
 800202c:	d236      	bcs.n	800209c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	440a      	add	r2, r1
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002044:	3301      	adds	r3, #1
 8002046:	6839      	ldr	r1, [r7, #0]
 8002048:	440b      	add	r3, r1
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	3302      	adds	r3, #2
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	440b      	add	r3, r1
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	3303      	adds	r3, #3
 800206a:	6839      	ldr	r1, [r7, #0]
 800206c:	440b      	add	r3, r1
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	3304      	adds	r3, #4
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	3301      	adds	r3, #1
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
 800209a:	e7c3      	b.n	8002024 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	3301      	adds	r3, #1
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ba:	3302      	adds	r3, #2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	3303      	adds	r3, #3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	3304      	adds	r3, #4
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d90a      	bls.n	8002102 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f005 f872 	bl	80071e0 <realloc>
 80020fc:	4602      	mov	r2, r0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002112:	429a      	cmp	r2, r3
 8002114:	d236      	bcs.n	8002184 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	440a      	add	r2, r1
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	3301      	adds	r3, #1
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	440b      	add	r3, r1
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	3302      	adds	r3, #2
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	440b      	add	r3, r1
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	3303      	adds	r3, #3
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	440b      	add	r3, r1
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	3304      	adds	r3, #4
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	3214      	adds	r2, #20
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	3301      	adds	r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002182:	e7c3      	b.n	800210c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	3301      	adds	r3, #1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a2:	3302      	adds	r3, #2
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	3303      	adds	r3, #3
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	3304      	adds	r3, #4
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d90a      	bls.n	80021ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f004 fffe 	bl	80071e0 <realloc>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d23f      	bcs.n	800227e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	441a      	add	r2, r3
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fcba 	bl	8002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	3304      	adds	r3, #4
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	441a      	add	r2, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	3b01      	subs	r3, #1
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	440b      	add	r3, r1
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3301      	adds	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e7ec      	b.n	800221a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	3b01      	subs	r3, #1
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	3b01      	subs	r3, #1
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	441a      	add	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800225c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	3220      	adds	r2, #32
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	3301      	adds	r3, #1
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
 800227c:	e7ba      	b.n	80021f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002280:	4618      	mov	r0, r3
 8002282:	3738      	adds	r7, #56	; 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	08007638 	.word	0x08007638

080022a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	08007510 	.word	0x08007510

080022c0 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
  }
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f9b6 	bl	8001654 <_ZN3ros3MsgC1Ev>
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
    {
    }
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	080076b8 	.word	0x080076b8
 8002310:	08007494 	.word	0x08007494

08002314 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fd ff6c 	bl	8000204 <strlen>
 800232c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fc06 	bl	8002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3304      	adds	r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	18d0      	adds	r0, r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4619      	mov	r1, r3
 8002350:	f004 ff32 	bl	80071b8 <memcpy>
      offset += length_label;
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	b2ca      	uxtb	r2, r1
 8002368:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a19      	lsrs	r1, r3, #8
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	4413      	add	r3, r2
 8002378:	b2ca      	uxtb	r2, r1
 800237a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	0c19      	lsrs	r1, r3, #16
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3302      	adds	r3, #2
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	b2ca      	uxtb	r2, r1
 800238c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0e19      	lsrs	r1, r3, #24
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3303      	adds	r3, #3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	4413      	add	r3, r2
 800239c:	b2ca      	uxtb	r2, r1
 800239e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3304      	adds	r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a19      	lsrs	r1, r3, #8
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3301      	adds	r3, #1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	0c19      	lsrs	r1, r3, #16
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3302      	adds	r3, #2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0e19      	lsrs	r1, r3, #24
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3303      	adds	r3, #3
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3304      	adds	r3, #4
 80023ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80023f0:	68fb      	ldr	r3, [r7, #12]
    }
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	441a      	add	r2, r3
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fbb5 	bl	8002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3304      	adds	r3, #4
 800241e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	d20c      	bcs.n	800244a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	441a      	add	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3b01      	subs	r3, #1
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	440b      	add	r3, r1
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3301      	adds	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e7ec      	b.n	8002424 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	3b01      	subs	r3, #1
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	3b01      	subs	r3, #1
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	3301      	adds	r3, #1
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	440b      	add	r3, r1
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3302      	adds	r3, #2
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	440b      	add	r3, r1
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	3303      	adds	r3, #3
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	440b      	add	r3, r1
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3304      	adds	r3, #4
 80024c2:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	3301      	adds	r3, #1
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	440b      	add	r3, r1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3302      	adds	r3, #2
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	440b      	add	r3, r1
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3303      	adds	r3, #3
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	440b      	add	r3, r1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	3304      	adds	r3, #4
 8002518:	613b      	str	r3, [r7, #16]
     return offset;
 800251a:	693b      	ldr	r3, [r7, #16]
    }
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	08007534 	.word	0x08007534

08002540 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	08007554 	.word	0x08007554

0800255c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f874 	bl	8001654 <_ZN3ros3MsgC1Ev>
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3308      	adds	r3, #8
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff feab 	bl	80022d8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    {
    }
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	080076a0 	.word	0x080076a0

0800259c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	b2ca      	uxtb	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0a19      	lsrs	r1, r3, #8
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3301      	adds	r3, #1
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	b2ca      	uxtb	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0c19      	lsrs	r1, r3, #16
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3302      	adds	r3, #2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0e19      	lsrs	r1, r3, #24
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3303      	adds	r3, #3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	b2ca      	uxtb	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d218      	bcs.n	8002634 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	18d0      	adds	r0, r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	440a      	add	r2, r1
 8002620:	4611      	mov	r1, r2
 8002622:	4798      	blx	r3
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	e7e1      	b.n	80025f8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69d9      	ldr	r1, [r3, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	0a19      	lsrs	r1, r3, #8
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3301      	adds	r3, #1
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	0c19      	lsrs	r1, r3, #16
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3302      	adds	r3, #2
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	b2ca      	uxtb	r2, r1
 8002664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	0e19      	lsrs	r1, r3, #24
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3303      	adds	r3, #3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	4413      	add	r3, r2
 8002674:	b2ca      	uxtb	r2, r1
 8002676:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
      return offset;
 800267e:	68fb      	ldr	r3, [r7, #12]
    }
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3302      	adds	r3, #2
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3303      	adds	r3, #3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d90a      	bls.n	80026fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f004 fd75 	bl	80071e0 <realloc>
 80026f6:	4602      	mov	r2, r0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d21b      	bcs.n	8002748 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f103 0008 	add.w	r0, r3, #8
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7ff fe6c 	bl	80023fa <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002722:	4602      	mov	r2, r0
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	18d0      	adds	r0, r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3308      	adds	r3, #8
 8002738:	2210      	movs	r2, #16
 800273a:	4619      	mov	r1, r3
 800273c:	f004 fd3c 	bl	80071b8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	3301      	adds	r3, #1
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e7de      	b.n	8002706 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	440b      	add	r3, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3302      	adds	r3, #2
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	440b      	add	r3, r1
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3303      	adds	r3, #3
 800278a:	6839      	ldr	r1, [r7, #0]
 800278c:	440b      	add	r3, r1
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3304      	adds	r3, #4
 800279c:	617b      	str	r3, [r7, #20]
     return offset;
 800279e:	697b      	ldr	r3, [r7, #20]
    }
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	08007578 	.word	0x08007578

080027c4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	08007594 	.word	0x08007594

080027e0 <_ZN8std_msgs14ByteMultiArrayC1Ev>:
      uint32_t data_length;
      typedef int8_t _data_type;
      _data_type st_data;
      _data_type * data;

    ByteMultiArray():
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe ff32 	bl	8001654 <_ZN3ros3MsgC1Ev>
 80027f0:	4a09      	ldr	r2, [pc, #36]	; (8002818 <_ZN8std_msgs14ByteMultiArrayC1Ev+0x38>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff feae 	bl	800255c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	08007688 	.word	0x08007688

0800281c <_ZNK8std_msgs14ByteMultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1d18      	adds	r0, r3, #4
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f7ff feb1 	bl	800259c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	4413      	add	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	0a19      	lsrs	r1, r3, #8
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	4413      	add	r3, r2
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	0c19      	lsrs	r1, r3, #16
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3302      	adds	r3, #2
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4413      	add	r3, r2
 8002870:	b2ca      	uxtb	r2, r1
 8002872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	0e19      	lsrs	r1, r3, #24
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3303      	adds	r3, #3
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3304      	adds	r3, #4
 800288a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	d212      	bcs.n	80028c0 <_ZNK8std_msgs14ByteMultiArray9serializeEPh+0xa4>
      union {
        int8_t real;
        uint8_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f993 3000 	ldrsb.w	r3, [r3]
 80028a6:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	7b3a      	ldrb	r2, [r7, #12]
 80028b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3301      	adds	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3301      	adds	r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	e7e7      	b.n	8002890 <_ZNK8std_msgs14ByteMultiArray9serializeEPh+0x74>
      }
      return offset;
 80028c0:	697b      	ldr	r3, [r7, #20]
    }
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_ZN8std_msgs14ByteMultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1d18      	adds	r0, r3, #4
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7ff fed0 	bl	8002688 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80028e8:	4602      	mov	r2, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	4413      	add	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	4413      	add	r3, r2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3301      	adds	r3, #1
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3302      	adds	r3, #2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3303      	adds	r3, #3
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3304      	adds	r3, #4
 8002934:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d908      	bls.n	8002952 <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x88>
        this->data = (int8_t*)realloc(this->data, data_lengthT * sizeof(int8_t));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fc4a 	bl	80071e0 <realloc>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	429a      	cmp	r2, r3
 8002964:	d21d      	bcs.n	80029a2 <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0xd8>
      union {
        int8_t real;
        uint8_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	723b      	strb	r3, [r7, #8]
      u_st_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800296a:	7a3a      	ldrb	r2, [r7, #8]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	440b      	add	r3, r1
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	b2db      	uxtb	r3, r3
 8002978:	723b      	strb	r3, [r7, #8]
      this->st_data = u_st_data.real;
 800297a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	3228      	adds	r2, #40	; 0x28
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	3301      	adds	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	e7dc      	b.n	800295c <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x92>
      }
     return offset;
 80029a2:	697b      	ldr	r3, [r7, #20]
    }
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_ZN8std_msgs14ByteMultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/ByteMultiArray"; };
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <_ZN8std_msgs14ByteMultiArray7getTypeEv+0x18>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	080075b8 	.word	0x080075b8

080029c8 <_ZN8std_msgs14ByteMultiArray6getMD5Ev>:
    const char * getMD5(){ return "70ea476cbcfd65ac2f68f3cda1e891fe"; };
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <_ZN8std_msgs14ByteMultiArray6getMD5Ev+0x18>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	080075d0 	.word	0x080075d0

080029e4 <_Z8servo_goRKN8std_msgs14ByteMultiArrayE>:

//ros::Publisher chatter("chatter", &str_msg);
//char hello[] = "Hello world!";


void servo_go(const std_msgs::ByteMultiArray &msg){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

	int val = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
	val = int(msg.data[0]);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	f993 3000 	ldrsb.w	r3, [r3]
 80029f8:	60fb      	str	r3, [r7, #12]

//	val = (val << 8) + msg.data[0];

	servo_write(val);
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f88c 	bl	8002b18 <_Z11servo_writei>

}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <setup>:
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//}
//ros::Subscriber<std_msgs::Empty> led_sub("toggle_led", &led_cb);

// Setup node:
void setup(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
//  MX_DMA_Init();
//  MX_USART2_UART_Init();
//  MX_TIM1_Init();

//  MX_TIM1_Init();
  nh.initNode();
 8002a0c:	4806      	ldr	r0, [pc, #24]	; (8002a28 <setup+0x20>)
 8002a0e:	f000 f9a1 	bl	8002d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//  nh.advertise(chatter);
//  nh.subscribe(led_sub);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002a12:	2100      	movs	r1, #0
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <setup+0x24>)
 8002a16:	f002 fdc1 	bl	800559c <HAL_TIM_PWM_Start>
  nh.subscribe(servo_sub);
 8002a1a:	4905      	ldr	r1, [pc, #20]	; (8002a30 <setup+0x28>)
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <setup+0x20>)
 8002a1e:	f000 f9b6 	bl	8002d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_>

}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200004a0 	.word	0x200004a0
 8002a2c:	20000b60 	.word	0x20000b60
 8002a30:	200009d0 	.word	0x200009d0

08002a34 <loop>:

// Loop:
void loop(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  // Publish message:
//  str_msg.data = hello;
//  chatter.publish(&str_msg);
  for(int i = 0; i <= 180; i++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2bb4      	cmp	r3, #180	; 0xb4
 8002a42:	dc09      	bgt.n	8002a58 <loop+0x24>
  {
	servo_write(i);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f867 	bl	8002b18 <_Z11servo_writei>
	HAL_Delay(10);
 8002a4a:	200a      	movs	r0, #10
 8002a4c:	f001 f98c 	bl	8003d68 <HAL_Delay>
  for(int i = 0; i <= 180; i++)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3301      	adds	r3, #1
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e7f2      	b.n	8002a3e <loop+0xa>
  }
  for(int i = 180; i >= 0; i--)
 8002a58:	23b4      	movs	r3, #180	; 0xb4
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db09      	blt.n	8002a76 <loop+0x42>
  {
    servo_write(i);
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f000 f858 	bl	8002b18 <_Z11servo_writei>
    HAL_Delay(10);
 8002a68:	200a      	movs	r0, #10
 8002a6a:	f001 f97d 	bl	8003d68 <HAL_Delay>
  for(int i = 180; i >= 0; i--)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	e7f2      	b.n	8002a5c <loop+0x28>
  }
  nh.spinOnce();
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <loop+0x58>)
 8002a78:	f000 f9b6 	bl	8002de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(500);
 8002a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a80:	f001 f972 	bl	8003d68 <HAL_Delay>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200004a0 	.word	0x200004a0

08002a90 <_Z3mapiiiii>:


int map(int st1, int fn1, int st2, int fn2, int value)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
    return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 8002a9e:	6a3a      	ldr	r2, [r7, #32]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd07 	bl	80004b8 <__aeabi_i2d>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	460d      	mov	r5, r1
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fcff 	bl	80004b8 <__aeabi_i2d>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fe8d 	bl	80007e0 <__aeabi_ddiv>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	460c      	mov	r4, r1
 8002aca:	4625      	mov	r5, r4
 8002acc:	461c      	mov	r4, r3
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fcef 	bl	80004b8 <__aeabi_i2d>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7fd fd53 	bl	800058c <__aeabi_dmul>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	4625      	mov	r5, r4
 8002aec:	461c      	mov	r4, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fd fce2 	bl	80004b8 <__aeabi_i2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fb90 	bl	8000220 <__adddf3>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	4618      	mov	r0, r3
 8002b06:	4621      	mov	r1, r4
 8002b08:	f7fd ff52 	bl	80009b0 <__aeabi_d2iz>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b18 <_Z11servo_writei>:

void servo_write(int angle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, map(0,180,2000,4000,angle));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002b28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b2c:	21b4      	movs	r1, #180	; 0xb4
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff ffae 	bl	8002a90 <_Z3mapiiiii>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <_Z11servo_writei+0x2c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34


}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000b60 	.word	0x20000b60

08002b48 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d80d      	bhi.n	8002b78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	fa22 f103 	lsr.w	r1, r2, r3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b2ca      	uxtb	r2, r1
 8002b6e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e7ee      	b.n	8002b56 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d811      	bhi.n	8002bc2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	4611      	mov	r1, r2
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e7ea      	b.n	8002b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	080076e8 	.word	0x080076e8

08002bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ffe8 	bl	8002bd0 <_ZN3ros15NodeHandleBase_C1Ev>
 8002c00:	4a39      	ldr	r2, [pc, #228]	; (8002ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fcca 	bl	80015a4 <_ZN13STM32HardwareC1Ev>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f88c 	bl	8001d3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b18      	cmp	r3, #24
 8002c2c:	d80a      	bhi.n	8002c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c36:	2100      	movs	r1, #0
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e7f1      	b.n	8002c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b18      	cmp	r3, #24
 8002c4c:	d80b      	bhi.n	8002c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3301      	adds	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e7f0      	b.n	8002c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d209      	bcs.n	8002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	3318      	adds	r3, #24
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e7f1      	b.n	8002c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c90:	d20a      	bcs.n	8002ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	e7f0      	b.n	8002c8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	615a      	str	r2, [r3, #20]
  }
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	08007674 	.word	0x08007674

08002cec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	080076d0 	.word	0x080076d0

08002d0c <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ffe5 	bl	8002cec <_ZN3ros11Subscriber_C1Ev>
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fd57 	bl	80027e0 <_ZN8std_msgs14ByteMultiArrayC1Ev>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
  };
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	0800765c 	.word	0x0800765c

08002d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fc2f 	bl	80015c4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b18      	cmp	r3, #24
 8002da0:	dc1b      	bgt.n	8002dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
        return true;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e004      	b.n	8002ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e7e0      	b.n	8002d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002dda:	2300      	movs	r3, #0
  }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fc11 	bl	800161c <_ZN13STM32Hardware4timeEv>
 8002dfa:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d903      	bls.n	8002e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d009      	beq.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d903      	bls.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fbeb 	bl	800161c <_ZN13STM32Hardware4timeEv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad2      	subs	r2, r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	bf8c      	ite	hi
 8002e54:	2301      	movhi	r3, #1
 8002e56:	2300      	movls	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002e5e:	f06f 0301 	mvn.w	r3, #1
 8002e62:	e193      	b.n	800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe fbb8 	bl	80015de <_ZN13STM32Hardware4readEv>
 8002e6e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f2c0 8173 	blt.w	800315e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e8e:	2b07      	cmp	r3, #7
 8002e90:	d11d      	bne.n	8002ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e98:	1c59      	adds	r1, r3, #1
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	b2d1      	uxtb	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002eb2:	1e5a      	subs	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1b7      	bne.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002ecc:	e7b2      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d128      	bne.n	8002f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2bff      	cmp	r3, #255	; 0xff
 8002edc:	d10d      	bne.n	8002efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f103 0214 	add.w	r2, r3, #20
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002ef8:	e79c      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fb8c 	bl	800161c <_ZN13STM32Hardware4timeEv>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	bf8c      	ite	hi
 8002f12:	2301      	movhi	r3, #1
 8002f14:	2300      	movls	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d08b      	beq.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8002f24:	f06f 0301 	mvn.w	r3, #1
 8002f28:	e130      	b.n	800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11b      	bne.n	8002f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2bfe      	cmp	r3, #254	; 0xfe
 8002f38:	d107      	bne.n	8002f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002f48:	e774      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f58:	f083 0301 	eor.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f43f af68 	beq.w	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f915 	bl	8003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002f6a:	e763      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d113      	bne.n	8002f9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002f9c:	e74a      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d110      	bne.n	8002fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	441a      	add	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002fc8:	e734      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d116      	bne.n	8003002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002fda:	425a      	negs	r2, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	bf58      	it	pl
 8002fe2:	4253      	negpl	r3, r2
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	d107      	bne.n	8002ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002ff6:	e71d      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003000:	e718      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003008:	2b05      	cmp	r3, #5
 800300a:	d10f      	bne.n	800302c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800302a:	e703      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003032:	2b06      	cmp	r3, #6
 8003034:	d117      	bne.n	8003066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2207      	movs	r2, #7
 800304c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003056:	2b00      	cmp	r3, #0
 8003058:	f47f aeec 	bne.w	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2208      	movs	r2, #8
 8003060:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003064:	e6e6      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800306c:	2b08      	cmp	r3, #8
 800306e:	f47f aee1 	bne.w	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003080:	425a      	negs	r2, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	bf58      	it	pl
 8003088:	4253      	negpl	r3, r2
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	f47f aed2 	bne.w	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d110      	bne.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f87a 	bl	8003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f894 	bl	80031ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ba:	e067      	b.n	800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80030c2:	2b0a      	cmp	r3, #10
 80030c4:	d106      	bne.n	80030d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3318      	adds	r3, #24
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f95f 	bl	8003390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80030d2:	e6af      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d10d      	bne.n	80030fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3318      	adds	r3, #24
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fe ff5b 	bl	8001fa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80030f8:	e69c      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003100:	2b0b      	cmp	r3, #11
 8003102:	d104      	bne.n	800310e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800310c:	e692      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003114:	3b64      	subs	r3, #100	; 0x64
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f43f ae86 	beq.w	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800312e:	3b64      	subs	r3, #100	; 0x64
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	6858      	ldr	r0, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003142:	3b64      	subs	r3, #100	; 0x64
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	3218      	adds	r2, #24
 8003158:	4611      	mov	r1, r2
 800315a:	4798      	blx	r3
    while (true)
 800315c:	e66a      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800315e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00f      	beq.n	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003178:	4293      	cmp	r3, r2
 800317a:	d906      	bls.n	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f809 	bl	8003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 800318a:	2300      	movs	r3, #0
  }
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fa67 	bl	8001674 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f107 020c 	add.w	r2, r7, #12
 80031b0:	210a      	movs	r1, #10
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
    rt_time = hardware_.time();
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fa2e 	bl	800161c <_ZN13STM32Hardware4timeEv>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	609a      	str	r2, [r3, #8]
  }
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80031ce:	b590      	push	{r4, r7, lr}
 80031d0:	b08b      	sub	sp, #44	; 0x2c
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fb3a 	bl	8001854 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	2b18      	cmp	r3, #24
 80031e8:	dc5b      	bgt.n	80032a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80031f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04f      	beq.n	800329a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	b29b      	uxth	r3, r3
 800320a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3308      	adds	r3, #8
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4608      	mov	r0, r1
 8003240:	4798      	blx	r3
 8003242:	4603      	mov	r3, r0
 8003244:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800324e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4608      	mov	r0, r1
 800326a:	4798      	blx	r3
 800326c:	4603      	mov	r3, r0
 800326e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003274:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681c      	ldr	r4, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f819 	bl	80022c0 <_ZN3ros9Publisher15getEndpointTypeEv>
 800328e:	4601      	mov	r1, r0
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	461a      	mov	r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	3301      	adds	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e7a0      	b.n	80031e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	2b18      	cmp	r3, #24
 80032aa:	dc68      	bgt.n	800337e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d05b      	beq.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3308      	adds	r3, #8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4608      	mov	r0, r1
 8003308:	4798      	blx	r3
 800330a:	4603      	mov	r3, r0
 800330c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4608      	mov	r0, r1
 8003332:	4798      	blx	r3
 8003334:	4603      	mov	r3, r0
 8003336:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800333c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681c      	ldr	r4, [r3, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3304      	adds	r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4608      	mov	r0, r1
 8003368:	4798      	blx	r3
 800336a:	4601      	mov	r1, r0
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	461a      	mov	r2, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	3301      	adds	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
 800337c:	e793      	b.n	80032a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8003386:	bf00      	nop
 8003388:	372c      	adds	r7, #44	; 0x2c
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
	...

08003390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f968 	bl	8001674 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe f937 	bl	800161c <_ZN13STM32Hardware4timeEv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe f9c8 	bl	8001754 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4914      	ldr	r1, [pc, #80]	; (800341c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80033ca:	fba1 1303 	umull	r1, r3, r1, r3
 80033ce:	099b      	lsrs	r3, r3, #6
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80033da:	fba3 0302 	umull	r0, r3, r3, r2
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e4:	fb00 f303 	mul.w	r3, r0, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	440b      	add	r3, r1
 80033f2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8a3 	bl	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe f908 	bl	800161c <_ZN13STM32Hardware4timeEv>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8003414:	bf00      	nop
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	10624dd3 	.word	0x10624dd3
 8003420:	000f4240 	.word	0x000f4240

08003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b63      	cmp	r3, #99	; 0x63
 8003434:	dd09      	ble.n	800344a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800343c:	f083 0301 	eor.w	r3, r3, #1
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003446:	2300      	movs	r3, #0
 8003448:	e077      	b.n	800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8003456:	3207      	adds	r2, #7
 8003458:	4611      	mov	r1, r2
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	22ff      	movs	r2, #255	; 0xff
 8003464:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22fe      	movs	r2, #254	; 0xfe
 800346c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	b29b      	uxth	r3, r3
 800347e:	121b      	asrs	r3, r3, #8
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8003494:	4413      	add	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	121b      	asrs	r3, r3, #8
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80034be:	2305      	movs	r3, #5
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3307      	adds	r3, #7
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	da0d      	bge.n	80034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	e7ec      	b.n	80034c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3307      	adds	r3, #7
 80034ec:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	425a      	negs	r2, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	bf58      	it	pl
 80034f8:	4253      	negpl	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	1c59      	adds	r1, r3, #1
 8003500:	6179      	str	r1, [r7, #20]
 8003502:	43d2      	mvns	r2, r2
 8003504:	b2d1      	uxtb	r1, r2
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	460a      	mov	r2, r1
 800350c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003516:	dc0a      	bgt.n	800352e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1d18      	adds	r0, r3, #4
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4619      	mov	r1, r3
 8003526:	f7fe f868 	bl	80015fa <_ZN13STM32Hardware5writeEPhi>
      return l;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	e005      	b.n	800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800352e:	4905      	ldr	r1, [pc, #20]	; (8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f847 	bl	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	080075f4 	.word	0x080075f4

08003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe f860 	bl	800161c <_ZN13STM32Hardware4timeEv>
 800355c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4914      	ldr	r1, [pc, #80]	; (80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8003566:	fba1 1303 	umull	r1, r3, r1, r3
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800357c:	fba3 0302 	umull	r0, r3, r3, r2
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003586:	fb00 f303 	mul.w	r3, r0, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	1aca      	subs	r2, r1, r3
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003596:	4413      	add	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f103 020c 	add.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3310      	adds	r3, #16
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 fb15 	bl	8003bd8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	10624dd3 	.word	0x10624dd3
 80035bc:	000f4240 	.word	0x000f4240
 80035c0:	3b9aca00 	.word	0x3b9aca00

080035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	2103      	movs	r1, #3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f804 	bl	80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	460b      	mov	r3, r1
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe faf2 	bl	8001bdc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f107 0214 	add.w	r2, r7, #20
 800360a:	2107      	movs	r1, #7
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	4798      	blx	r3
  }
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_Z41__static_initialization_and_destruction_0ii>:
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10d      	bne.n	8003644 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003632:	4806      	ldr	r0, [pc, #24]	; (800364c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003634:	f7ff fadc 	bl	8002bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::ByteMultiArray> servo_sub("chatter", &servo_go);
 8003638:	2301      	movs	r3, #1
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800363c:	4905      	ldr	r1, [pc, #20]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800363e:	4806      	ldr	r0, [pc, #24]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003640:	f7ff fb64 	bl	8002d0c <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200004a0 	.word	0x200004a0
 8003650:	080029e5 	.word	0x080029e5
 8003654:	08007630 	.word	0x08007630
 8003658:	200009d0 	.word	0x200009d0

0800365c <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	330c      	adds	r3, #12
 800366a:	6839      	ldr	r1, [r7, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f92c 	bl	80028ca <_ZN8std_msgs14ByteMultiArray11deserializeEPh>
    this->cb_(msg);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	320c      	adds	r2, #12
 800367a:	4610      	mov	r0, r2
 800367c:	4798      	blx	r3
  }
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	330c      	adds	r3, #12
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f97e 	bl	80029ac <_ZN8std_msgs14ByteMultiArray7getTypeEv>
 80036b0:	4603      	mov	r3, r0
  }
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	330c      	adds	r3, #12
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f97e 	bl	80029c8 <_ZN8std_msgs14ByteMultiArray6getMD5Ev>
 80036cc:	4603      	mov	r3, r0
  }
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
    return configured_;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_GLOBAL__sub_I_nh>:
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7ff ff8d 	bl	8003618 <_Z41__static_initialization_and_destruction_0ii>
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_MspInit+0x4c>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_MspInit+0x4c>)
 8003710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_MspInit+0x4c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_MspInit+0x4c>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <HAL_MspInit+0x4c>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003730:	6413      	str	r3, [r2, #64]	; 0x40
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_MspInit+0x4c>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800373e:	2007      	movs	r0, #7
 8003740:	f000 fc04 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800

08003750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <HAL_TIM_Base_MspInit+0x8c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6453      	str	r3, [r2, #68]	; 0x44
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800377e:	e026      	b.n	80037ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_TIM_Base_MspInit+0x94>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	6453      	str	r3, [r2, #68]	; 0x44
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
}
 80037a6:	e012      	b.n	80037ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <HAL_TIM_Base_MspInit+0x98>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_TIM_Base_MspInit+0x90>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40014400 	.word	0x40014400
 80037e8:	40014800 	.word	0x40014800

080037ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a37      	ldr	r2, [pc, #220]	; (80038e8 <HAL_TIM_MspPostInit+0xfc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d11f      	bne.n	800384e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a35      	ldr	r2, [pc, #212]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800382a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800382e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4619      	mov	r1, r3
 8003846:	482a      	ldr	r0, [pc, #168]	; (80038f0 <HAL_TIM_MspPostInit+0x104>)
 8003848:	f000 ff52 	bl	80046f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800384c:	e048      	b.n	80038e0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM10)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <HAL_TIM_MspPostInit+0x108>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d11f      	bne.n	8003898 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	6313      	str	r3, [r2, #48]	; 0x30
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003886:	2303      	movs	r3, #3
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4619      	mov	r1, r3
 8003890:	4819      	ldr	r0, [pc, #100]	; (80038f8 <HAL_TIM_MspPostInit+0x10c>)
 8003892:	f000 ff2d 	bl	80046f0 <HAL_GPIO_Init>
}
 8003896:	e023      	b.n	80038e0 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM11)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_TIM_MspPostInit+0x110>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d11e      	bne.n	80038e0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_TIM_MspPostInit+0x100>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80038d0:	2303      	movs	r3, #3
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4619      	mov	r1, r3
 80038da:	4807      	ldr	r0, [pc, #28]	; (80038f8 <HAL_TIM_MspPostInit+0x10c>)
 80038dc:	f000 ff08 	bl	80046f0 <HAL_GPIO_Init>
}
 80038e0:	bf00      	nop
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020000 	.word	0x40020000
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40014800 	.word	0x40014800

08003900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a4c      	ldr	r2, [pc, #304]	; (8003a50 <HAL_UART_MspInit+0x150>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f040 8092 	bne.w	8003a48 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_UART_MspInit+0x154>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_UART_MspInit+0x154>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
 8003934:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_UART_MspInit+0x154>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <HAL_UART_MspInit+0x154>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <HAL_UART_MspInit+0x154>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6313      	str	r3, [r2, #48]	; 0x30
 8003950:	4b40      	ldr	r3, [pc, #256]	; (8003a54 <HAL_UART_MspInit+0x154>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800395c:	230c      	movs	r3, #12
 800395e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2303      	movs	r3, #3
 800396a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800396c:	2307      	movs	r3, #7
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	4619      	mov	r1, r3
 8003976:	4838      	ldr	r0, [pc, #224]	; (8003a58 <HAL_UART_MspInit+0x158>)
 8003978:	f000 feba 	bl	80046f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800397c:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_UART_MspInit+0x160>)
 8003980:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003982:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 8003984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003988:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003990:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 8003992:	2200      	movs	r2, #0
 8003994:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003996:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 8003998:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800399c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039be:	4827      	ldr	r0, [pc, #156]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039c0:	f000 fb06 	bl	8003fd0 <HAL_DMA_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80039ca:	f7fd fde7 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039d2:	635a      	str	r2, [r3, #52]	; 0x34
 80039d4:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_UART_MspInit+0x15c>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_UART_MspInit+0x164>)
 80039dc:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <HAL_UART_MspInit+0x168>)
 80039de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_UART_MspInit+0x164>)
 80039e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_UART_MspInit+0x164>)
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_UART_MspInit+0x164>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_UART_MspInit+0x164>)
 80039f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_UART_MspInit+0x164>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a14:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a1c:	4811      	ldr	r0, [pc, #68]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a1e:	f000 fad7 	bl	8003fd0 <HAL_DMA_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8003a28:	f7fd fdb8 	bl	800159c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_UART_MspInit+0x164>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2026      	movs	r0, #38	; 0x26
 8003a3e:	f000 fa90 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a42:	2026      	movs	r0, #38	; 0x26
 8003a44:	f000 faa9 	bl	8003f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a48:	bf00      	nop
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40004400 	.word	0x40004400
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40020000 	.word	0x40020000
 8003a5c:	20000a20 	.word	0x20000a20
 8003a60:	40026088 	.word	0x40026088
 8003a64:	20000ac0 	.word	0x20000ac0
 8003a68:	400260a0 	.word	0x400260a0

08003a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <NMI_Handler+0x4>

08003a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <HardFault_Handler+0x4>

08003a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <MemManage_Handler+0x4>

08003a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <BusFault_Handler+0x4>

08003a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <UsageFault_Handler+0x4>

08003a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab8:	f000 f936 	bl	8003d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <DMA1_Stream5_IRQHandler+0x10>)
 8003ac6:	f000 fbab 	bl	8004220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000a20 	.word	0x20000a20

08003ad4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <DMA1_Stream6_IRQHandler+0x10>)
 8003ada:	f000 fba1 	bl	8004220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000ac0 	.word	0x20000ac0

08003ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <USART2_IRQHandler+0x10>)
 8003aee:	f002 fc89 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000ba0 	.word	0x20000ba0

08003afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
	return 1;
 8003b00:	2301      	movs	r3, #1
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_kill>:

int _kill(int pid, int sig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b16:	f003 fb25 	bl	8007164 <__errno>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	2316      	movs	r3, #22
 8003b1e:	6013      	str	r3, [r2, #0]
	return -1;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_exit>:

void _exit (int status)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ffe7 	bl	8003b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b3e:	e7fe      	b.n	8003b3e <_exit+0x12>

08003b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <_sbrk+0x5c>)
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <_sbrk+0x60>)
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <_sbrk+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <_sbrk+0x64>)
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <_sbrk+0x68>)
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <_sbrk+0x64>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d207      	bcs.n	8003b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b70:	f003 faf8 	bl	8007164 <__errno>
 8003b74:	4602      	mov	r2, r0
 8003b76:	230c      	movs	r3, #12
 8003b78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b7e:	e009      	b.n	8003b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <_sbrk+0x64>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <_sbrk+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <_sbrk+0x64>)
 8003b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20020000 	.word	0x20020000
 8003ba0:	00000400 	.word	0x00000400
 8003ba4:	20000a14 	.word	0x20000a14
 8003ba8:	20000be8 	.word	0x20000be8

08003bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <SystemInit+0x28>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <SystemInit+0x28>)
 8003bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SystemInit+0x28>)
 8003bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0a5a      	lsrs	r2, r3, #9
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003bea:	fba1 1202 	umull	r1, r2, r1, r2
 8003bee:	09d2      	lsrs	r2, r2, #7
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003bf2:	fb01 f202 	mul.w	r2, r1, r2
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	0a5b      	lsrs	r3, r3, #9
 8003c00:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	09db      	lsrs	r3, r3, #7
 8003c08:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	00044b83 	.word	0x00044b83
 8003c2c:	3b9aca00 	.word	0x3b9aca00

08003c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c36:	e003      	b.n	8003c40 <LoopCopyDataInit>

08003c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c3e:	3104      	adds	r1, #4

08003c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c40:	480b      	ldr	r0, [pc, #44]	; (8003c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c48:	d3f6      	bcc.n	8003c38 <CopyDataInit>
  ldr  r2, =_sbss
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c4c:	e002      	b.n	8003c54 <LoopFillZerobss>

08003c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c50:	f842 3b04 	str.w	r3, [r2], #4

08003c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c58:	d3f9      	bcc.n	8003c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c5a:	f7ff ffa7 	bl	8003bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c5e:	f003 fa87 	bl	8007170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c62:	f7fd f9fd 	bl	8001060 <main>
  bx  lr    
 8003c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c6c:	080077a4 	.word	0x080077a4
  ldr  r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c74:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003c78:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8003c7c:	20000be8 	.word	0x20000be8

08003c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c80:	e7fe      	b.n	8003c80 <ADC_IRQHandler>
	...

08003c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_Init+0x40>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <HAL_Init+0x40>)
 8003c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_Init+0x40>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <HAL_Init+0x40>)
 8003c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_Init+0x40>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_Init+0x40>)
 8003ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cac:	2003      	movs	r0, #3
 8003cae:	f000 f94d 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f000 f808 	bl	8003cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cb8:	f7ff fd22 	bl	8003700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00

08003cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_InitTick+0x54>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_InitTick+0x58>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f965 	bl	8003fb6 <HAL_SYSTICK_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00e      	b.n	8003d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	d80a      	bhi.n	8003d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d04:	f000 f92d 	bl	8003f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <HAL_InitTick+0x5c>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000008 	.word	0x20000008
 8003d24:	20000004 	.word	0x20000004

08003d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_IncTick+0x20>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_IncTick+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_IncTick+0x24>)
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	20000be0 	.word	0x20000be0

08003d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_GetTick+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000be0 	.word	0x20000be0

08003d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff ffee 	bl	8003d50 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d80:	d005      	beq.n	8003d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_Delay+0x40>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d8e:	bf00      	nop
 8003d90:	f7ff ffde 	bl	8003d50 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d8f7      	bhi.n	8003d90 <HAL_Delay+0x28>
  {
  }
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000008 	.word	0x20000008

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	; (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	; (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	; 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f18:	d301      	bcc.n	8003f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <SysTick_Config+0x40>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f26:	210f      	movs	r1, #15
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2c:	f7ff ff8e 	bl	8003e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <SysTick_Config+0x40>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SysTick_Config+0x40>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff29 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f74:	f7ff ff3e 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	6978      	ldr	r0, [r7, #20]
 8003f80:	f7ff ff8e 	bl	8003ea0 <NVIC_EncodePriority>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff5d 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff31 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffa2 	bl	8003f08 <SysTick_Config>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff feb8 	bl	8003d50 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e099      	b.n	8004120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800400c:	e00f      	b.n	800402e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800400e:	f7ff fe9f 	bl	8003d50 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b05      	cmp	r3, #5
 800401a:	d908      	bls.n	800402e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2203      	movs	r2, #3
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e078      	b.n	8004120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e8      	bne.n	800400e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4b38      	ldr	r3, [pc, #224]	; (8004128 <HAL_DMA_Init+0x158>)
 8004048:	4013      	ands	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800405a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	4313      	orrs	r3, r2
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0307 	bic.w	r3, r3, #7
 80040ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d117      	bne.n	80040f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fa91 	bl	80045fc <DMA_CheckFifoParam>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ee:	2301      	movs	r3, #1
 80040f0:	e016      	b.n	8004120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa48 	bl	8004590 <DMA_CalcBaseAndBitshift>
 8004100:	4603      	mov	r3, r0
 8004102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	223f      	movs	r2, #63	; 0x3f
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	f010803f 	.word	0xf010803f

0800412c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_DMA_Start_IT+0x26>
 800414e:	2302      	movs	r3, #2
 8004150:	e040      	b.n	80041d4 <HAL_DMA_Start_IT+0xa8>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d12f      	bne.n	80041c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f9da 	bl	8004534 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004184:	223f      	movs	r2, #63	; 0x3f
 8004186:	409a      	lsls	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0216 	orr.w	r2, r2, #22
 800419a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e005      	b.n	80041d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d004      	beq.n	80041fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2280      	movs	r2, #128	; 0x80
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00c      	b.n	8004214 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2205      	movs	r2, #5
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800422c:	4b92      	ldr	r3, [pc, #584]	; (8004478 <HAL_DMA_IRQHandler+0x258>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a92      	ldr	r2, [pc, #584]	; (800447c <HAL_DMA_IRQHandler+0x25c>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0a9b      	lsrs	r3, r3, #10
 8004238:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2208      	movs	r2, #8
 800424c:	409a      	lsls	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01a      	beq.n	800428c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0204 	bic.w	r2, r2, #4
 8004272:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	2208      	movs	r2, #8
 800427a:	409a      	lsls	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	2201      	movs	r2, #1
 8004292:	409a      	lsls	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d012      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ae:	2201      	movs	r2, #1
 80042b0:	409a      	lsls	r2, r3
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2204      	movs	r2, #4
 80042c8:	409a      	lsls	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d012      	beq.n	80042f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	2204      	movs	r2, #4
 80042e6:	409a      	lsls	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	2210      	movs	r2, #16
 80042fe:	409a      	lsls	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d043      	beq.n	8004390 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03c      	beq.n	8004390 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	2210      	movs	r2, #16
 800431c:	409a      	lsls	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d018      	beq.n	8004362 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d024      	beq.n	8004390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
 800434e:	e01f      	b.n	8004390 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
 8004360:	e016      	b.n	8004390 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d107      	bne.n	8004380 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0208 	bic.w	r2, r2, #8
 800437e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	2220      	movs	r2, #32
 8004396:	409a      	lsls	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 808e 	beq.w	80044be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8086 	beq.w	80044be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	2220      	movs	r2, #32
 80043b8:	409a      	lsls	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d136      	bne.n	8004438 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0216 	bic.w	r2, r2, #22
 80043d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_DMA_IRQHandler+0x1da>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0208 	bic.w	r2, r2, #8
 8004408:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	223f      	movs	r2, #63	; 0x3f
 8004410:	409a      	lsls	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	2b00      	cmp	r3, #0
 800442c:	d07d      	beq.n	800452a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
        }
        return;
 8004436:	e078      	b.n	800452a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01c      	beq.n	8004480 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	2b00      	cmp	r3, #0
 800445a:	d030      	beq.n	80044be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
 8004464:	e02b      	b.n	80044be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d027      	beq.n	80044be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
 8004476:	e022      	b.n	80044be <HAL_DMA_IRQHandler+0x29e>
 8004478:	20000000 	.word	0x20000000
 800447c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0210 	bic.w	r2, r2, #16
 800449c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d032      	beq.n	800452c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d022      	beq.n	8004518 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2205      	movs	r2, #5
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d307      	bcc.n	8004506 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f2      	bne.n	80044ea <HAL_DMA_IRQHandler+0x2ca>
 8004504:	e000      	b.n	8004508 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004506:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
 8004528:	e000      	b.n	800452c <HAL_DMA_IRQHandler+0x30c>
        return;
 800452a:	bf00      	nop
    }
  }
}
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004550:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d108      	bne.n	8004574 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004572:	e007      	b.n	8004584 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	3b10      	subs	r3, #16
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <DMA_CalcBaseAndBitshift+0x64>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <DMA_CalcBaseAndBitshift+0x68>)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d909      	bls.n	80045d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	659a      	str	r2, [r3, #88]	; 0x58
 80045d0:	e007      	b.n	80045e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	aaaaaaab 	.word	0xaaaaaaab
 80045f8:	08007784 	.word	0x08007784

080045fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d11f      	bne.n	8004656 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d855      	bhi.n	80046c8 <DMA_CheckFifoParam+0xcc>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <DMA_CheckFifoParam+0x28>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004635 	.word	0x08004635
 8004628:	08004647 	.word	0x08004647
 800462c:	08004635 	.word	0x08004635
 8004630:	080046c9 	.word	0x080046c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d045      	beq.n	80046cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004644:	e042      	b.n	80046cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800464e:	d13f      	bne.n	80046d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004654:	e03c      	b.n	80046d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465e:	d121      	bne.n	80046a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d836      	bhi.n	80046d4 <DMA_CheckFifoParam+0xd8>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <DMA_CheckFifoParam+0x70>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	0800467d 	.word	0x0800467d
 8004670:	08004683 	.word	0x08004683
 8004674:	0800467d 	.word	0x0800467d
 8004678:	08004695 	.word	0x08004695
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	e02f      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d024      	beq.n	80046d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004692:	e021      	b.n	80046d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800469c:	d11e      	bne.n	80046dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046a2:	e01b      	b.n	80046dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d902      	bls.n	80046b0 <DMA_CheckFifoParam+0xb4>
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d003      	beq.n	80046b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046ae:	e018      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e015      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00e      	beq.n	80046e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      break;
 80046c6:	e00b      	b.n	80046e0 <DMA_CheckFifoParam+0xe4>
      break;
 80046c8:	bf00      	nop
 80046ca:	e00a      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      break;
 80046cc:	bf00      	nop
 80046ce:	e008      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      break;
 80046d0:	bf00      	nop
 80046d2:	e006      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      break;
 80046d4:	bf00      	nop
 80046d6:	e004      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <DMA_CheckFifoParam+0xe6>
      break;
 80046e0:	bf00      	nop
    }
  } 
  
  return status; 
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e165      	b.n	80049d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800470c:	2201      	movs	r2, #1
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	429a      	cmp	r2, r3
 8004726:	f040 8154 	bne.w	80049d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d00b      	beq.n	800474a <HAL_GPIO_Init+0x5a>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d007      	beq.n	800474a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800473e:	2b11      	cmp	r3, #17
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b12      	cmp	r3, #18
 8004748:	d130      	bne.n	80047ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	2203      	movs	r2, #3
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0201 	and.w	r2, r3, #1
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0xfc>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b12      	cmp	r3, #18
 80047ea:	d123      	bne.n	8004834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	08da      	lsrs	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3208      	adds	r2, #8
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	220f      	movs	r2, #15
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	08da      	lsrs	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3208      	adds	r2, #8
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	2203      	movs	r2, #3
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80ae 	beq.w	80049d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	4b5c      	ldr	r3, [pc, #368]	; (80049ec <HAL_GPIO_Init+0x2fc>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	4a5b      	ldr	r2, [pc, #364]	; (80049ec <HAL_GPIO_Init+0x2fc>)
 8004880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b59      	ldr	r3, [pc, #356]	; (80049ec <HAL_GPIO_Init+0x2fc>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004892:	4a57      	ldr	r2, [pc, #348]	; (80049f0 <HAL_GPIO_Init+0x300>)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	3302      	adds	r3, #2
 800489a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	220f      	movs	r2, #15
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_GPIO_Init+0x304>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d025      	beq.n	800490a <HAL_GPIO_Init+0x21a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4d      	ldr	r2, [pc, #308]	; (80049f8 <HAL_GPIO_Init+0x308>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01f      	beq.n	8004906 <HAL_GPIO_Init+0x216>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_GPIO_Init+0x30c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d019      	beq.n	8004902 <HAL_GPIO_Init+0x212>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4b      	ldr	r2, [pc, #300]	; (8004a00 <HAL_GPIO_Init+0x310>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_GPIO_Init+0x20e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4a      	ldr	r2, [pc, #296]	; (8004a04 <HAL_GPIO_Init+0x314>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00d      	beq.n	80048fa <HAL_GPIO_Init+0x20a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a49      	ldr	r2, [pc, #292]	; (8004a08 <HAL_GPIO_Init+0x318>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d007      	beq.n	80048f6 <HAL_GPIO_Init+0x206>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a48      	ldr	r2, [pc, #288]	; (8004a0c <HAL_GPIO_Init+0x31c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <HAL_GPIO_Init+0x202>
 80048ee:	2306      	movs	r3, #6
 80048f0:	e00c      	b.n	800490c <HAL_GPIO_Init+0x21c>
 80048f2:	2307      	movs	r3, #7
 80048f4:	e00a      	b.n	800490c <HAL_GPIO_Init+0x21c>
 80048f6:	2305      	movs	r3, #5
 80048f8:	e008      	b.n	800490c <HAL_GPIO_Init+0x21c>
 80048fa:	2304      	movs	r3, #4
 80048fc:	e006      	b.n	800490c <HAL_GPIO_Init+0x21c>
 80048fe:	2303      	movs	r3, #3
 8004900:	e004      	b.n	800490c <HAL_GPIO_Init+0x21c>
 8004902:	2302      	movs	r3, #2
 8004904:	e002      	b.n	800490c <HAL_GPIO_Init+0x21c>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_GPIO_Init+0x21c>
 800490a:	2300      	movs	r3, #0
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f002 0203 	and.w	r2, r2, #3
 8004912:	0092      	lsls	r2, r2, #2
 8004914:	4093      	lsls	r3, r2
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800491c:	4934      	ldr	r1, [pc, #208]	; (80049f0 <HAL_GPIO_Init+0x300>)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	3302      	adds	r3, #2
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <HAL_GPIO_Init+0x320>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800494e:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <HAL_GPIO_Init+0x320>)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004954:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <HAL_GPIO_Init+0x320>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004978:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <HAL_GPIO_Init+0x320>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <HAL_GPIO_Init+0x320>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_GPIO_Init+0x320>)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_GPIO_Init+0x320>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049cc:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <HAL_GPIO_Init+0x320>)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	f67f ae96 	bls.w	800470c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049e0:	bf00      	nop
 80049e2:	3724      	adds	r7, #36	; 0x24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40013800 	.word	0x40013800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400
 80049fc:	40020800 	.word	0x40020800
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40021400 	.word	0x40021400
 8004a0c:	40021800 	.word	0x40021800
 8004a10:	40013c00 	.word	0x40013c00

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a30:	e003      	b.n	8004a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0cc      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d90c      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0b8      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a9c:	4b59      	ldr	r3, [pc, #356]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab4:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	494d      	ldr	r1, [pc, #308]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d044      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d119      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e067      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4934      	ldr	r1, [pc, #208]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b38:	f7ff f90a 	bl	8003d50 <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7ff f906 	bl	8003d50 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e04f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 020c 	and.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1eb      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d20c      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e032      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4916      	ldr	r1, [pc, #88]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	490e      	ldr	r1, [pc, #56]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bce:	f000 f855 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	5cd3      	ldrb	r3, [r2, r3]
 8004be2:	fa21 f303 	lsr.w	r3, r1, r3
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff f86a 	bl	8003cc8 <HAL_InitTick>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023c00 	.word	0x40023c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	0800776c 	.word	0x0800776c
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	20000004 	.word	0x20000004

08004c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000000 	.word	0x20000000

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c30:	f7ff fff0 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c34:	4601      	mov	r1, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	0800777c 	.word	0x0800777c

08004c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c58:	f7ff ffdc 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0b5b      	lsrs	r3, r3, #13
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4a03      	ldr	r2, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800777c 	.word	0x0800777c

08004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c96:	4bc6      	ldr	r3, [pc, #792]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	f200 817e 	bhi.w	8004fa0 <HAL_RCC_GetSysClockFreq+0x324>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <HAL_RCC_GetSysClockFreq+0x30>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004ce1 	.word	0x08004ce1
 8004cb0:	08004fa1 	.word	0x08004fa1
 8004cb4:	08004fa1 	.word	0x08004fa1
 8004cb8:	08004fa1 	.word	0x08004fa1
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004fa1 	.word	0x08004fa1
 8004cc4:	08004fa1 	.word	0x08004fa1
 8004cc8:	08004fa1 	.word	0x08004fa1
 8004ccc:	08004ced 	.word	0x08004ced
 8004cd0:	08004fa1 	.word	0x08004fa1
 8004cd4:	08004fa1 	.word	0x08004fa1
 8004cd8:	08004fa1 	.word	0x08004fa1
 8004cdc:	08004e49 	.word	0x08004e49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4bb4      	ldr	r3, [pc, #720]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004ce2:	613b      	str	r3, [r7, #16]
       break;
 8004ce4:	e15f      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce6:	4bb4      	ldr	r3, [pc, #720]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004ce8:	613b      	str	r3, [r7, #16]
      break;
 8004cea:	e15c      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cec:	4bb0      	ldr	r3, [pc, #704]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf6:	4bae      	ldr	r3, [pc, #696]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04a      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4bab      	ldr	r3, [pc, #684]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	f04f 0400 	mov.w	r4, #0
 8004d0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	ea03 0501 	and.w	r5, r3, r1
 8004d18:	ea04 0602 	and.w	r6, r4, r2
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4632      	mov	r2, r6
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	f04f 0400 	mov.w	r4, #0
 8004d28:	0154      	lsls	r4, r2, #5
 8004d2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d2e:	014b      	lsls	r3, r1, #5
 8004d30:	4619      	mov	r1, r3
 8004d32:	4622      	mov	r2, r4
 8004d34:	1b49      	subs	r1, r1, r5
 8004d36:	eb62 0206 	sbc.w	r2, r2, r6
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f04f 0400 	mov.w	r4, #0
 8004d42:	0194      	lsls	r4, r2, #6
 8004d44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d48:	018b      	lsls	r3, r1, #6
 8004d4a:	1a5b      	subs	r3, r3, r1
 8004d4c:	eb64 0402 	sbc.w	r4, r4, r2
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	00e2      	lsls	r2, r4, #3
 8004d5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d5e:	00d9      	lsls	r1, r3, #3
 8004d60:	460b      	mov	r3, r1
 8004d62:	4614      	mov	r4, r2
 8004d64:	195b      	adds	r3, r3, r5
 8004d66:	eb44 0406 	adc.w	r4, r4, r6
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	0262      	lsls	r2, r4, #9
 8004d74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d78:	0259      	lsls	r1, r3, #9
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	4621      	mov	r1, r4
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	f7fb fe38 	bl	8000a00 <__aeabi_uldivmod>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e049      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d98:	4b85      	ldr	r3, [pc, #532]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	f04f 0400 	mov.w	r4, #0
 8004da2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	ea03 0501 	and.w	r5, r3, r1
 8004dae:	ea04 0602 	and.w	r6, r4, r2
 8004db2:	4629      	mov	r1, r5
 8004db4:	4632      	mov	r2, r6
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	f04f 0400 	mov.w	r4, #0
 8004dbe:	0154      	lsls	r4, r2, #5
 8004dc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dc4:	014b      	lsls	r3, r1, #5
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4622      	mov	r2, r4
 8004dca:	1b49      	subs	r1, r1, r5
 8004dcc:	eb62 0206 	sbc.w	r2, r2, r6
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	0194      	lsls	r4, r2, #6
 8004dda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dde:	018b      	lsls	r3, r1, #6
 8004de0:	1a5b      	subs	r3, r3, r1
 8004de2:	eb64 0402 	sbc.w	r4, r4, r2
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	00e2      	lsls	r2, r4, #3
 8004df0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004df4:	00d9      	lsls	r1, r3, #3
 8004df6:	460b      	mov	r3, r1
 8004df8:	4614      	mov	r4, r2
 8004dfa:	195b      	adds	r3, r3, r5
 8004dfc:	eb44 0406 	adc.w	r4, r4, r6
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	02a2      	lsls	r2, r4, #10
 8004e0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e0e:	0299      	lsls	r1, r3, #10
 8004e10:	460b      	mov	r3, r1
 8004e12:	4614      	mov	r4, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	4621      	mov	r1, r4
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f04f 0400 	mov.w	r4, #0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4623      	mov	r3, r4
 8004e22:	f7fb fded 	bl	8000a00 <__aeabi_uldivmod>
 8004e26:	4603      	mov	r3, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	3301      	adds	r3, #1
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	613b      	str	r3, [r7, #16]
      break;
 8004e46:	e0ae      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e48:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e50:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e52:	4b57      	ldr	r3, [pc, #348]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d04a      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5e:	4b54      	ldr	r3, [pc, #336]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	f04f 0400 	mov.w	r4, #0
 8004e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	ea03 0501 	and.w	r5, r3, r1
 8004e74:	ea04 0602 	and.w	r6, r4, r2
 8004e78:	4629      	mov	r1, r5
 8004e7a:	4632      	mov	r2, r6
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	f04f 0400 	mov.w	r4, #0
 8004e84:	0154      	lsls	r4, r2, #5
 8004e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e8a:	014b      	lsls	r3, r1, #5
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4622      	mov	r2, r4
 8004e90:	1b49      	subs	r1, r1, r5
 8004e92:	eb62 0206 	sbc.w	r2, r2, r6
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	f04f 0400 	mov.w	r4, #0
 8004e9e:	0194      	lsls	r4, r2, #6
 8004ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ea4:	018b      	lsls	r3, r1, #6
 8004ea6:	1a5b      	subs	r3, r3, r1
 8004ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	00e2      	lsls	r2, r4, #3
 8004eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004eba:	00d9      	lsls	r1, r3, #3
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4614      	mov	r4, r2
 8004ec0:	195b      	adds	r3, r3, r5
 8004ec2:	eb44 0406 	adc.w	r4, r4, r6
 8004ec6:	f04f 0100 	mov.w	r1, #0
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	0262      	lsls	r2, r4, #9
 8004ed0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ed4:	0259      	lsls	r1, r3, #9
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4614      	mov	r4, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	4621      	mov	r1, r4
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f04f 0400 	mov.w	r4, #0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	f7fb fd8a 	bl	8000a00 <__aeabi_uldivmod>
 8004eec:	4603      	mov	r3, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e049      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef4:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	099b      	lsrs	r3, r3, #6
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	ea03 0501 	and.w	r5, r3, r1
 8004f0a:	ea04 0602 	and.w	r6, r4, r2
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4632      	mov	r2, r6
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	0154      	lsls	r4, r2, #5
 8004f1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f20:	014b      	lsls	r3, r1, #5
 8004f22:	4619      	mov	r1, r3
 8004f24:	4622      	mov	r2, r4
 8004f26:	1b49      	subs	r1, r1, r5
 8004f28:	eb62 0206 	sbc.w	r2, r2, r6
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	f04f 0400 	mov.w	r4, #0
 8004f34:	0194      	lsls	r4, r2, #6
 8004f36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f3a:	018b      	lsls	r3, r1, #6
 8004f3c:	1a5b      	subs	r3, r3, r1
 8004f3e:	eb64 0402 	sbc.w	r4, r4, r2
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	00e2      	lsls	r2, r4, #3
 8004f4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f50:	00d9      	lsls	r1, r3, #3
 8004f52:	460b      	mov	r3, r1
 8004f54:	4614      	mov	r4, r2
 8004f56:	195b      	adds	r3, r3, r5
 8004f58:	eb44 0406 	adc.w	r4, r4, r6
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	02a2      	lsls	r2, r4, #10
 8004f66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f6a:	0299      	lsls	r1, r3, #10
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4614      	mov	r4, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	4621      	mov	r1, r4
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	f7fb fd3f 	bl	8000a00 <__aeabi_uldivmod>
 8004f82:	4603      	mov	r3, r0
 8004f84:	460c      	mov	r4, r1
 8004f86:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	0f1b      	lsrs	r3, r3, #28
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	613b      	str	r3, [r7, #16]
      break;
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004fa2:	613b      	str	r3, [r7, #16]
      break;
 8004fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa6:	693b      	ldr	r3, [r7, #16]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	00f42400 	.word	0x00f42400
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8083 	beq.w	80050dc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fd6:	4b95      	ldr	r3, [pc, #596]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d019      	beq.n	8005016 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fe2:	4b92      	ldr	r3, [pc, #584]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fee:	4b8f      	ldr	r3, [pc, #572]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffa:	d00c      	beq.n	8005016 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ffc:	4b8b      	ldr	r3, [pc, #556]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d112      	bne.n	800502e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005008:	4b88      	ldr	r3, [pc, #544]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005014:	d10b      	bne.n	800502e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005016:	4b85      	ldr	r3, [pc, #532]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d05b      	beq.n	80050da <HAL_RCC_OscConfig+0x11e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d157      	bne.n	80050da <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e216      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x8a>
 8005038:	4b7c      	ldr	r3, [pc, #496]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7b      	ldr	r2, [pc, #492]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e01d      	b.n	8005082 <HAL_RCC_OscConfig+0xc6>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800504e:	d10c      	bne.n	800506a <HAL_RCC_OscConfig+0xae>
 8005050:	4b76      	ldr	r3, [pc, #472]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a75      	ldr	r2, [pc, #468]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b73      	ldr	r3, [pc, #460]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a72      	ldr	r2, [pc, #456]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e00b      	b.n	8005082 <HAL_RCC_OscConfig+0xc6>
 800506a:	4b70      	ldr	r3, [pc, #448]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6f      	ldr	r2, [pc, #444]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b6d      	ldr	r3, [pc, #436]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a6c      	ldr	r2, [pc, #432]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800507c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005080:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d013      	beq.n	80050b2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fe fe61 	bl	8003d50 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005092:	f7fe fe5d 	bl	8003d50 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b64      	cmp	r3, #100	; 0x64
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1db      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a4:	4b61      	ldr	r3, [pc, #388]	; (800522c <HAL_RCC_OscConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0xd6>
 80050b0:	e014      	b.n	80050dc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fe fe4d 	bl	8003d50 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ba:	f7fe fe49 	bl	8003d50 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b64      	cmp	r3, #100	; 0x64
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e1c7      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050cc:	4b57      	ldr	r3, [pc, #348]	; (800522c <HAL_RCC_OscConfig+0x270>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0xfe>
 80050d8:	e000      	b.n	80050dc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d06f      	beq.n	80051c8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050e8:	4b50      	ldr	r3, [pc, #320]	; (800522c <HAL_RCC_OscConfig+0x270>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d017      	beq.n	8005124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050f4:	4b4d      	ldr	r3, [pc, #308]	; (800522c <HAL_RCC_OscConfig+0x270>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d105      	bne.n	800510c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005100:	4b4a      	ldr	r3, [pc, #296]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510c:	4b47      	ldr	r3, [pc, #284]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d11c      	bne.n	8005152 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005118:	4b44      	ldr	r3, [pc, #272]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d116      	bne.n	8005152 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_OscConfig+0x180>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e18f      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513c:	4b3b      	ldr	r3, [pc, #236]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4938      	ldr	r1, [pc, #224]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005150:	e03a      	b.n	80051c8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800515a:	4b35      	ldr	r3, [pc, #212]	; (8005230 <HAL_RCC_OscConfig+0x274>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fe fdf6 	bl	8003d50 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005168:	f7fe fdf2 	bl	8003d50 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e170      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b2c      	ldr	r3, [pc, #176]	; (800522c <HAL_RCC_OscConfig+0x270>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4925      	ldr	r1, [pc, #148]	; (800522c <HAL_RCC_OscConfig+0x270>)
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]
 800519a:	e015      	b.n	80051c8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519c:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_RCC_OscConfig+0x274>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fe fdd5 	bl	8003d50 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051aa:	f7fe fdd1 	bl	8003d50 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e14f      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCC_OscConfig+0x270>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d037      	beq.n	8005244 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d016      	beq.n	800520a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051dc:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_RCC_OscConfig+0x278>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e2:	f7fe fdb5 	bl	8003d50 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ea:	f7fe fdb1 	bl	8003d50 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e12f      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_RCC_OscConfig+0x270>)
 80051fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x22e>
 8005208:	e01c      	b.n	8005244 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <HAL_RCC_OscConfig+0x278>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fe fd9e 	bl	8003d50 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005216:	e00f      	b.n	8005238 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005218:	f7fe fd9a 	bl	8003d50 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d908      	bls.n	8005238 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e118      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	42470000 	.word	0x42470000
 8005234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	4b8a      	ldr	r3, [pc, #552]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800523a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e9      	bne.n	8005218 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8097 	beq.w	8005380 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005256:	4b83      	ldr	r3, [pc, #524]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4b7f      	ldr	r3, [pc, #508]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a7e      	ldr	r2, [pc, #504]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	4b7c      	ldr	r3, [pc, #496]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	4b79      	ldr	r3, [pc, #484]	; (8005468 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528e:	4b76      	ldr	r3, [pc, #472]	; (8005468 <HAL_RCC_OscConfig+0x4ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a75      	ldr	r2, [pc, #468]	; (8005468 <HAL_RCC_OscConfig+0x4ac>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529a:	f7fe fd59 	bl	8003d50 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7fe fd55 	bl	8003d50 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e0d3      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	4b6c      	ldr	r3, [pc, #432]	; (8005468 <HAL_RCC_OscConfig+0x4ac>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x31a>
 80052c8:	4b66      	ldr	r3, [pc, #408]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	4a65      	ldr	r2, [pc, #404]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6713      	str	r3, [r2, #112]	; 0x70
 80052d4:	e01c      	b.n	8005310 <HAL_RCC_OscConfig+0x354>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x33c>
 80052de:	4b61      	ldr	r3, [pc, #388]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a60      	ldr	r2, [pc, #384]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052e4:	f043 0304 	orr.w	r3, r3, #4
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ea:	4b5e      	ldr	r3, [pc, #376]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	4a5d      	ldr	r2, [pc, #372]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6713      	str	r3, [r2, #112]	; 0x70
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0x354>
 80052f8:	4b5a      	ldr	r3, [pc, #360]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a59      	ldr	r2, [pc, #356]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
 8005304:	4b57      	ldr	r3, [pc, #348]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a56      	ldr	r2, [pc, #344]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800530a:	f023 0304 	bic.w	r3, r3, #4
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d015      	beq.n	8005344 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005318:	f7fe fd1a 	bl	8003d50 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fe fd16 	bl	8003d50 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e092      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005336:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ee      	beq.n	8005320 <HAL_RCC_OscConfig+0x364>
 8005342:	e014      	b.n	800536e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fe fd04 	bl	8003d50 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fe fd00 	bl	8003d50 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e07c      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005362:	4b40      	ldr	r3, [pc, #256]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1ee      	bne.n	800534c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d105      	bne.n	8005380 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005374:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800537a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d068      	beq.n	800545a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005388:	4b36      	ldr	r3, [pc, #216]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b08      	cmp	r3, #8
 8005392:	d060      	beq.n	8005456 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d145      	bne.n	8005428 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539c:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCC_OscConfig+0x4b0>)
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a2:	f7fe fcd5 	bl	8003d50 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fe fcd1 	bl	8003d50 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e04f      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053bc:	4b29      	ldr	r3, [pc, #164]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f0      	bne.n	80053aa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	019b      	lsls	r3, r3, #6
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	3b01      	subs	r3, #1
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	061b      	lsls	r3, r3, #24
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	071b      	lsls	r3, r3, #28
 80053f4:	491b      	ldr	r1, [pc, #108]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053fa:	4b1c      	ldr	r3, [pc, #112]	; (800546c <HAL_RCC_OscConfig+0x4b0>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fe fca6 	bl	8003d50 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005408:	f7fe fca2 	bl	8003d50 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e020      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0x44c>
 8005426:	e018      	b.n	800545a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <HAL_RCC_OscConfig+0x4b0>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fe fc8f 	bl	8003d50 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005436:	f7fe fc8b 	bl	8003d50 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e009      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_RCC_OscConfig+0x4a8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f0      	bne.n	8005436 <HAL_RCC_OscConfig+0x47a>
 8005454:	e001      	b.n	800545a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	40007000 	.word	0x40007000
 800546c:	42470060 	.word	0x42470060

08005470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e01d      	b.n	80054be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fe f95a 	bl	8003750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f000 fa90 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e01d      	b.n	8005514 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f815 	bl	800551c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f000 fa65 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e01d      	b.n	800557e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f815 	bl	8005586 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 fa30 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2201      	movs	r2, #1
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fcfa 	bl	8005fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <HAL_TIM_PWM_Start+0x74>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_PWM_Start+0x2c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_TIM_PWM_Start+0x78>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_PWM_Start+0x30>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_TIM_PWM_Start+0x32>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d007      	beq.n	8005604 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40010400 	.word	0x40010400

08005618 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_TIM_OC_ConfigChannel+0x1a>
 800562e:	2302      	movs	r3, #2
 8005630:	e04e      	b.n	80056d0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b0c      	cmp	r3, #12
 8005646:	d839      	bhi.n	80056bc <HAL_TIM_OC_ConfigChannel+0xa4>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <HAL_TIM_OC_ConfigChannel+0x38>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	08005685 	.word	0x08005685
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056bd 	.word	0x080056bd
 800565c:	080056bd 	.word	0x080056bd
 8005660:	08005693 	.word	0x08005693
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056bd 	.word	0x080056bd
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056a1 	.word	0x080056a1
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056bd 	.word	0x080056bd
 800567c:	080056bd 	.word	0x080056bd
 8005680:	080056af 	.word	0x080056af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fa42 	bl	8005b14 <TIM_OC1_SetConfig>
      break;
 8005690:	e015      	b.n	80056be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 faab 	bl	8005bf4 <TIM_OC2_SetConfig>
      break;
 800569e:	e00e      	b.n	80056be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fb1a 	bl	8005ce0 <TIM_OC3_SetConfig>
      break;
 80056ac:	e007      	b.n	80056be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fb87 	bl	8005dc8 <TIM_OC4_SetConfig>
      break;
 80056ba:	e000      	b.n	80056be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80056bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e0b4      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x184>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	f200 809f 	bhi.w	8005848 <HAL_TIM_PWM_ConfigChannel+0x170>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005745 	.word	0x08005745
 8005714:	08005849 	.word	0x08005849
 8005718:	08005849 	.word	0x08005849
 800571c:	08005849 	.word	0x08005849
 8005720:	08005785 	.word	0x08005785
 8005724:	08005849 	.word	0x08005849
 8005728:	08005849 	.word	0x08005849
 800572c:	08005849 	.word	0x08005849
 8005730:	080057c7 	.word	0x080057c7
 8005734:	08005849 	.word	0x08005849
 8005738:	08005849 	.word	0x08005849
 800573c:	08005849 	.word	0x08005849
 8005740:	08005807 	.word	0x08005807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f9e2 	bl	8005b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0204 	bic.w	r2, r2, #4
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	619a      	str	r2, [r3, #24]
      break;
 8005782:	e062      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fa32 	bl	8005bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6999      	ldr	r1, [r3, #24]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	619a      	str	r2, [r3, #24]
      break;
 80057c4:	e041      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fa87 	bl	8005ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0208 	orr.w	r2, r2, #8
 80057e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0204 	bic.w	r2, r2, #4
 80057f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	61da      	str	r2, [r3, #28]
      break;
 8005804:	e021      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fadb 	bl	8005dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	021a      	lsls	r2, r3, #8
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	61da      	str	r2, [r3, #28]
      break;
 8005846:	e000      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005848:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_TIM_ConfigClockSource+0x18>
 8005878:	2302      	movs	r3, #2
 800587a:	e0a6      	b.n	80059ca <HAL_TIM_ConfigClockSource+0x166>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800589a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d067      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0x120>
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d80b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x6c>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d073      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0x140>
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d802      	bhi.n	80058c6 <HAL_TIM_ConfigClockSource+0x62>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d06f      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80058c4:	e078      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d06c      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0x140>
 80058ca:	2b30      	cmp	r3, #48	; 0x30
 80058cc:	d06a      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058ce:	e073      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058d0:	2b70      	cmp	r3, #112	; 0x70
 80058d2:	d00d      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x8c>
 80058d4:	2b70      	cmp	r3, #112	; 0x70
 80058d6:	d804      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x7e>
 80058d8:	2b50      	cmp	r3, #80	; 0x50
 80058da:	d033      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0xe0>
 80058dc:	2b60      	cmp	r3, #96	; 0x60
 80058de:	d041      	beq.n	8005964 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058e0:	e06a      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	d066      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x152>
 80058e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ec:	d017      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058ee:	e063      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6899      	ldr	r1, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f000 fb32 	bl	8005f68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005912:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e04c      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f000 fb1b 	bl	8005f68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005940:	609a      	str	r2, [r3, #8]
      break;
 8005942:	e039      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	461a      	mov	r2, r3
 8005952:	f000 fa8f 	bl	8005e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2150      	movs	r1, #80	; 0x50
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fae8 	bl	8005f32 <TIM_ITRx_SetConfig>
      break;
 8005962:	e029      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	461a      	mov	r2, r3
 8005972:	f000 faae 	bl	8005ed2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2160      	movs	r1, #96	; 0x60
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fad8 	bl	8005f32 <TIM_ITRx_SetConfig>
      break;
 8005982:	e019      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	461a      	mov	r2, r3
 8005992:	f000 fa6f 	bl	8005e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2140      	movs	r1, #64	; 0x40
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fac8 	bl	8005f32 <TIM_ITRx_SetConfig>
      break;
 80059a2:	e009      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f000 fabf 	bl	8005f32 <TIM_ITRx_SetConfig>
      break;
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80059b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a40      	ldr	r2, [pc, #256]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00f      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3d      	ldr	r2, [pc, #244]	; (8005aec <TIM_Base_SetConfig+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a34:	d027      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <TIM_Base_SetConfig+0x118>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d023      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a28      	ldr	r2, [pc, #160]	; (8005afc <TIM_Base_SetConfig+0x128>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <TIM_Base_SetConfig+0x12c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <TIM_Base_SetConfig+0x130>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <TIM_Base_SetConfig+0x134>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <TIM_Base_SetConfig+0x138>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <TIM_Base_SetConfig+0x13c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800
 8005b08:	40001800 	.word	0x40001800
 8005b0c:	40001c00 	.word	0x40001c00
 8005b10:	40002000 	.word	0x40002000

08005b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 0302 	bic.w	r3, r3, #2
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a20      	ldr	r2, [pc, #128]	; (8005bec <TIM_OC1_SetConfig+0xd8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC1_SetConfig+0x64>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <TIM_OC1_SetConfig+0xdc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10c      	bne.n	8005b92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0308 	bic.w	r3, r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <TIM_OC1_SetConfig+0xd8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC1_SetConfig+0x8e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <TIM_OC1_SetConfig+0xdc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d111      	bne.n	8005bc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	621a      	str	r2, [r3, #32]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40010000 	.word	0x40010000
 8005bf0:	40010400 	.word	0x40010400

08005bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f023 0210 	bic.w	r2, r3, #16
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0320 	bic.w	r3, r3, #32
 8005c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <TIM_OC2_SetConfig+0xe4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC2_SetConfig+0x68>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <TIM_OC2_SetConfig+0xe8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10d      	bne.n	8005c78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <TIM_OC2_SetConfig+0xe4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC2_SetConfig+0x94>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <TIM_OC2_SetConfig+0xe8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d113      	bne.n	8005cb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <TIM_OC3_SetConfig+0xe0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_OC3_SetConfig+0x66>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <TIM_OC3_SetConfig+0xe4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d10d      	bne.n	8005d62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <TIM_OC3_SetConfig+0xe0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_OC3_SetConfig+0x92>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <TIM_OC3_SetConfig+0xe4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d113      	bne.n	8005d9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	621a      	str	r2, [r3, #32]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40010400 	.word	0x40010400

08005dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	031b      	lsls	r3, r3, #12
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <TIM_OC4_SetConfig+0xa4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC4_SetConfig+0x68>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <TIM_OC4_SetConfig+0xa8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d109      	bne.n	8005e44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	019b      	lsls	r3, r3, #6
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	621a      	str	r2, [r3, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40010400 	.word	0x40010400

08005e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 030a 	bic.w	r3, r3, #10
 8005eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0210 	bic.w	r2, r3, #16
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	031b      	lsls	r3, r3, #12
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f043 0307 	orr.w	r3, r3, #7
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	021a      	lsls	r2, r3, #8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	609a      	str	r2, [r3, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2201      	movs	r2, #1
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	401a      	ands	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1a      	ldr	r2, [r3, #32]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006008:	2302      	movs	r3, #2
 800600a:	e05a      	b.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a21      	ldr	r2, [pc, #132]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d022      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d01d      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00e      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10c      	bne.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40001800 	.word	0x40001800

080060ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006104:	2302      	movs	r3, #2
 8006106:	e03d      	b.n	8006184 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e03f      	b.n	8006222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fd fba2 	bl	8003900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fc2d 	bl	8006a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695a      	ldr	r2, [r3, #20]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b20      	cmp	r3, #32
 8006244:	d153      	bne.n	80062ee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_UART_Transmit_DMA+0x26>
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e04c      	b.n	80062f0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_UART_Transmit_DMA+0x38>
 8006260:	2302      	movs	r3, #2
 8006262:	e045      	b.n	80062f0 <HAL_UART_Transmit_DMA+0xc4>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2221      	movs	r2, #33	; 0x21
 8006288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <HAL_UART_Transmit_DMA+0xcc>)
 8006292:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_UART_Transmit_DMA+0xd0>)
 800629a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	4a17      	ldr	r2, [pc, #92]	; (8006300 <HAL_UART_Transmit_DMA+0xd4>)
 80062a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2200      	movs	r2, #0
 80062aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80062ac:	f107 0308 	add.w	r3, r7, #8
 80062b0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3304      	adds	r3, #4
 80062c0:	461a      	mov	r2, r3
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	f7fd ff32 	bl	800412c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062e8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	08006641 	.word	0x08006641
 80062fc:	08006693 	.word	0x08006693
 8006300:	08006733 	.word	0x08006733

08006304 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b20      	cmp	r3, #32
 800631c:	d166      	bne.n	80063ec <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_UART_Receive_DMA+0x26>
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e05f      	b.n	80063ee <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_UART_Receive_DMA+0x38>
 8006338:	2302      	movs	r3, #2
 800633a:	e058      	b.n	80063ee <HAL_UART_Receive_DMA+0xea>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	88fa      	ldrh	r2, [r7, #6]
 800634e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2222      	movs	r2, #34	; 0x22
 800635a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	4a25      	ldr	r2, [pc, #148]	; (80063f8 <HAL_UART_Receive_DMA+0xf4>)
 8006364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	4a24      	ldr	r2, [pc, #144]	; (80063fc <HAL_UART_Receive_DMA+0xf8>)
 800636c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	4a23      	ldr	r2, [pc, #140]	; (8006400 <HAL_UART_Receive_DMA+0xfc>)
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	2200      	movs	r2, #0
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800637e:	f107 0308 	add.w	r3, r7, #8
 8006382:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	4619      	mov	r1, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	f7fd fec9 	bl	800412c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	080066af 	.word	0x080066af
 80063fc:	08006717 	.word	0x08006717
 8006400:	08006733 	.word	0x08006733

08006404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006424:	2300      	movs	r3, #0
 8006426:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10d      	bne.n	8006456 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_UART_IRQHandler+0x52>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa6f 	bl	8006932 <UART_Receive_IT>
      return;
 8006454:	e0d1      	b.n	80065fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80b0 	beq.w	80065be <HAL_UART_IRQHandler+0x1ba>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <HAL_UART_IRQHandler+0x70>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80a5 	beq.w	80065be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_UART_IRQHandler+0x90>
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	f043 0201 	orr.w	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_UART_IRQHandler+0xb0>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	f043 0202 	orr.w	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_UART_IRQHandler+0xd0>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064cc:	f043 0204 	orr.w	r2, r3, #4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00f      	beq.n	80064fe <HAL_UART_IRQHandler+0xfa>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <HAL_UART_IRQHandler+0xee>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	f043 0208 	orr.w	r2, r3, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d078      	beq.n	80065f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <HAL_UART_IRQHandler+0x11c>
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa09 	bl	8006932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	bf0c      	ite	eq
 800652e:	2301      	moveq	r3, #1
 8006530:	2300      	movne	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d102      	bne.n	8006548 <HAL_UART_IRQHandler+0x144>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d031      	beq.n	80065ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f952 	bl	80067f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d123      	bne.n	80065a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_UART_IRQHandler+0x1fc>)
 800657a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	4618      	mov	r0, r3
 8006582:	f7fd fe2b 	bl	80041dc <HAL_DMA_Abort_IT>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d016      	beq.n	80065ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006596:	4610      	mov	r0, r2
 8006598:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659a:	e00e      	b.n	80065ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f845 	bl	800662c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a2:	e00a      	b.n	80065ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f841 	bl	800662c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065aa:	e006      	b.n	80065ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f83d 	bl	800662c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065b8:	e01e      	b.n	80065f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ba:	bf00      	nop
    return;
 80065bc:	e01c      	b.n	80065f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <HAL_UART_IRQHandler+0x1d6>
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f93f 	bl	8006856 <UART_Transmit_IT>
    return;
 80065d8:	e00f      	b.n	80065fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <HAL_UART_IRQHandler+0x1f6>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f987 	bl	8006902 <UART_EndTransmit_IT>
    return;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80065f8:	bf00      	nop
  }
}
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	0800682f 	.word	0x0800682f

08006604 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d113      	bne.n	8006684 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695a      	ldr	r2, [r3, #20]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006670:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006680:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006682:	e002      	b.n	800668a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7fa fc9f 	bl	8000fc8 <HAL_UART_TxCpltCallback>
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ffaf 	bl	8006604 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11e      	bne.n	8006708 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066de:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7fa fc79 	bl	8001000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff ff77 	bl	8006618 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b80      	cmp	r3, #128	; 0x80
 8006750:	bf0c      	ite	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	2300      	movne	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b21      	cmp	r3, #33	; 0x21
 8006764:	d108      	bne.n	8006778 <UART_DMAError+0x46>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	f000 f827 	bl	80067c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b22      	cmp	r3, #34	; 0x22
 8006798:	d108      	bne.n	80067ac <UART_DMAError+0x7a>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	f000 f823 	bl	80067f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	f043 0210 	orr.w	r2, r3, #16
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b8:	68b8      	ldr	r0, [r7, #8]
 80067ba:	f7ff ff37 	bl	800662c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067dc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006808:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff feef 	bl	800662c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b21      	cmp	r3, #33	; 0x21
 8006868:	d144      	bne.n	80068f4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d11a      	bne.n	80068aa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006888:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	1c9a      	adds	r2, r3, #2
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	621a      	str	r2, [r3, #32]
 800689c:	e00e      	b.n	80068bc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	621a      	str	r2, [r3, #32]
 80068a8:	e008      	b.n	80068bc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6211      	str	r1, [r2, #32]
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4619      	mov	r1, r3
 80068ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10f      	bne.n	80068f0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e000      	b.n	80068f6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fa fb50 	bl	8000fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b22      	cmp	r3, #34	; 0x22
 8006944:	d171      	bne.n	8006a2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d123      	bne.n	8006998 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10e      	bne.n	800697c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	1c9a      	adds	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	629a      	str	r2, [r3, #40]	; 0x28
 800697a:	e029      	b.n	80069d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	b29b      	uxth	r3, r3
 8006984:	b2db      	uxtb	r3, r3
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	629a      	str	r2, [r3, #40]	; 0x28
 8006996:	e01b      	b.n	80069d0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6858      	ldr	r0, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6291      	str	r1, [r2, #40]	; 0x28
 80069b0:	b2c2      	uxtb	r2, r0
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	e00c      	b.n	80069d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	1c58      	adds	r0, r3, #1
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	6288      	str	r0, [r1, #40]	; 0x28
 80069c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4619      	mov	r1, r3
 80069de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d120      	bne.n	8006a26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0220 	bic.w	r2, r2, #32
 80069f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695a      	ldr	r2, [r3, #20]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fa faef 	bl	8001000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e002      	b.n	8006a2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a76:	f023 030c 	bic.w	r3, r3, #12
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	430b      	orrs	r3, r1
 8006a82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa2:	f040 818b 	bne.w	8006dbc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4ac1      	ldr	r2, [pc, #772]	; (8006db0 <UART_SetConfig+0x37c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d005      	beq.n	8006abc <UART_SetConfig+0x88>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4abf      	ldr	r2, [pc, #764]	; (8006db4 <UART_SetConfig+0x380>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f040 80bd 	bne.w	8006c36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006abc:	f7fe f8ca 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006ac0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	f04f 0600 	mov.w	r6, #0
 8006aca:	46a8      	mov	r8, r5
 8006acc:	46b1      	mov	r9, r6
 8006ace:	eb18 0308 	adds.w	r3, r8, r8
 8006ad2:	eb49 0409 	adc.w	r4, r9, r9
 8006ad6:	4698      	mov	r8, r3
 8006ad8:	46a1      	mov	r9, r4
 8006ada:	eb18 0805 	adds.w	r8, r8, r5
 8006ade:	eb49 0906 	adc.w	r9, r9, r6
 8006ae2:	f04f 0100 	mov.w	r1, #0
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006aee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006af2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006af6:	4688      	mov	r8, r1
 8006af8:	4691      	mov	r9, r2
 8006afa:	eb18 0005 	adds.w	r0, r8, r5
 8006afe:	eb49 0106 	adc.w	r1, r9, r6
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	461d      	mov	r5, r3
 8006b08:	f04f 0600 	mov.w	r6, #0
 8006b0c:	196b      	adds	r3, r5, r5
 8006b0e:	eb46 0406 	adc.w	r4, r6, r6
 8006b12:	461a      	mov	r2, r3
 8006b14:	4623      	mov	r3, r4
 8006b16:	f7f9 ff73 	bl	8000a00 <__aeabi_uldivmod>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4ba5      	ldr	r3, [pc, #660]	; (8006db8 <UART_SetConfig+0x384>)
 8006b22:	fba3 2302 	umull	r2, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	461d      	mov	r5, r3
 8006b30:	f04f 0600 	mov.w	r6, #0
 8006b34:	46a9      	mov	r9, r5
 8006b36:	46b2      	mov	sl, r6
 8006b38:	eb19 0309 	adds.w	r3, r9, r9
 8006b3c:	eb4a 040a 	adc.w	r4, sl, sl
 8006b40:	4699      	mov	r9, r3
 8006b42:	46a2      	mov	sl, r4
 8006b44:	eb19 0905 	adds.w	r9, r9, r5
 8006b48:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b60:	4689      	mov	r9, r1
 8006b62:	4692      	mov	sl, r2
 8006b64:	eb19 0005 	adds.w	r0, r9, r5
 8006b68:	eb4a 0106 	adc.w	r1, sl, r6
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	461d      	mov	r5, r3
 8006b72:	f04f 0600 	mov.w	r6, #0
 8006b76:	196b      	adds	r3, r5, r5
 8006b78:	eb46 0406 	adc.w	r4, r6, r6
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4623      	mov	r3, r4
 8006b80:	f7f9 ff3e 	bl	8000a00 <__aeabi_uldivmod>
 8006b84:	4603      	mov	r3, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b8b      	ldr	r3, [pc, #556]	; (8006db8 <UART_SetConfig+0x384>)
 8006b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	2164      	movs	r1, #100	; 0x64
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	3332      	adds	r3, #50	; 0x32
 8006b9e:	4a86      	ldr	r2, [pc, #536]	; (8006db8 <UART_SetConfig+0x384>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bac:	4498      	add	r8, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	461d      	mov	r5, r3
 8006bb2:	f04f 0600 	mov.w	r6, #0
 8006bb6:	46a9      	mov	r9, r5
 8006bb8:	46b2      	mov	sl, r6
 8006bba:	eb19 0309 	adds.w	r3, r9, r9
 8006bbe:	eb4a 040a 	adc.w	r4, sl, sl
 8006bc2:	4699      	mov	r9, r3
 8006bc4:	46a2      	mov	sl, r4
 8006bc6:	eb19 0905 	adds.w	r9, r9, r5
 8006bca:	eb4a 0a06 	adc.w	sl, sl, r6
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006be2:	4689      	mov	r9, r1
 8006be4:	4692      	mov	sl, r2
 8006be6:	eb19 0005 	adds.w	r0, r9, r5
 8006bea:	eb4a 0106 	adc.w	r1, sl, r6
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	f04f 0600 	mov.w	r6, #0
 8006bf8:	196b      	adds	r3, r5, r5
 8006bfa:	eb46 0406 	adc.w	r4, r6, r6
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4623      	mov	r3, r4
 8006c02:	f7f9 fefd 	bl	8000a00 <__aeabi_uldivmod>
 8006c06:	4603      	mov	r3, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4b6a      	ldr	r3, [pc, #424]	; (8006db8 <UART_SetConfig+0x384>)
 8006c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	2164      	movs	r1, #100	; 0x64
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	3332      	adds	r3, #50	; 0x32
 8006c20:	4a65      	ldr	r2, [pc, #404]	; (8006db8 <UART_SetConfig+0x384>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	f003 0207 	and.w	r2, r3, #7
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4442      	add	r2, r8
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	e26f      	b.n	8007116 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7fd fff9 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006c3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	461d      	mov	r5, r3
 8006c40:	f04f 0600 	mov.w	r6, #0
 8006c44:	46a8      	mov	r8, r5
 8006c46:	46b1      	mov	r9, r6
 8006c48:	eb18 0308 	adds.w	r3, r8, r8
 8006c4c:	eb49 0409 	adc.w	r4, r9, r9
 8006c50:	4698      	mov	r8, r3
 8006c52:	46a1      	mov	r9, r4
 8006c54:	eb18 0805 	adds.w	r8, r8, r5
 8006c58:	eb49 0906 	adc.w	r9, r9, r6
 8006c5c:	f04f 0100 	mov.w	r1, #0
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c70:	4688      	mov	r8, r1
 8006c72:	4691      	mov	r9, r2
 8006c74:	eb18 0005 	adds.w	r0, r8, r5
 8006c78:	eb49 0106 	adc.w	r1, r9, r6
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	461d      	mov	r5, r3
 8006c82:	f04f 0600 	mov.w	r6, #0
 8006c86:	196b      	adds	r3, r5, r5
 8006c88:	eb46 0406 	adc.w	r4, r6, r6
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	f7f9 feb6 	bl	8000a00 <__aeabi_uldivmod>
 8006c94:	4603      	mov	r3, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b47      	ldr	r3, [pc, #284]	; (8006db8 <UART_SetConfig+0x384>)
 8006c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	461d      	mov	r5, r3
 8006caa:	f04f 0600 	mov.w	r6, #0
 8006cae:	46a9      	mov	r9, r5
 8006cb0:	46b2      	mov	sl, r6
 8006cb2:	eb19 0309 	adds.w	r3, r9, r9
 8006cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8006cba:	4699      	mov	r9, r3
 8006cbc:	46a2      	mov	sl, r4
 8006cbe:	eb19 0905 	adds.w	r9, r9, r5
 8006cc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cc6:	f04f 0100 	mov.w	r1, #0
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cda:	4689      	mov	r9, r1
 8006cdc:	4692      	mov	sl, r2
 8006cde:	eb19 0005 	adds.w	r0, r9, r5
 8006ce2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	461d      	mov	r5, r3
 8006cec:	f04f 0600 	mov.w	r6, #0
 8006cf0:	196b      	adds	r3, r5, r5
 8006cf2:	eb46 0406 	adc.w	r4, r6, r6
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	f7f9 fe81 	bl	8000a00 <__aeabi_uldivmod>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	461a      	mov	r2, r3
 8006d04:	4b2c      	ldr	r3, [pc, #176]	; (8006db8 <UART_SetConfig+0x384>)
 8006d06:	fba3 1302 	umull	r1, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2164      	movs	r1, #100	; 0x64
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	3332      	adds	r3, #50	; 0x32
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <UART_SetConfig+0x384>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d26:	4498      	add	r8, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	f04f 0600 	mov.w	r6, #0
 8006d30:	46a9      	mov	r9, r5
 8006d32:	46b2      	mov	sl, r6
 8006d34:	eb19 0309 	adds.w	r3, r9, r9
 8006d38:	eb4a 040a 	adc.w	r4, sl, sl
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	eb19 0905 	adds.w	r9, r9, r5
 8006d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d5c:	4689      	mov	r9, r1
 8006d5e:	4692      	mov	sl, r2
 8006d60:	eb19 0005 	adds.w	r0, r9, r5
 8006d64:	eb4a 0106 	adc.w	r1, sl, r6
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	f04f 0600 	mov.w	r6, #0
 8006d72:	196b      	adds	r3, r5, r5
 8006d74:	eb46 0406 	adc.w	r4, r6, r6
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	f7f9 fe40 	bl	8000a00 <__aeabi_uldivmod>
 8006d80:	4603      	mov	r3, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	461a      	mov	r2, r3
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <UART_SetConfig+0x384>)
 8006d88:	fba3 1302 	umull	r1, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	2164      	movs	r1, #100	; 0x64
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	3332      	adds	r3, #50	; 0x32
 8006d9a:	4a07      	ldr	r2, [pc, #28]	; (8006db8 <UART_SetConfig+0x384>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	f003 0207 	and.w	r2, r3, #7
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4442      	add	r2, r8
 8006dac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006dae:	e1b2      	b.n	8007116 <UART_SetConfig+0x6e2>
 8006db0:	40011000 	.word	0x40011000
 8006db4:	40011400 	.word	0x40011400
 8006db8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4ad7      	ldr	r2, [pc, #860]	; (8007120 <UART_SetConfig+0x6ec>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d005      	beq.n	8006dd2 <UART_SetConfig+0x39e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4ad6      	ldr	r2, [pc, #856]	; (8007124 <UART_SetConfig+0x6f0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	f040 80d1 	bne.w	8006f74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dd2:	f7fd ff3f 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	469a      	mov	sl, r3
 8006ddc:	f04f 0b00 	mov.w	fp, #0
 8006de0:	46d0      	mov	r8, sl
 8006de2:	46d9      	mov	r9, fp
 8006de4:	eb18 0308 	adds.w	r3, r8, r8
 8006de8:	eb49 0409 	adc.w	r4, r9, r9
 8006dec:	4698      	mov	r8, r3
 8006dee:	46a1      	mov	r9, r4
 8006df0:	eb18 080a 	adds.w	r8, r8, sl
 8006df4:	eb49 090b 	adc.w	r9, r9, fp
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e0c:	4688      	mov	r8, r1
 8006e0e:	4691      	mov	r9, r2
 8006e10:	eb1a 0508 	adds.w	r5, sl, r8
 8006e14:	eb4b 0609 	adc.w	r6, fp, r9
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	f04f 0400 	mov.w	r4, #0
 8006e2a:	0094      	lsls	r4, r2, #2
 8006e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e30:	008b      	lsls	r3, r1, #2
 8006e32:	461a      	mov	r2, r3
 8006e34:	4623      	mov	r3, r4
 8006e36:	4628      	mov	r0, r5
 8006e38:	4631      	mov	r1, r6
 8006e3a:	f7f9 fde1 	bl	8000a00 <__aeabi_uldivmod>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	461a      	mov	r2, r3
 8006e44:	4bb8      	ldr	r3, [pc, #736]	; (8007128 <UART_SetConfig+0x6f4>)
 8006e46:	fba3 2302 	umull	r2, r3, r3, r2
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	469b      	mov	fp, r3
 8006e54:	f04f 0c00 	mov.w	ip, #0
 8006e58:	46d9      	mov	r9, fp
 8006e5a:	46e2      	mov	sl, ip
 8006e5c:	eb19 0309 	adds.w	r3, r9, r9
 8006e60:	eb4a 040a 	adc.w	r4, sl, sl
 8006e64:	4699      	mov	r9, r3
 8006e66:	46a2      	mov	sl, r4
 8006e68:	eb19 090b 	adds.w	r9, r9, fp
 8006e6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e84:	4689      	mov	r9, r1
 8006e86:	4692      	mov	sl, r2
 8006e88:	eb1b 0509 	adds.w	r5, fp, r9
 8006e8c:	eb4c 060a 	adc.w	r6, ip, sl
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4619      	mov	r1, r3
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	f04f 0400 	mov.w	r4, #0
 8006ea2:	0094      	lsls	r4, r2, #2
 8006ea4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ea8:	008b      	lsls	r3, r1, #2
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4623      	mov	r3, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	f7f9 fda5 	bl	8000a00 <__aeabi_uldivmod>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4b9a      	ldr	r3, [pc, #616]	; (8007128 <UART_SetConfig+0x6f4>)
 8006ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	2164      	movs	r1, #100	; 0x64
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	3332      	adds	r3, #50	; 0x32
 8006ed0:	4a95      	ldr	r2, [pc, #596]	; (8007128 <UART_SetConfig+0x6f4>)
 8006ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006edc:	4498      	add	r8, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	469b      	mov	fp, r3
 8006ee2:	f04f 0c00 	mov.w	ip, #0
 8006ee6:	46d9      	mov	r9, fp
 8006ee8:	46e2      	mov	sl, ip
 8006eea:	eb19 0309 	adds.w	r3, r9, r9
 8006eee:	eb4a 040a 	adc.w	r4, sl, sl
 8006ef2:	4699      	mov	r9, r3
 8006ef4:	46a2      	mov	sl, r4
 8006ef6:	eb19 090b 	adds.w	r9, r9, fp
 8006efa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006efe:	f04f 0100 	mov.w	r1, #0
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f12:	4689      	mov	r9, r1
 8006f14:	4692      	mov	sl, r2
 8006f16:	eb1b 0509 	adds.w	r5, fp, r9
 8006f1a:	eb4c 060a 	adc.w	r6, ip, sl
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	f04f 0400 	mov.w	r4, #0
 8006f30:	0094      	lsls	r4, r2, #2
 8006f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f36:	008b      	lsls	r3, r1, #2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	4631      	mov	r1, r6
 8006f40:	f7f9 fd5e 	bl	8000a00 <__aeabi_uldivmod>
 8006f44:	4603      	mov	r3, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4b77      	ldr	r3, [pc, #476]	; (8007128 <UART_SetConfig+0x6f4>)
 8006f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	2164      	movs	r1, #100	; 0x64
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	3332      	adds	r3, #50	; 0x32
 8006f5e:	4a72      	ldr	r2, [pc, #456]	; (8007128 <UART_SetConfig+0x6f4>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4442      	add	r2, r8
 8006f70:	609a      	str	r2, [r3, #8]
 8006f72:	e0d0      	b.n	8007116 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7fd fe5a 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006f78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	f04f 0b00 	mov.w	fp, #0
 8006f82:	46d0      	mov	r8, sl
 8006f84:	46d9      	mov	r9, fp
 8006f86:	eb18 0308 	adds.w	r3, r8, r8
 8006f8a:	eb49 0409 	adc.w	r4, r9, r9
 8006f8e:	4698      	mov	r8, r3
 8006f90:	46a1      	mov	r9, r4
 8006f92:	eb18 080a 	adds.w	r8, r8, sl
 8006f96:	eb49 090b 	adc.w	r9, r9, fp
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fa6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006faa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fae:	4688      	mov	r8, r1
 8006fb0:	4691      	mov	r9, r2
 8006fb2:	eb1a 0508 	adds.w	r5, sl, r8
 8006fb6:	eb4b 0609 	adc.w	r6, fp, r9
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	f04f 0400 	mov.w	r4, #0
 8006fcc:	0094      	lsls	r4, r2, #2
 8006fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fd2:	008b      	lsls	r3, r1, #2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	4631      	mov	r1, r6
 8006fdc:	f7f9 fd10 	bl	8000a00 <__aeabi_uldivmod>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4b50      	ldr	r3, [pc, #320]	; (8007128 <UART_SetConfig+0x6f4>)
 8006fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	469b      	mov	fp, r3
 8006ff6:	f04f 0c00 	mov.w	ip, #0
 8006ffa:	46d9      	mov	r9, fp
 8006ffc:	46e2      	mov	sl, ip
 8006ffe:	eb19 0309 	adds.w	r3, r9, r9
 8007002:	eb4a 040a 	adc.w	r4, sl, sl
 8007006:	4699      	mov	r9, r3
 8007008:	46a2      	mov	sl, r4
 800700a:	eb19 090b 	adds.w	r9, r9, fp
 800700e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007012:	f04f 0100 	mov.w	r1, #0
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800701e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007022:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007026:	4689      	mov	r9, r1
 8007028:	4692      	mov	sl, r2
 800702a:	eb1b 0509 	adds.w	r5, fp, r9
 800702e:	eb4c 060a 	adc.w	r6, ip, sl
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4619      	mov	r1, r3
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	f04f 0400 	mov.w	r4, #0
 8007044:	0094      	lsls	r4, r2, #2
 8007046:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800704a:	008b      	lsls	r3, r1, #2
 800704c:	461a      	mov	r2, r3
 800704e:	4623      	mov	r3, r4
 8007050:	4628      	mov	r0, r5
 8007052:	4631      	mov	r1, r6
 8007054:	f7f9 fcd4 	bl	8000a00 <__aeabi_uldivmod>
 8007058:	4603      	mov	r3, r0
 800705a:	460c      	mov	r4, r1
 800705c:	461a      	mov	r2, r3
 800705e:	4b32      	ldr	r3, [pc, #200]	; (8007128 <UART_SetConfig+0x6f4>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	3332      	adds	r3, #50	; 0x32
 8007072:	4a2d      	ldr	r2, [pc, #180]	; (8007128 <UART_SetConfig+0x6f4>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707e:	4498      	add	r8, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	469b      	mov	fp, r3
 8007084:	f04f 0c00 	mov.w	ip, #0
 8007088:	46d9      	mov	r9, fp
 800708a:	46e2      	mov	sl, ip
 800708c:	eb19 0309 	adds.w	r3, r9, r9
 8007090:	eb4a 040a 	adc.w	r4, sl, sl
 8007094:	4699      	mov	r9, r3
 8007096:	46a2      	mov	sl, r4
 8007098:	eb19 090b 	adds.w	r9, r9, fp
 800709c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070a0:	f04f 0100 	mov.w	r1, #0
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070b4:	4689      	mov	r9, r1
 80070b6:	4692      	mov	sl, r2
 80070b8:	eb1b 0509 	adds.w	r5, fp, r9
 80070bc:	eb4c 060a 	adc.w	r6, ip, sl
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f04f 0200 	mov.w	r2, #0
 80070ca:	f04f 0300 	mov.w	r3, #0
 80070ce:	f04f 0400 	mov.w	r4, #0
 80070d2:	0094      	lsls	r4, r2, #2
 80070d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070d8:	008b      	lsls	r3, r1, #2
 80070da:	461a      	mov	r2, r3
 80070dc:	4623      	mov	r3, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	4631      	mov	r1, r6
 80070e2:	f7f9 fc8d 	bl	8000a00 <__aeabi_uldivmod>
 80070e6:	4603      	mov	r3, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	461a      	mov	r2, r3
 80070ec:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <UART_SetConfig+0x6f4>)
 80070ee:	fba3 1302 	umull	r1, r3, r3, r2
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	2164      	movs	r1, #100	; 0x64
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	3332      	adds	r3, #50	; 0x32
 8007100:	4a09      	ldr	r2, [pc, #36]	; (8007128 <UART_SetConfig+0x6f4>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	f003 020f 	and.w	r2, r3, #15
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4442      	add	r2, r8
 8007112:	609a      	str	r2, [r3, #8]
}
 8007114:	e7ff      	b.n	8007116 <UART_SetConfig+0x6e2>
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007120:	40011000 	.word	0x40011000
 8007124:	40011400 	.word	0x40011400
 8007128:	51eb851f 	.word	0x51eb851f

0800712c <__cxa_pure_virtual>:
 800712c:	b508      	push	{r3, lr}
 800712e:	f000 f80d 	bl	800714c <_ZSt9terminatev>

08007132 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007132:	b508      	push	{r3, lr}
 8007134:	4780      	blx	r0
 8007136:	f000 f80e 	bl	8007156 <abort>
	...

0800713c <_ZSt13get_terminatev>:
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <_ZSt13get_terminatev+0xc>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	f3bf 8f5b 	dmb	ish
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	2000000c 	.word	0x2000000c

0800714c <_ZSt9terminatev>:
 800714c:	b508      	push	{r3, lr}
 800714e:	f7ff fff5 	bl	800713c <_ZSt13get_terminatev>
 8007152:	f7ff ffee 	bl	8007132 <_ZN10__cxxabiv111__terminateEPFvvE>

08007156 <abort>:
 8007156:	b508      	push	{r3, lr}
 8007158:	2006      	movs	r0, #6
 800715a:	f000 f871 	bl	8007240 <raise>
 800715e:	2001      	movs	r0, #1
 8007160:	f7fc fce4 	bl	8003b2c <_exit>

08007164 <__errno>:
 8007164:	4b01      	ldr	r3, [pc, #4]	; (800716c <__errno+0x8>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000010 	.word	0x20000010

08007170 <__libc_init_array>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4e0d      	ldr	r6, [pc, #52]	; (80071a8 <__libc_init_array+0x38>)
 8007174:	4c0d      	ldr	r4, [pc, #52]	; (80071ac <__libc_init_array+0x3c>)
 8007176:	1ba4      	subs	r4, r4, r6
 8007178:	10a4      	asrs	r4, r4, #2
 800717a:	2500      	movs	r5, #0
 800717c:	42a5      	cmp	r5, r4
 800717e:	d109      	bne.n	8007194 <__libc_init_array+0x24>
 8007180:	4e0b      	ldr	r6, [pc, #44]	; (80071b0 <__libc_init_array+0x40>)
 8007182:	4c0c      	ldr	r4, [pc, #48]	; (80071b4 <__libc_init_array+0x44>)
 8007184:	f000 f960 	bl	8007448 <_init>
 8007188:	1ba4      	subs	r4, r4, r6
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	2500      	movs	r5, #0
 800718e:	42a5      	cmp	r5, r4
 8007190:	d105      	bne.n	800719e <__libc_init_array+0x2e>
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007198:	4798      	blx	r3
 800719a:	3501      	adds	r5, #1
 800719c:	e7ee      	b.n	800717c <__libc_init_array+0xc>
 800719e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071a2:	4798      	blx	r3
 80071a4:	3501      	adds	r5, #1
 80071a6:	e7f2      	b.n	800718e <__libc_init_array+0x1e>
 80071a8:	08007794 	.word	0x08007794
 80071ac:	08007794 	.word	0x08007794
 80071b0:	08007794 	.word	0x08007794
 80071b4:	080077a0 	.word	0x080077a0

080071b8 <memcpy>:
 80071b8:	b510      	push	{r4, lr}
 80071ba:	1e43      	subs	r3, r0, #1
 80071bc:	440a      	add	r2, r1
 80071be:	4291      	cmp	r1, r2
 80071c0:	d100      	bne.n	80071c4 <memcpy+0xc>
 80071c2:	bd10      	pop	{r4, pc}
 80071c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071cc:	e7f7      	b.n	80071be <memcpy+0x6>

080071ce <memset>:
 80071ce:	4402      	add	r2, r0
 80071d0:	4603      	mov	r3, r0
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d100      	bne.n	80071d8 <memset+0xa>
 80071d6:	4770      	bx	lr
 80071d8:	f803 1b01 	strb.w	r1, [r3], #1
 80071dc:	e7f9      	b.n	80071d2 <memset+0x4>
	...

080071e0 <realloc>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <realloc+0xc>)
 80071e2:	460a      	mov	r2, r1
 80071e4:	4601      	mov	r1, r0
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	f000 b8a0 	b.w	800732c <_realloc_r>
 80071ec:	20000010 	.word	0x20000010

080071f0 <_raise_r>:
 80071f0:	291f      	cmp	r1, #31
 80071f2:	b538      	push	{r3, r4, r5, lr}
 80071f4:	4604      	mov	r4, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	d904      	bls.n	8007204 <_raise_r+0x14>
 80071fa:	2316      	movs	r3, #22
 80071fc:	6003      	str	r3, [r0, #0]
 80071fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007206:	b112      	cbz	r2, 800720e <_raise_r+0x1e>
 8007208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800720c:	b94b      	cbnz	r3, 8007222 <_raise_r+0x32>
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f830 	bl	8007274 <_getpid_r>
 8007214:	462a      	mov	r2, r5
 8007216:	4601      	mov	r1, r0
 8007218:	4620      	mov	r0, r4
 800721a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800721e:	f000 b817 	b.w	8007250 <_kill_r>
 8007222:	2b01      	cmp	r3, #1
 8007224:	d00a      	beq.n	800723c <_raise_r+0x4c>
 8007226:	1c59      	adds	r1, r3, #1
 8007228:	d103      	bne.n	8007232 <_raise_r+0x42>
 800722a:	2316      	movs	r3, #22
 800722c:	6003      	str	r3, [r0, #0]
 800722e:	2001      	movs	r0, #1
 8007230:	e7e7      	b.n	8007202 <_raise_r+0x12>
 8007232:	2400      	movs	r4, #0
 8007234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007238:	4628      	mov	r0, r5
 800723a:	4798      	blx	r3
 800723c:	2000      	movs	r0, #0
 800723e:	e7e0      	b.n	8007202 <_raise_r+0x12>

08007240 <raise>:
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <raise+0xc>)
 8007242:	4601      	mov	r1, r0
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f7ff bfd3 	b.w	80071f0 <_raise_r>
 800724a:	bf00      	nop
 800724c:	20000010 	.word	0x20000010

08007250 <_kill_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4c07      	ldr	r4, [pc, #28]	; (8007270 <_kill_r+0x20>)
 8007254:	2300      	movs	r3, #0
 8007256:	4605      	mov	r5, r0
 8007258:	4608      	mov	r0, r1
 800725a:	4611      	mov	r1, r2
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	f7fc fc55 	bl	8003b0c <_kill>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d102      	bne.n	800726c <_kill_r+0x1c>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	b103      	cbz	r3, 800726c <_kill_r+0x1c>
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	bd38      	pop	{r3, r4, r5, pc}
 800726e:	bf00      	nop
 8007270:	20000be4 	.word	0x20000be4

08007274 <_getpid_r>:
 8007274:	f7fc bc42 	b.w	8003afc <_getpid>

08007278 <_malloc_r>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	1ccd      	adds	r5, r1, #3
 800727c:	f025 0503 	bic.w	r5, r5, #3
 8007280:	3508      	adds	r5, #8
 8007282:	2d0c      	cmp	r5, #12
 8007284:	bf38      	it	cc
 8007286:	250c      	movcc	r5, #12
 8007288:	2d00      	cmp	r5, #0
 800728a:	4606      	mov	r6, r0
 800728c:	db01      	blt.n	8007292 <_malloc_r+0x1a>
 800728e:	42a9      	cmp	r1, r5
 8007290:	d903      	bls.n	800729a <_malloc_r+0x22>
 8007292:	230c      	movs	r3, #12
 8007294:	6033      	str	r3, [r6, #0]
 8007296:	2000      	movs	r0, #0
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	f000 f87d 	bl	8007398 <__malloc_lock>
 800729e:	4a21      	ldr	r2, [pc, #132]	; (8007324 <_malloc_r+0xac>)
 80072a0:	6814      	ldr	r4, [r2, #0]
 80072a2:	4621      	mov	r1, r4
 80072a4:	b991      	cbnz	r1, 80072cc <_malloc_r+0x54>
 80072a6:	4c20      	ldr	r4, [pc, #128]	; (8007328 <_malloc_r+0xb0>)
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	b91b      	cbnz	r3, 80072b4 <_malloc_r+0x3c>
 80072ac:	4630      	mov	r0, r6
 80072ae:	f000 f863 	bl	8007378 <_sbrk_r>
 80072b2:	6020      	str	r0, [r4, #0]
 80072b4:	4629      	mov	r1, r5
 80072b6:	4630      	mov	r0, r6
 80072b8:	f000 f85e 	bl	8007378 <_sbrk_r>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d124      	bne.n	800730a <_malloc_r+0x92>
 80072c0:	230c      	movs	r3, #12
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 f868 	bl	800739a <__malloc_unlock>
 80072ca:	e7e4      	b.n	8007296 <_malloc_r+0x1e>
 80072cc:	680b      	ldr	r3, [r1, #0]
 80072ce:	1b5b      	subs	r3, r3, r5
 80072d0:	d418      	bmi.n	8007304 <_malloc_r+0x8c>
 80072d2:	2b0b      	cmp	r3, #11
 80072d4:	d90f      	bls.n	80072f6 <_malloc_r+0x7e>
 80072d6:	600b      	str	r3, [r1, #0]
 80072d8:	50cd      	str	r5, [r1, r3]
 80072da:	18cc      	adds	r4, r1, r3
 80072dc:	4630      	mov	r0, r6
 80072de:	f000 f85c 	bl	800739a <__malloc_unlock>
 80072e2:	f104 000b 	add.w	r0, r4, #11
 80072e6:	1d23      	adds	r3, r4, #4
 80072e8:	f020 0007 	bic.w	r0, r0, #7
 80072ec:	1ac3      	subs	r3, r0, r3
 80072ee:	d0d3      	beq.n	8007298 <_malloc_r+0x20>
 80072f0:	425a      	negs	r2, r3
 80072f2:	50e2      	str	r2, [r4, r3]
 80072f4:	e7d0      	b.n	8007298 <_malloc_r+0x20>
 80072f6:	428c      	cmp	r4, r1
 80072f8:	684b      	ldr	r3, [r1, #4]
 80072fa:	bf16      	itet	ne
 80072fc:	6063      	strne	r3, [r4, #4]
 80072fe:	6013      	streq	r3, [r2, #0]
 8007300:	460c      	movne	r4, r1
 8007302:	e7eb      	b.n	80072dc <_malloc_r+0x64>
 8007304:	460c      	mov	r4, r1
 8007306:	6849      	ldr	r1, [r1, #4]
 8007308:	e7cc      	b.n	80072a4 <_malloc_r+0x2c>
 800730a:	1cc4      	adds	r4, r0, #3
 800730c:	f024 0403 	bic.w	r4, r4, #3
 8007310:	42a0      	cmp	r0, r4
 8007312:	d005      	beq.n	8007320 <_malloc_r+0xa8>
 8007314:	1a21      	subs	r1, r4, r0
 8007316:	4630      	mov	r0, r6
 8007318:	f000 f82e 	bl	8007378 <_sbrk_r>
 800731c:	3001      	adds	r0, #1
 800731e:	d0cf      	beq.n	80072c0 <_malloc_r+0x48>
 8007320:	6025      	str	r5, [r4, #0]
 8007322:	e7db      	b.n	80072dc <_malloc_r+0x64>
 8007324:	20000a18 	.word	0x20000a18
 8007328:	20000a1c 	.word	0x20000a1c

0800732c <_realloc_r>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	4607      	mov	r7, r0
 8007330:	4614      	mov	r4, r2
 8007332:	460e      	mov	r6, r1
 8007334:	b921      	cbnz	r1, 8007340 <_realloc_r+0x14>
 8007336:	4611      	mov	r1, r2
 8007338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800733c:	f7ff bf9c 	b.w	8007278 <_malloc_r>
 8007340:	b922      	cbnz	r2, 800734c <_realloc_r+0x20>
 8007342:	f000 f82b 	bl	800739c <_free_r>
 8007346:	4625      	mov	r5, r4
 8007348:	4628      	mov	r0, r5
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734c:	f000 f874 	bl	8007438 <_malloc_usable_size_r>
 8007350:	42a0      	cmp	r0, r4
 8007352:	d20f      	bcs.n	8007374 <_realloc_r+0x48>
 8007354:	4621      	mov	r1, r4
 8007356:	4638      	mov	r0, r7
 8007358:	f7ff ff8e 	bl	8007278 <_malloc_r>
 800735c:	4605      	mov	r5, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	d0f2      	beq.n	8007348 <_realloc_r+0x1c>
 8007362:	4631      	mov	r1, r6
 8007364:	4622      	mov	r2, r4
 8007366:	f7ff ff27 	bl	80071b8 <memcpy>
 800736a:	4631      	mov	r1, r6
 800736c:	4638      	mov	r0, r7
 800736e:	f000 f815 	bl	800739c <_free_r>
 8007372:	e7e9      	b.n	8007348 <_realloc_r+0x1c>
 8007374:	4635      	mov	r5, r6
 8007376:	e7e7      	b.n	8007348 <_realloc_r+0x1c>

08007378 <_sbrk_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4c06      	ldr	r4, [pc, #24]	; (8007394 <_sbrk_r+0x1c>)
 800737c:	2300      	movs	r3, #0
 800737e:	4605      	mov	r5, r0
 8007380:	4608      	mov	r0, r1
 8007382:	6023      	str	r3, [r4, #0]
 8007384:	f7fc fbdc 	bl	8003b40 <_sbrk>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_sbrk_r+0x1a>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	b103      	cbz	r3, 8007392 <_sbrk_r+0x1a>
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20000be4 	.word	0x20000be4

08007398 <__malloc_lock>:
 8007398:	4770      	bx	lr

0800739a <__malloc_unlock>:
 800739a:	4770      	bx	lr

0800739c <_free_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4605      	mov	r5, r0
 80073a0:	2900      	cmp	r1, #0
 80073a2:	d045      	beq.n	8007430 <_free_r+0x94>
 80073a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a8:	1f0c      	subs	r4, r1, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfb8      	it	lt
 80073ae:	18e4      	addlt	r4, r4, r3
 80073b0:	f7ff fff2 	bl	8007398 <__malloc_lock>
 80073b4:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <_free_r+0x98>)
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	4610      	mov	r0, r2
 80073ba:	b933      	cbnz	r3, 80073ca <_free_r+0x2e>
 80073bc:	6063      	str	r3, [r4, #4]
 80073be:	6014      	str	r4, [r2, #0]
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073c6:	f7ff bfe8 	b.w	800739a <__malloc_unlock>
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	d90c      	bls.n	80073e8 <_free_r+0x4c>
 80073ce:	6821      	ldr	r1, [r4, #0]
 80073d0:	1862      	adds	r2, r4, r1
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bf04      	itt	eq
 80073d6:	681a      	ldreq	r2, [r3, #0]
 80073d8:	685b      	ldreq	r3, [r3, #4]
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	bf04      	itt	eq
 80073de:	1852      	addeq	r2, r2, r1
 80073e0:	6022      	streq	r2, [r4, #0]
 80073e2:	6004      	str	r4, [r0, #0]
 80073e4:	e7ec      	b.n	80073c0 <_free_r+0x24>
 80073e6:	4613      	mov	r3, r2
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	b10a      	cbz	r2, 80073f0 <_free_r+0x54>
 80073ec:	42a2      	cmp	r2, r4
 80073ee:	d9fa      	bls.n	80073e6 <_free_r+0x4a>
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	1858      	adds	r0, r3, r1
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d10b      	bne.n	8007410 <_free_r+0x74>
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	4401      	add	r1, r0
 80073fc:	1858      	adds	r0, r3, r1
 80073fe:	4282      	cmp	r2, r0
 8007400:	6019      	str	r1, [r3, #0]
 8007402:	d1dd      	bne.n	80073c0 <_free_r+0x24>
 8007404:	6810      	ldr	r0, [r2, #0]
 8007406:	6852      	ldr	r2, [r2, #4]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	4401      	add	r1, r0
 800740c:	6019      	str	r1, [r3, #0]
 800740e:	e7d7      	b.n	80073c0 <_free_r+0x24>
 8007410:	d902      	bls.n	8007418 <_free_r+0x7c>
 8007412:	230c      	movs	r3, #12
 8007414:	602b      	str	r3, [r5, #0]
 8007416:	e7d3      	b.n	80073c0 <_free_r+0x24>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	1821      	adds	r1, r4, r0
 800741c:	428a      	cmp	r2, r1
 800741e:	bf04      	itt	eq
 8007420:	6811      	ldreq	r1, [r2, #0]
 8007422:	6852      	ldreq	r2, [r2, #4]
 8007424:	6062      	str	r2, [r4, #4]
 8007426:	bf04      	itt	eq
 8007428:	1809      	addeq	r1, r1, r0
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	605c      	str	r4, [r3, #4]
 800742e:	e7c7      	b.n	80073c0 <_free_r+0x24>
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	20000a18 	.word	0x20000a18

08007438 <_malloc_usable_size_r>:
 8007438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743c:	1f18      	subs	r0, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	bfbc      	itt	lt
 8007442:	580b      	ldrlt	r3, [r1, r0]
 8007444:	18c0      	addlt	r0, r0, r3
 8007446:	4770      	bx	lr

08007448 <_init>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr

08007454 <_fini>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	bf00      	nop
 8007458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745a:	bc08      	pop	{r3}
 800745c:	469e      	mov	lr, r3
 800745e:	4770      	bx	lr
