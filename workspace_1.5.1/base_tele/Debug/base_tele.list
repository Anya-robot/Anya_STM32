
base_tele.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000669c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b94  08006b94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b9c  08006b9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b44  20000078  08006c24  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  08006c24  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001346a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab6  00000000  00000000  00033512  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00035fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257f5  00000000  00000000  00037c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3eb  00000000  00000000  0005d42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a47  00000000  00000000  00068818  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e25f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  0013e2dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006848 	.word	0x08006848

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	08006848 	.word	0x08006848

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000542:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f91f 	bl	80007a0 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	b29b      	uxth	r3, r3
 800057e:	425b      	negs	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000586:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800058e:	89fa      	ldrh	r2, [r7, #14]
 8000590:	429a      	cmp	r2, r3
 8000592:	d102      	bne.n	800059a <_ZN14BufferedSerial4readEv+0x30>
 8000594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000598:	e016      	b.n	80005c8 <_ZN14BufferedSerial4readEv+0x5e>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	b291      	uxth	r1, r2
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80005aa:	461a      	mov	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80005ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005be:	b29a      	uxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 80005c6:	68bb      	ldr	r3, [r7, #8]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f0:	da25      	bge.n	800063e <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80005f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	3304      	adds	r3, #4
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	68b9      	ldr	r1, [r7, #8]
 8000606:	4618      	mov	r0, r3
 8000608:	f005 ffd6 	bl	80065b8 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	b29b      	uxth	r3, r3
 8000616:	4413      	add	r3, r2
 8000618:	b29a      	uxth	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800062c:	429a      	cmp	r2, r3
 800062e:	d921      	bls.n	8000674 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 800063c:	e01a      	b.n	8000674 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	4618      	mov	r0, r3
 800064a:	f005 ffb5 	bl	80065b8 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800065a:	429a      	cmp	r2, r3
 800065c:	d905      	bls.n	800066a <_ZN14BufferedSerial5writeEPKhi+0x96>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	b29a      	uxth	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f000 f805 	bl	8000684 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00f      	beq.n	80006b6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d107      	bne.n	80006b6 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b20      	cmp	r3, #32
 80006c2:	d10b      	bne.n	80006dc <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d003      	beq.n	80006dc <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 80006d4:	4b31      	ldr	r3, [pc, #196]	; (800079c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 80006e0:	2300      	movs	r3, #0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d156      	bne.n	8000794 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d103      	bne.n	8000704 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000710:	429a      	cmp	r2, r3
 8000712:	d21c      	bcs.n	800074e <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800072e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	3304      	adds	r3, #4
 8000738:	89ba      	ldrh	r2, [r7, #12]
 800073a:	4619      	mov	r1, r3
 800073c:	f004 ff76 	bl	800562c <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 800074c:	e01e      	b.n	800078c <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000768:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	3304      	adds	r3, #4
 8000772:	89fa      	ldrh	r2, [r7, #14]
 8000774:	4619      	mov	r1, r3
 8000776:	f004 ff59 	bl	800562c <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e000      	b.n	8000796 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200004a0 	.word	0x200004a0

080007a0 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3304      	adds	r3, #4
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	4619      	mov	r1, r3
 80007b6:	f004 ffa5 	bl	8005704 <HAL_UART_Receive_DMA>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681c      	ldr	r4, [r3, #0]
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <HAL_UART_TxCpltCallback+0x34>)
 80007ea:	f7ff ffea 	bl	80007c2 <_ZN14BufferedSerial10get_handleEv>
 80007ee:	4603      	mov	r3, r0
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	429c      	cmp	r4, r3
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <HAL_UART_TxCpltCallback+0x34>)
 8000802:	f7ff ff3f 	bl	8000684 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	bf00      	nop
 8000810:	20000094 	.word	0x20000094

08000814 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <HAL_UART_RxCpltCallback+0x18>)
 800081e:	f7ff ffbf 	bl	80007a0 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000094 	.word	0x20000094

08000830 <_Z41__static_initialization_and_destruction_0ii>:
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d108      	bne.n	8000852 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000846:	4293      	cmp	r3, r2
 8000848:	d103      	bne.n	8000852 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 800084a:	4904      	ldr	r1, [pc, #16]	; (800085c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800084e:	f7ff fe61 	bl	8000514 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000b74 	.word	0x20000b74
 8000860:	20000094 	.word	0x20000094

08000864 <_GLOBAL__sub_I_buff_serial>:
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
 8000868:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ffdf 	bl	8000830 <_Z41__static_initialization_and_destruction_0ii>
 8000872:	bd80      	pop	{r7, pc}

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f002 febc 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f810 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f95c 	bl	8000b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000884:	f000 f932 	bl	8000aec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000888:	f000 f906 	bl	8000a98 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800088c:	f000 f8b6 	bl	80009fc <MX_TIM11_Init>
  MX_TIM10_Init();
 8000890:	f000 f866 	bl	8000960 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8000894:	f001 fcf6 	bl	8002284 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	loop();
 8000898:	f001 fd10 	bl	80022bc <loop>
 800089c:	e7fc      	b.n	8000898 <main+0x24>
	...

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	; 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2234      	movs	r2, #52	; 0x34
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fe8d 	bl	80065ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <SystemClock_Config+0xb8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <SystemClock_Config+0xb8>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <SystemClock_Config+0xb8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <SystemClock_Config+0xbc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <SystemClock_Config+0xbc>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <SystemClock_Config+0xbc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4618      	mov	r0, r3
 8000916:	f004 f809 	bl	800492c <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000920:	f000 f992 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f003 fd3a 	bl	80043b8 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800094a:	f000 f97d 	bl	8000c48 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	; 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_TIM10_Init+0x94>)
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_TIM10_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 7;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM10_Init+0x94>)
 8000980:	2207      	movs	r2, #7
 8000982:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM10_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 39999;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM10_Init+0x94>)
 800098c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000990:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM10_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM10_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009a0:	f004 fa1e 	bl	8004de0 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80009aa:	f000 f94d 	bl	8000c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009b0:	f004 fa41 	bl	8004e36 <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80009ba:	f000 f945 	bl	8000c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009d6:	f004 faa1 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80009e0:	f000 f932 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009e6:	f002 fbe1 	bl	80031ac <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000a94 	.word	0x20000a94
 80009f8:	40014400 	.word	0x40014400

080009fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a16:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <MX_TIM11_Init+0x98>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a28:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000a2c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a3c:	f004 f9d0 	bl	8004de0 <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000a46:	f000 f8ff 	bl	8000c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a4a:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a4c:	f004 f9f3 	bl	8004e36 <HAL_TIM_PWM_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000a56:	f000 f8f7 	bl	8000c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5a:	2360      	movs	r3, #96	; 0x60
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a72:	f004 fa53 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000a7c:	f000 f8e4 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM11_Init+0x94>)
 8000a82:	f002 fb93 	bl	80031ac <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000b34 	.word	0x20000b34
 8000a94:	40014800 	.word	0x40014800

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f004 fd5f 	bl	8005592 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f8b5 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000b74 	.word	0x20000b74
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_DMA_Init+0x4c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <MX_DMA_Init+0x4c>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_DMA_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2010      	movs	r0, #16
 8000b14:	f002 fedd 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f002 fef6 	bl	800390a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2011      	movs	r0, #17
 8000b24:	f002 fed5 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b28:	2011      	movs	r0, #17
 8000b2a:	f002 feee 	bl	800390a <HAL_NVIC_EnableIRQ>

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_GPIO_Init+0xf8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_GPIO_Init+0xfc>)
 8000bc8:	f003 fbdc 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000bd2:	481a      	ldr	r0, [pc, #104]	; (8000c3c <MX_GPIO_Init+0x100>)
 8000bd4:	f003 fbd6 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_GPIO_Init+0x104>)
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <MX_GPIO_Init+0x108>)
 8000bee:	f003 fa37 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <MX_GPIO_Init+0xfc>)
 8000c0a:	f003 fa29 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_2_Pin;
 8000c0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_GPIO_Init+0x100>)
 8000c28:	f003 fa1a 	bl	8004060 <HAL_GPIO_Init>

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	10210000 	.word	0x10210000
 8000c44:	40020800 	.word	0x40020800

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <Error_Handler+0x6>

08000c50 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <_ZN13STM32HardwareC1Ev+0x1c>)
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	20000094 	.word	0x20000094

08000c70 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc69 	bl	8000554 <_ZN14BufferedSerial4initEv>
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fc67 	bl	800056a <_ZN14BufferedSerial4readEv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc8a 	bl	80005d4 <_ZN14BufferedSerial5writeEPKhi>
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	f002 fcf6 	bl	80036c0 <HAL_GetTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <_ZN3ros3MsgC1Ev+0x1c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	08006b64 	.word	0x08006b64

08000d20 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
      data()
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ffe8 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ffcf 	bl	8000cde <_ZN3ros4TimeC1Ev>
    {
    }
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08006b4c 	.word	0x08006b4c

08000d50 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6859      	ldr	r1, [r3, #4]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	0a19      	lsrs	r1, r3, #8
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	0c19      	lsrs	r1, r3, #16
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3302      	adds	r3, #2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	0e19      	lsrs	r1, r3, #24
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3303      	adds	r3, #3
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3304      	adds	r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	0a19      	lsrs	r1, r3, #8
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2ca      	uxtb	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	0c19      	lsrs	r1, r3, #16
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	0e19      	lsrs	r1, r3, #24
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3303      	adds	r3, #3
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	b2ca      	uxtb	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3304      	adds	r3, #4
 8000df0:	60fb      	str	r3, [r7, #12]
      return offset;
 8000df2:	68fb      	ldr	r3, [r7, #12]
    }
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	6839      	ldr	r1, [r7, #0]
 8000e26:	440b      	add	r3, r1
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	041b      	lsls	r3, r3, #16
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3303      	adds	r3, #3
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	440b      	add	r3, r1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	061b      	lsls	r3, r3, #24
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	440b      	add	r3, r1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	041b      	lsls	r3, r3, #16
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	6839      	ldr	r1, [r7, #0]
 8000ea8:	440b      	add	r3, r1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	061b      	lsls	r3, r3, #24
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	60fb      	str	r3, [r7, #12]
     return offset;
 8000eba:	68fb      	ldr	r3, [r7, #12]
    }
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	08006860 	.word	0x08006860

08000ee4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	08006870 	.word	0x08006870

08000f00 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fef8 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	809a      	strh	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
    {
    }
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08006b34 	.word	0x08006b34
 8000f44:	08006894 	.word	0x08006894

08000f48 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	8899      	ldrh	r1, [r3, #4]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	889b      	ldrh	r3, [r3, #4]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	b2ca      	uxtb	r2, r1
 8000f76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f93e 	bl	8000204 <strlen>
 8000f88:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	69b9      	ldr	r1, [r7, #24]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 face 	bl	8002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	18d0      	adds	r0, r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4619      	mov	r1, r3
 8000fac:	f005 fb04 	bl	80065b8 <memcpy>
      offset += length_topic_name;
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff f921 	bl	8000204 <strlen>
 8000fc2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	6979      	ldr	r1, [r7, #20]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fab1 	bl	8002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	18d0      	adds	r0, r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f005 fae7 	bl	80065b8 <memcpy>
      offset += length_message_type;
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f904 	bl	8000204 <strlen>
 8000ffc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fa94 	bl	8002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	3304      	adds	r3, #4
 8001010:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	18d0      	adds	r0, r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4619      	mov	r1, r3
 8001020:	f005 faca 	bl	80065b8 <memcpy>
      offset += length_md5sum;
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	0a19      	lsrs	r1, r3, #8
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4413      	add	r3, r2
 800104a:	b2ca      	uxtb	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	0c19      	lsrs	r1, r3, #16
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3302      	adds	r3, #2
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	4413      	add	r3, r2
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	0e19      	lsrs	r1, r3, #24
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3303      	adds	r3, #3
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	61fb      	str	r3, [r7, #28]
      return offset;
 8001074:	69fb      	ldr	r3, [r7, #28]
    }
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800107e:	b580      	push	{r7, lr}
 8001080:	b08a      	sub	sp, #40	; 0x28
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	889b      	ldrh	r3, [r3, #4]
 800109e:	b21a      	sxth	r2, r3
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	3301      	adds	r3, #1
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	440b      	add	r3, r1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	3302      	adds	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	441a      	add	r2, r3
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fa50 	bl	8002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	3304      	adds	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	4413      	add	r3, r2
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d20c      	bcs.n	8001100 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	441a      	add	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	440b      	add	r3, r1
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3301      	adds	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
 80010fe:	e7ec      	b.n	80010da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	4413      	add	r3, r2
 8001106:	3b01      	subs	r3, #1
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	4413      	add	r3, r2
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	3b01      	subs	r3, #1
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	441a      	add	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	4413      	add	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	441a      	add	r2, r3
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fa1d 	bl	8002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	3304      	adds	r3, #4
 800113a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4413      	add	r3, r2
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	429a      	cmp	r2, r3
 800114a:	d20c      	bcs.n	8001166 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	441a      	add	r2, r3
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	3b01      	subs	r3, #1
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	440b      	add	r3, r1
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	3301      	adds	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	e7ec      	b.n	8001140 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	3b01      	subs	r3, #1
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	3b01      	subs	r3, #1
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	441a      	add	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4413      	add	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	441a      	add	r2, r3
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 f9ea 	bl	8002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	3304      	adds	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d20c      	bcs.n	80011cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	441a      	add	r2, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	440b      	add	r3, r1
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	3301      	adds	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e7ec      	b.n	80011a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	3b01      	subs	r3, #1
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	3b01      	subs	r3, #1
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	441a      	add	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4413      	add	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	440a      	add	r2, r1
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	3301      	adds	r3, #1
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	440b      	add	r3, r1
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	4313      	orrs	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	3302      	adds	r3, #2
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	440b      	add	r3, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	041b      	lsls	r3, r3, #16
 8001222:	4313      	orrs	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	3303      	adds	r3, #3
 800122c:	6839      	ldr	r1, [r7, #0]
 800122e:	440b      	add	r3, r1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	061b      	lsls	r3, r3, #24
 8001234:	4313      	orrs	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	3304      	adds	r3, #4
 8001242:	61bb      	str	r3, [r7, #24]
     return offset;
 8001244:	69bb      	ldr	r3, [r7, #24]
    }
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	08006898 	.word	0x08006898

0800126c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	080068b4 	.word	0x080068b4

08001288 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fd34 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	711a      	strb	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80012a8:	609a      	str	r2, [r3, #8]
    {
    }
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	08006b1c 	.word	0x08006b1c
 80012b8:	08006894 	.word	0x08006894

080012bc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	7912      	ldrb	r2, [r2, #4]
 80012d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7fe ff8f 	bl	8000204 <strlen>
 80012e6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 f91f 	bl	8002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	18d0      	adds	r0, r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4619      	mov	r1, r3
 800130a:	f005 f955 	bl	80065b8 <memcpy>
      offset += length_msg;
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
      return offset;
 8001316:	68fb      	ldr	r3, [r7, #12]
    }
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	3301      	adds	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	441a      	add	r2, r3
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f001 f90f 	bl	8002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	3304      	adds	r3, #4
 8001356:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	d20c      	bcs.n	8001382 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	441a      	add	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3b01      	subs	r3, #1
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	440b      	add	r3, r1
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e7ec      	b.n	800135c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	3b01      	subs	r3, #1
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	3b01      	subs	r3, #1
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	441a      	add	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
     return offset;
 80013a6:	693b      	ldr	r3, [r7, #16]
    }
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	080068d8 	.word	0x080068d8

080013cc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	080068ec 	.word	0x080068ec

080013e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fc84 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08006b04 	.word	0x08006b04

08001430 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6859      	ldr	r1, [r3, #4]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	b2ca      	uxtb	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	0a19      	lsrs	r1, r3, #8
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	4413      	add	r3, r2
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	0c19      	lsrs	r1, r3, #16
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3302      	adds	r3, #2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	b2ca      	uxtb	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	0e19      	lsrs	r1, r3, #24
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	3303      	adds	r3, #3
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	b2ca      	uxtb	r2, r1
 8001480:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	3304      	adds	r3, #4
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	6a3a      	ldr	r2, [r7, #32]
 8001492:	429a      	cmp	r2, r3
 8001494:	d22b      	bcs.n	80014ee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	0a19      	lsrs	r1, r3, #8
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3301      	adds	r3, #1
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	b2ca      	uxtb	r2, r1
 80014be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	0c19      	lsrs	r1, r3, #16
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3302      	adds	r3, #2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	0e19      	lsrs	r1, r3, #24
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	3303      	adds	r3, #3
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	3304      	adds	r3, #4
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	3301      	adds	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	e7ce      	b.n	800148c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6919      	ldr	r1, [r3, #16]
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	0a19      	lsrs	r1, r3, #8
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	0c19      	lsrs	r1, r3, #16
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	3302      	adds	r3, #2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	b2ca      	uxtb	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	0e19      	lsrs	r1, r3, #24
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3303      	adds	r3, #3
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	4413      	add	r3, r2
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3304      	adds	r3, #4
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	429a      	cmp	r2, r3
 8001544:	d22b      	bcs.n	800159e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	b2ca      	uxtb	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	0a19      	lsrs	r1, r3, #8
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	b2ca      	uxtb	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	0c19      	lsrs	r1, r3, #16
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	3302      	adds	r3, #2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	b2ca      	uxtb	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	0e19      	lsrs	r1, r3, #24
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	3303      	adds	r3, #3
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b2ca      	uxtb	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3304      	adds	r3, #4
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	e7ce      	b.n	800153c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69d9      	ldr	r1, [r3, #28]
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2ca      	uxtb	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	0a19      	lsrs	r1, r3, #8
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	0c19      	lsrs	r1, r3, #16
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3302      	adds	r3, #2
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	b2ca      	uxtb	r2, r1
 80015ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	0e19      	lsrs	r1, r3, #24
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3303      	adds	r3, #3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3304      	adds	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d228      	bcs.n	8001648 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fdfe 	bl	8000204 <strlen>
 8001608:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 ff8e 	bl	8002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	3304      	adds	r3, #4
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	18d0      	adds	r0, r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4619      	mov	r1, r3
 8001634:	f004 ffc0 	bl	80065b8 <memcpy>
      offset += length_stringsi;
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3301      	adds	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e7d1      	b.n	80015ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800164a:	4618      	mov	r0, r3
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001652:	b580      	push	{r7, lr}
 8001654:	b08e      	sub	sp, #56	; 0x38
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166c:	3301      	adds	r3, #1
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	6a3a      	ldr	r2, [r7, #32]
 8001678:	4313      	orrs	r3, r2
 800167a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	3302      	adds	r3, #2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	6a3a      	ldr	r2, [r7, #32]
 800168a:	4313      	orrs	r3, r2
 800168c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	3303      	adds	r3, #3
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	6a3a      	ldr	r2, [r7, #32]
 800169c:	4313      	orrs	r3, r2
 800169e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80016a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a2:	3304      	adds	r3, #4
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d90a      	bls.n	80016c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f004 ff90 	bl	80065e0 <realloc>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a3a      	ldr	r2, [r7, #32]
 80016ca:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d236      	bcs.n	8001748 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	440a      	add	r2, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f0:	3301      	adds	r3, #1
 80016f2:	6839      	ldr	r1, [r7, #0]
 80016f4:	440b      	add	r3, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001702:	3302      	adds	r3, #2
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	440b      	add	r3, r1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001714:	3303      	adds	r3, #3
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	3304      	adds	r3, #4
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	3301      	adds	r3, #1
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
 8001746:	e7c3      	b.n	80016d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	3301      	adds	r3, #1
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	4313      	orrs	r3, r2
 8001762:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	3302      	adds	r3, #2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	4313      	orrs	r3, r2
 8001774:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001778:	3303      	adds	r3, #3
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4313      	orrs	r3, r2
 8001786:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178a:	3304      	adds	r3, #4
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	d90a      	bls.n	80017ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f004 ff1c 	bl	80065e0 <realloc>
 80017a8:	4602      	mov	r2, r0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	429a      	cmp	r2, r3
 80017c0:	d236      	bcs.n	8001830 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ca:	6839      	ldr	r1, [r7, #0]
 80017cc:	440a      	add	r2, r1
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	3301      	adds	r3, #1
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ea:	3302      	adds	r3, #2
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	440b      	add	r3, r1
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	3303      	adds	r3, #3
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001812:	3304      	adds	r3, #4
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	3214      	adds	r2, #20
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	3301      	adds	r3, #1
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182e:	e7c3      	b.n	80017b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	3301      	adds	r3, #1
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	3302      	adds	r3, #2
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	041b      	lsls	r3, r3, #16
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800185e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001860:	3303      	adds	r3, #3
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001872:	3304      	adds	r3, #4
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	429a      	cmp	r2, r3
 800187e:	d90a      	bls.n	8001896 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f004 fea8 	bl	80065e0 <realloc>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d23f      	bcs.n	800192a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	441a      	add	r2, r3
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fe5a 	bl	8002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	3304      	adds	r3, #4
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	441a      	add	r2, r3
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	3b01      	subs	r3, #1
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	440b      	add	r3, r1
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3301      	adds	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	e7ec      	b.n	80018c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80018ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	3b01      	subs	r3, #1
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	3b01      	subs	r3, #1
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	441a      	add	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	3220      	adds	r2, #32
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	3301      	adds	r3, #1
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	e7ba      	b.n	80018a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800192c:	4618      	mov	r0, r3
 800192e:	3738      	adds	r7, #56	; 0x38
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	08006a40 	.word	0x08006a40

08001950 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	08006910 	.word	0x08006910

0800196c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
  }
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9b6 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
    {
    }
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08006ac0 	.word	0x08006ac0
 80019bc:	08006894 	.word	0x08006894

080019c0 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fc16 	bl	8000204 <strlen>
 80019d8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fda6 	bl	8002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3304      	adds	r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	18d0      	adds	r0, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	4619      	mov	r1, r3
 80019fc:	f004 fddc 	bl	80065b8 <memcpy>
      offset += length_label;
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a19      	lsrs	r1, r3, #8
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	0c19      	lsrs	r1, r3, #16
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3302      	adds	r3, #2
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0e19      	lsrs	r1, r3, #24
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3303      	adds	r3, #3
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	b2ca      	uxtb	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b2ca      	uxtb	r2, r1
 8001a5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a19      	lsrs	r1, r3, #8
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0c19      	lsrs	r1, r3, #16
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0e19      	lsrs	r1, r3, #24
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    }
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	441a      	add	r2, r3
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd55 	bl	8002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d20c      	bcs.n	8001af6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	441a      	add	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e7ec      	b.n	8001ad0 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	3b01      	subs	r3, #1
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	440b      	add	r3, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	3302      	adds	r3, #2
 8001b46:	6839      	ldr	r1, [r7, #0]
 8001b48:	440b      	add	r3, r1
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	3303      	adds	r3, #3
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	440b      	add	r3, r1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	061b      	lsls	r3, r3, #24
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	3301      	adds	r3, #1
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	440b      	add	r3, r1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	440b      	add	r3, r1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	440b      	add	r3, r1
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	613b      	str	r3, [r7, #16]
     return offset;
 8001bc6:	693b      	ldr	r3, [r7, #16]
    }
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	08006934 	.word	0x08006934

08001bec <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	08006954 	.word	0x08006954

08001c08 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f874 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3308      	adds	r3, #8
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff feab 	bl	8001984 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
    {
    }
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	08006aa8 	.word	0x08006aa8

08001c48 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0a19      	lsrs	r1, r3, #8
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	b2ca      	uxtb	r2, r1
 8001c74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	0c19      	lsrs	r1, r3, #16
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0e19      	lsrs	r1, r3, #24
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3303      	adds	r3, #3
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2ca      	uxtb	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d218      	bcs.n	8001ce0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	18d0      	adds	r0, r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	440a      	add	r2, r1
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4798      	blx	r3
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	e7e1      	b.n	8001ca4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69d9      	ldr	r1, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	0a19      	lsrs	r1, r3, #8
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2ca      	uxtb	r2, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	0c19      	lsrs	r1, r3, #16
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3302      	adds	r3, #2
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2ca      	uxtb	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	0e19      	lsrs	r1, r3, #24
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3303      	adds	r3, #3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	b2ca      	uxtb	r2, r1
 8001d22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3304      	adds	r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    }
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3302      	adds	r3, #2
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3303      	adds	r3, #3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	061b      	lsls	r3, r3, #24
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d90a      	bls.n	8001da8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f004 fc1f 	bl	80065e0 <realloc>
 8001da2:	4602      	mov	r2, r0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d21b      	bcs.n	8001df4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0008 	add.w	r0, r3, #8
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7ff fe6c 	bl	8001aa6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	18d0      	adds	r0, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3308      	adds	r3, #8
 8001de4:	2210      	movs	r2, #16
 8001de6:	4619      	mov	r1, r3
 8001de8:	f004 fbe6 	bl	80065b8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	3301      	adds	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e7de      	b.n	8001db2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	440b      	add	r3, r1
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3302      	adds	r3, #2
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	440b      	add	r3, r1
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3303      	adds	r3, #3
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	440b      	add	r3, r1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3304      	adds	r3, #4
 8001e48:	617b      	str	r3, [r7, #20]
     return offset;
 8001e4a:	697b      	ldr	r3, [r7, #20]
    }
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	08006978 	.word	0x08006978

08001e70 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	08006994 	.word	0x08006994

08001e8c <_ZN8std_msgs14ByteMultiArrayC1Ev>:
      uint32_t data_length;
      typedef int8_t _data_type;
      _data_type st_data;
      _data_type * data;

    ByteMultiArray():
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe ff32 	bl	8000d00 <_ZN3ros3MsgC1Ev>
 8001e9c:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <_ZN8std_msgs14ByteMultiArrayC1Ev+0x38>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff feae 	bl	8001c08 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08006a90 	.word	0x08006a90

08001ec8 <_ZNK8std_msgs14ByteMultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1d18      	adds	r0, r3, #4
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7ff feb1 	bl	8001c48 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	0a19      	lsrs	r1, r3, #8
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	0c19      	lsrs	r1, r3, #16
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3302      	adds	r3, #2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2ca      	uxtb	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	0e19      	lsrs	r1, r3, #24
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d212      	bcs.n	8001f6c <_ZNK8std_msgs14ByteMultiArray9serializeEPh+0xa4>
      union {
        int8_t real;
        uint8_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f52:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	7b3a      	ldrb	r2, [r7, #12]
 8001f5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	3301      	adds	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e7e7      	b.n	8001f3c <_ZNK8std_msgs14ByteMultiArray9serializeEPh+0x74>
      }
      return offset;
 8001f6c:	697b      	ldr	r3, [r7, #20]
    }
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZN8std_msgs14ByteMultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1d18      	adds	r0, r3, #4
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7ff fed0 	bl	8001d34 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8001f94:	4602      	mov	r2, r0
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4413      	add	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3303      	adds	r3, #3
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d908      	bls.n	8001ffe <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x88>
        this->data = (int8_t*)realloc(this->data, data_lengthT * sizeof(int8_t));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 faf4 	bl	80065e0 <realloc>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d21d      	bcs.n	800204e <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0xd8>
      union {
        int8_t real;
        uint8_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	723b      	strb	r3, [r7, #8]
      u_st_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002016:	7a3a      	ldrb	r2, [r7, #8]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	6839      	ldr	r1, [r7, #0]
 800201c:	440b      	add	r3, r1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	723b      	strb	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8002026:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int8_t));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	3228      	adds	r2, #40	; 0x28
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3301      	adds	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e7dc      	b.n	8002008 <_ZN8std_msgs14ByteMultiArray11deserializeEPh+0x92>
      }
     return offset;
 800204e:	697b      	ldr	r3, [r7, #20]
    }
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_ZN8std_msgs14ByteMultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/ByteMultiArray"; };
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <_ZN8std_msgs14ByteMultiArray7getTypeEv+0x18>)
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	080069b8 	.word	0x080069b8

08002074 <_ZN8std_msgs14ByteMultiArray6getMD5Ev>:
    const char * getMD5(){ return "70ea476cbcfd65ac2f68f3cda1e891fe"; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN8std_msgs14ByteMultiArray6getMD5Ev+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	080069d0 	.word	0x080069d0

08002090 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE>:

ros::NodeHandle nh;



void wheels_go(const std_msgs::ByteMultiArray &msg){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]



	linear = int(msg.data[0]);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f993 3000 	ldrsb.w	r3, [r3]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b74      	ldr	r3, [pc, #464]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 80020a4:	601a      	str	r2, [r3, #0]
	angular = int(msg.data[1]);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	3301      	adds	r3, #1
 80020ac:	f993 3000 	ldrsb.w	r3, [r3]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 80020b4:	601a      	str	r2, [r3, #0]

	if ((angular == 0) and (linear == 0)){
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x3c>
 80020be:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x3c>
		stop();
 80020c6:	f000 f907 	bl	80022d8 <_Z4stopv>
		return;
 80020ca:	e0cf      	b.n	800226c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1dc>
	}

	start();
 80020cc:	f000 f922 	bl	8002314 <_Z5startv>

	if (angular == 0){
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d162      	bne.n	800219e <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x10e>

		if (linear > 0){
 80020d8:	4b66      	ldr	r3, [pc, #408]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	dd2c      	ble.n	800213a <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0xaa>

			if (((r_flag == 0) and (l_flag == 0)) or ((r_flag == 1) and (l_flag == 1)))
 80020e0:	4b66      	ldr	r3, [pc, #408]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x60>
 80020e8:	4b65      	ldr	r3, [pc, #404]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x70>
 80020f0:	4b62      	ldr	r3, [pc, #392]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10d      	bne.n	8002114 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x84>
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d109      	bne.n	8002114 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x84>
			{
				direction(1, 1);
 8002100:	2101      	movs	r1, #1
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f91c 	bl	8002340 <_Z9directionii>
				motors_go(linear);
 8002108:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f949 	bl	80023a4 <_Z9motors_goi>
 8002112:	e044      	b.n	800219e <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x10e>
			}

			else
			{
				motors_go(0);
 8002114:	2000      	movs	r0, #0
 8002116:	f000 f945 	bl	80023a4 <_Z9motors_goi>
				direction(1, 1);
 800211a:	2101      	movs	r1, #1
 800211c:	2001      	movs	r0, #1
 800211e:	f000 f90f 	bl	8002340 <_Z9directionii>
				motors_go(linear);
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f93c 	bl	80023a4 <_Z9motors_goi>
				r_flag = 1;
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
				l_flag = 1;
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e031      	b.n	800219e <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x10e>
			}


		}

		else if (linear < 0){
 800213a:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	da2d      	bge.n	800219e <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x10e>

			if (((r_flag == 0) and (l_flag == 0)) or ((r_flag == 2) and (l_flag == 2)))
 8002142:	4b4e      	ldr	r3, [pc, #312]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0xc2>
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0xd2>
 8002152:	4b4a      	ldr	r3, [pc, #296]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d10e      	bne.n	8002178 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0xe8>
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d10a      	bne.n	8002178 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0xe8>
			{
				direction(0, 0);
 8002162:	2100      	movs	r1, #0
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f8eb 	bl	8002340 <_Z9directionii>
				motors_go((-1*linear));
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	425b      	negs	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f917 	bl	80023a4 <_Z9motors_goi>
 8002176:	e012      	b.n	800219e <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x10e>
			}

			else
			{
				motors_go(0);
 8002178:	2000      	movs	r0, #0
 800217a:	f000 f913 	bl	80023a4 <_Z9motors_goi>
				direction(0, 0);
 800217e:	2100      	movs	r1, #0
 8002180:	2000      	movs	r0, #0
 8002182:	f000 f8dd 	bl	8002340 <_Z9directionii>
				motors_go((-1*linear));
 8002186:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	425b      	negs	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f909 	bl	80023a4 <_Z9motors_goi>
				r_flag = 2;
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 8002194:	2202      	movs	r2, #2
 8002196:	601a      	str	r2, [r3, #0]
				l_flag = 2;
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 800219a:	2202      	movs	r2, #2
 800219c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (linear == 0){
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d162      	bne.n	800226c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1dc>

		if (angular > 0){
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dd2c      	ble.n	8002208 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x178>

			if (((r_flag == 0) and (l_flag == 0)) or ((r_flag == 1) and (l_flag == 2)))
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x12e>
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x13e>
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10d      	bne.n	80021e2 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x152>
 80021c6:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d109      	bne.n	80021e2 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x152>
			{
				direction(0, 1);
 80021ce:	2101      	movs	r1, #1
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 f8b5 	bl	8002340 <_Z9directionii>
				motors_go(angular);
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f8e2 	bl	80023a4 <_Z9motors_goi>
 80021e0:	e044      	b.n	800226c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1dc>
			}

			else
			{
				motors_go(0);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f000 f8de 	bl	80023a4 <_Z9motors_goi>
				direction(0, 1);
 80021e8:	2101      	movs	r1, #1
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 f8a8 	bl	8002340 <_Z9directionii>
				motors_go(angular);
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f8d5 	bl	80023a4 <_Z9motors_goi>
				r_flag = 1;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
				l_flag = 2;
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e031      	b.n	800226c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1dc>
			}

		}

		else if (angular < 0){
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	da2d      	bge.n	800226c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1dc>

			if (((r_flag == 0) and (l_flag == 0)) or ((r_flag == 1) and (l_flag == 2)))
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x190>
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1a0>
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10e      	bne.n	8002246 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1b6>
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d10a      	bne.n	8002246 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1b6>
			{
				direction(1, 0);
 8002230:	2100      	movs	r1, #0
 8002232:	2001      	movs	r0, #1
 8002234:	f000 f884 	bl	8002340 <_Z9directionii>
				motors_go((-1*angular));
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	425b      	negs	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f8b0 	bl	80023a4 <_Z9motors_goi>
 8002244:	e012      	b.n	800226c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1dc>
			}

			else
			{
				motors_go(0);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f8ac 	bl	80023a4 <_Z9motors_goi>
				direction(1, 0);
 800224c:	2100      	movs	r1, #0
 800224e:	2001      	movs	r0, #1
 8002250:	f000 f876 	bl	8002340 <_Z9directionii>
				motors_go((-1*angular));
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1e8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	425b      	negs	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f8a2 	bl	80023a4 <_Z9motors_goi>
				r_flag = 1;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1ec>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
				l_flag = 2;
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <_Z9wheels_goRKN8std_msgs14ByteMultiArrayE+0x1f0>)
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]





}
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200004a4 	.word	0x200004a4
 8002278:	200004a8 	.word	0x200004a8
 800227c:	200004b0 	.word	0x200004b0
 8002280:	200004ac 	.word	0x200004ac

08002284 <setup>:
//ros::Subscriber<std_msgs::Int32MultiArray> servo_sub("chatter", &servos_go);



// Setup node:
void setup(void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0



  nh.initNode();
 8002288:	4808      	ldr	r0, [pc, #32]	; (80022ac <setup+0x28>)
 800228a:	f000 fa59 	bl	8002740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(base_sub);
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <setup+0x2c>)
 8002290:	4806      	ldr	r0, [pc, #24]	; (80022ac <setup+0x28>)
 8002292:	f000 fa72 	bl	800277a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_>


  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002296:	2100      	movs	r1, #0
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <setup+0x30>)
 800229a:	f002 fe01 	bl	8004ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800229e:	2100      	movs	r1, #0
 80022a0:	4805      	ldr	r0, [pc, #20]	; (80022b8 <setup+0x34>)
 80022a2:	f002 fdfd 	bl	8004ea0 <HAL_TIM_PWM_Start>

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200004b4 	.word	0x200004b4
 80022b0:	200009e4 	.word	0x200009e4
 80022b4:	20000a94 	.word	0x20000a94
 80022b8:	20000b34 	.word	0x20000b34

080022bc <loop>:

// Loop:
void loop(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <loop+0x18>)
 80022c2:	f000 fa87 	bl	80027d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(500);
 80022c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ca:	f001 fa05 	bl	80036d8 <HAL_Delay>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200004b4 	.word	0x200004b4

080022d8 <_Z4stopv>:
}



void stop()
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
//	decelerate(49999);
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <_Z4stopv+0x2c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2200      	movs	r2, #0
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_Z4stopv+0x30>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34

	l_flag = 0;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <_Z4stopv+0x34>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
	r_flag = 0;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <_Z4stopv+0x38>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000a94 	.word	0x20000a94
 8002308:	20000b34 	.word	0x20000b34
 800230c:	200004ac 	.word	0x200004ac
 8002310:	200004b0 	.word	0x200004b0

08002314 <_Z5startv>:

void start()
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 3000);
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_Z5startv+0x24>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002320:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 3000);
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <_Z5startv+0x28>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800232a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000a94 	.word	0x20000a94
 800233c:	20000b34 	.word	0x20000b34

08002340 <_Z9directionii>:

void direction(int dir1, int dir2)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	if (dir1 == 0){
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <_Z9directionii+0x1e>
		HAL_GPIO_WritePin(DIR_1_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002356:	4812      	ldr	r0, [pc, #72]	; (80023a0 <_Z9directionii+0x60>)
 8002358:	f002 f814 	bl	8004384 <HAL_GPIO_WritePin>
 800235c:	e008      	b.n	8002370 <_Z9directionii+0x30>
	}
	else if (dir1 == 1){
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <_Z9directionii+0x30>
		HAL_GPIO_WritePin(DIR_1_GPIO_Port, GPIO_PIN_14, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <_Z9directionii+0x60>)
 800236c:	f002 f80a 	bl	8004384 <HAL_GPIO_WritePin>
	}

	if (dir2 == 0){
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <_Z9directionii+0x44>
		HAL_GPIO_WritePin(DIR_2_GPIO_Port, GPIO_PIN_15, GPIO_PIN_SET);
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237c:	4808      	ldr	r0, [pc, #32]	; (80023a0 <_Z9directionii+0x60>)
 800237e:	f002 f801 	bl	8004384 <HAL_GPIO_WritePin>
	}
	else if (dir2 == 1){
		HAL_GPIO_WritePin(DIR_2_GPIO_Port, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8002382:	e008      	b.n	8002396 <_Z9directionii+0x56>
	else if (dir2 == 1){
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <_Z9directionii+0x56>
		HAL_GPIO_WritePin(DIR_2_GPIO_Port, GPIO_PIN_15, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <_Z9directionii+0x60>)
 8002392:	f001 fff7 	bl	8004384 <HAL_GPIO_WritePin>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40020400 	.word	0x40020400

080023a4 <_Z9motors_goi>:

void motors_go(int speed)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if (speed == 0) current_speed >= 49999? accelerate(49999) : decelerate(49999);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <_Z9motors_goi+0x2e>
 80023b2:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <_Z9motors_goi+0xcc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f24c 324e 	movw	r2, #49998	; 0xc34e
 80023ba:	4293      	cmp	r3, r2
 80023bc:	dd04      	ble.n	80023c8 <_Z9motors_goi+0x24>
 80023be:	f24c 304f 	movw	r0, #49999	; 0xc34f
 80023c2:	f000 f857 	bl	8002474 <_Z10acceleratei>
	else if (speed == 2) current_speed >= 29999? accelerate(29999) : decelerate(29999);

	else if (speed == 3) current_speed >= 19999? accelerate(19999) : decelerate(19999);

	else if (speed == 4) current_speed >= 9999? accelerate(9999) : decelerate(9999);
}
 80023c6:	e04f      	b.n	8002468 <_Z9motors_goi+0xc4>
	if (speed == 0) current_speed >= 49999? accelerate(49999) : decelerate(49999);
 80023c8:	f24c 304f 	movw	r0, #49999	; 0xc34f
 80023cc:	f000 f882 	bl	80024d4 <_Z10deceleratei>
}
 80023d0:	e04a      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 1) current_speed >= 39999? accelerate(39999) : decelerate(39999);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d10f      	bne.n	80023f8 <_Z9motors_goi+0x54>
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <_Z9motors_goi+0xcc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f649 423e 	movw	r2, #39998	; 0x9c3e
 80023e0:	4293      	cmp	r3, r2
 80023e2:	dd04      	ble.n	80023ee <_Z9motors_goi+0x4a>
 80023e4:	f649 403f 	movw	r0, #39999	; 0x9c3f
 80023e8:	f000 f844 	bl	8002474 <_Z10acceleratei>
}
 80023ec:	e03c      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 1) current_speed >= 39999? accelerate(39999) : decelerate(39999);
 80023ee:	f649 403f 	movw	r0, #39999	; 0x9c3f
 80023f2:	f000 f86f 	bl	80024d4 <_Z10deceleratei>
}
 80023f6:	e037      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 2) current_speed >= 29999? accelerate(29999) : decelerate(29999);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d10f      	bne.n	800241e <_Z9motors_goi+0x7a>
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <_Z9motors_goi+0xcc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f247 522e 	movw	r2, #29998	; 0x752e
 8002406:	4293      	cmp	r3, r2
 8002408:	dd04      	ble.n	8002414 <_Z9motors_goi+0x70>
 800240a:	f247 502f 	movw	r0, #29999	; 0x752f
 800240e:	f000 f831 	bl	8002474 <_Z10acceleratei>
}
 8002412:	e029      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 2) current_speed >= 29999? accelerate(29999) : decelerate(29999);
 8002414:	f247 502f 	movw	r0, #29999	; 0x752f
 8002418:	f000 f85c 	bl	80024d4 <_Z10deceleratei>
}
 800241c:	e024      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 3) current_speed >= 19999? accelerate(19999) : decelerate(19999);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10f      	bne.n	8002444 <_Z9motors_goi+0xa0>
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <_Z9motors_goi+0xcc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f644 621e 	movw	r2, #19998	; 0x4e1e
 800242c:	4293      	cmp	r3, r2
 800242e:	dd04      	ble.n	800243a <_Z9motors_goi+0x96>
 8002430:	f644 601f 	movw	r0, #19999	; 0x4e1f
 8002434:	f000 f81e 	bl	8002474 <_Z10acceleratei>
}
 8002438:	e016      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 3) current_speed >= 19999? accelerate(19999) : decelerate(19999);
 800243a:	f644 601f 	movw	r0, #19999	; 0x4e1f
 800243e:	f000 f849 	bl	80024d4 <_Z10deceleratei>
}
 8002442:	e011      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 4) current_speed >= 9999? accelerate(9999) : decelerate(9999);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d10e      	bne.n	8002468 <_Z9motors_goi+0xc4>
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <_Z9motors_goi+0xcc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f242 720e 	movw	r2, #9998	; 0x270e
 8002452:	4293      	cmp	r3, r2
 8002454:	dd04      	ble.n	8002460 <_Z9motors_goi+0xbc>
 8002456:	f242 700f 	movw	r0, #9999	; 0x270f
 800245a:	f000 f80b 	bl	8002474 <_Z10acceleratei>
}
 800245e:	e003      	b.n	8002468 <_Z9motors_goi+0xc4>
	else if (speed == 4) current_speed >= 9999? accelerate(9999) : decelerate(9999);
 8002460:	f242 700f 	movw	r0, #9999	; 0x270f
 8002464:	f000 f836 	bl	80024d4 <_Z10deceleratei>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000000 	.word	0x20000000

08002474 <_Z10acceleratei>:

void accelerate(int final)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	int i;

	for(i = current_speed; i>=final; i-= 1000)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <_Z10acceleratei+0x54>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	dc17      	bgt.n	80024ba <_Z10acceleratei+0x46>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim10, i);
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <_Z10acceleratei+0x58>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	461a      	mov	r2, r3
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <_Z10acceleratei+0x58>)
 8002498:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim11, i);
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <_Z10acceleratei+0x5c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <_Z10acceleratei+0x5c>)
 80024a8:	60da      	str	r2, [r3, #12]

		HAL_Delay(100);
 80024aa:	2064      	movs	r0, #100	; 0x64
 80024ac:	f001 f914 	bl	80036d8 <HAL_Delay>
	for(i = current_speed; i>=final; i-= 1000)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e7e3      	b.n	8002482 <_Z10acceleratei+0xe>
	}

	current_speed = final;
 80024ba:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <_Z10acceleratei+0x54>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000a94 	.word	0x20000a94
 80024d0:	20000b34 	.word	0x20000b34

080024d4 <_Z10deceleratei>:

void decelerate(int final)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	int i;

	for(i = current_speed; i<=final; i+= 1000)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <_Z10deceleratei+0x54>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	db17      	blt.n	800251a <_Z10deceleratei+0x46>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim10, i);
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <_Z10deceleratei+0x58>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <_Z10deceleratei+0x58>)
 80024f8:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim11, i);
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <_Z10deceleratei+0x5c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	461a      	mov	r2, r3
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <_Z10deceleratei+0x5c>)
 8002508:	60da      	str	r2, [r3, #12]

		HAL_Delay(200);
 800250a:	20c8      	movs	r0, #200	; 0xc8
 800250c:	f001 f8e4 	bl	80036d8 <HAL_Delay>
	for(i = current_speed; i<=final; i+= 1000)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e7e3      	b.n	80024e2 <_Z10deceleratei+0xe>
	}

	current_speed = final;
 800251a:	4a03      	ldr	r2, [pc, #12]	; (8002528 <_Z10deceleratei+0x54>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	20000a94 	.word	0x20000a94
 8002530:	20000b34 	.word	0x20000b34

08002534 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d80d      	bhi.n	8002564 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	fa22 f103 	lsr.w	r1, r2, r3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e7ee      	b.n	8002542 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d811      	bhi.n	80025ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	440a      	add	r2, r1
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	4611      	mov	r1, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	00d2      	lsls	r2, r2, #3
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e7ea      	b.n	8002584 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	08006af0 	.word	0x08006af0

080025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ffe8 	bl	80025bc <_ZN3ros15NodeHandleBase_C1Ev>
 80025ec:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fb2a 	bl	8000c50 <_ZN13STM32HardwareC1Ev>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe feec 	bl	80013e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b18      	cmp	r3, #24
 8002618:	d80a      	bhi.n	8002630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002622:	2100      	movs	r1, #0
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e7f1      	b.n	8002614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b18      	cmp	r3, #24
 8002638:	d80b      	bhi.n	8002652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	2200      	movs	r2, #0
 8002648:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	3301      	adds	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e7f0      	b.n	8002634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265c:	d209      	bcs.n	8002672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	3318      	adds	r3, #24
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e7f1      	b.n	8002656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267c:	d20a      	bcs.n	8002694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4413      	add	r3, r2
 8002684:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3301      	adds	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	e7f0      	b.n	8002676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
  }
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	08006a7c 	.word	0x08006a7c

080026d8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	08006ad8 	.word	0x08006ad8

080026f8 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ffe5 	bl	80026d8 <_ZN3ros11Subscriber_C1Ev>
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	330c      	adds	r3, #12
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fbb7 	bl	8001e8c <_ZN8std_msgs14ByteMultiArrayC1Ev>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	609a      	str	r2, [r3, #8]
  };
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	08006a64 	.word	0x08006a64

08002740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fa8f 	bl	8000c70 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b18      	cmp	r3, #24
 800278c:	dc1b      	bgt.n	80027c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10e      	bne.n	80027be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	605a      	str	r2, [r3, #4]
        return true;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e004      	b.n	80027c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e7e0      	b.n	8002788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs14ByteMultiArrayEvEEEEbRT_+0xe>
      }
    }
    return false;
 80027c6:	2300      	movs	r3, #0
  }
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fa71 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 80027e6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d903      	bls.n	8002802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d903      	bls.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fa4b 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad2      	subs	r2, r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	bf8c      	ite	hi
 8002840:	2301      	movhi	r3, #1
 8002842:	2300      	movls	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800284a:	f06f 0301 	mvn.w	r3, #1
 800284e:	e193      	b.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fa18 	bl	8000c8a <_ZN13STM32Hardware4readEv>
 800285a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f2c0 8173 	blt.w	8002b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800287a:	2b07      	cmp	r3, #7
 800287c:	d11d      	bne.n	80028ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002884:	1c59      	adds	r1, r3, #1
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	b2d1      	uxtb	r1, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	460a      	mov	r2, r1
 8002896:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800289e:	1e5a      	subs	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1b7      	bne.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2208      	movs	r2, #8
 80028b4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80028b8:	e7b2      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d128      	bne.n	8002916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2bff      	cmp	r3, #255	; 0xff
 80028c8:	d10d      	bne.n	80028e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f103 0214 	add.w	r2, r3, #20
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80028e4:	e79c      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f9ec 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	bf8c      	ite	hi
 80028fe:	2301      	movhi	r3, #1
 8002900:	2300      	movls	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d08b      	beq.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8002910:	f06f 0301 	mvn.w	r3, #1
 8002914:	e130      	b.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d11b      	bne.n	8002958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2bfe      	cmp	r3, #254	; 0xfe
 8002924:	d107      	bne.n	8002936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002934:	e774      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f43f af68 	beq.w	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f915 	bl	8002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002956:	e763      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800295e:	2b02      	cmp	r3, #2
 8002960:	d113      	bne.n	800298a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002988:	e74a      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002990:	2b03      	cmp	r3, #3
 8002992:	d110      	bne.n	80029b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	441a      	add	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80029b4:	e734      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d116      	bne.n	80029ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80029c6:	425a      	negs	r2, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	bf58      	it	pl
 80029ce:	4253      	negpl	r3, r2
 80029d0:	2bff      	cmp	r3, #255	; 0xff
 80029d2:	d107      	bne.n	80029e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80029e2:	e71d      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80029ec:	e718      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d10f      	bne.n	8002a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002a16:	e703      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d117      	bne.n	8002a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2207      	movs	r2, #7
 8002a38:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f47f aeec 	bne.w	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002a50:	e6e6      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	f47f aee1 	bne.w	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002a6c:	425a      	negs	r2, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	bf58      	it	pl
 8002a74:	4253      	negpl	r3, r2
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	f47f aed2 	bne.w	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d110      	bne.n	8002aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f87a 	bl	8002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f894 	bl	8002bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa6:	e067      	b.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002aae:	2b0a      	cmp	r3, #10
 8002ab0:	d106      	bne.n	8002ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3318      	adds	r3, #24
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f95f 	bl	8002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002abe:	e6af      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d10d      	bne.n	8002ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7fe fdbb 	bl	8001652 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8002ae4:	e69c      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	d104      	bne.n	8002afa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002af8:	e692      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b00:	3b64      	subs	r3, #100	; 0x64
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f43f ae86 	beq.w	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b1a:	3b64      	subs	r3, #100	; 0x64
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	6858      	ldr	r0, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b2e:	3b64      	subs	r3, #100	; 0x64
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	3218      	adds	r2, #24
 8002b44:	4611      	mov	r1, r2
 8002b46:	4798      	blx	r3
    while (true)
 8002b48:	e66a      	b.n	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002b4a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d906      	bls.n	8002b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f809 	bl	8002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8002b76:	2300      	movs	r3, #0
  }
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe f8c7 	bl	8000d20 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f107 020c 	add.w	r2, r7, #12
 8002b9c:	210a      	movs	r1, #10
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
    rt_time = hardware_.time();
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f88e 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
  }
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002bba:	b590      	push	{r4, r7, lr}
 8002bbc:	b08b      	sub	sp, #44	; 0x2c
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f99a 	bl	8000f00 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	2b18      	cmp	r3, #24
 8002bd4:	dc5b      	bgt.n	8002c8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04f      	beq.n	8002c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4608      	mov	r0, r1
 8002c2c:	4798      	blx	r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4798      	blx	r3
 8002c58:	4603      	mov	r3, r0
 8002c5a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c60:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681c      	ldr	r4, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fe79 	bl	800196c <_ZN3ros9Publisher15getEndpointTypeEv>
 8002c7a:	4601      	mov	r1, r0
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	461a      	mov	r2, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	e7a0      	b.n	8002bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	2b18      	cmp	r3, #24
 8002c96:	dc68      	bgt.n	8002d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d05b      	beq.n	8002d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4608      	mov	r0, r1
 8002cf4:	4798      	blx	r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4798      	blx	r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d28:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681c      	ldr	r4, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4608      	mov	r0, r1
 8002d54:	4798      	blx	r3
 8002d56:	4601      	mov	r1, r0
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	3301      	adds	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	e793      	b.n	8002c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8002d72:	bf00      	nop
 8002d74:	372c      	adds	r7, #44	; 0x2c
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}
	...

08002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ffc8 	bl	8000d20 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd ff97 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002da4:	f107 0308 	add.w	r3, r7, #8
 8002da8:	6839      	ldr	r1, [r7, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f828 	bl	8000e00 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4914      	ldr	r1, [pc, #80]	; (8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002db6:	fba1 1303 	umull	r1, r3, r1, r3
 8002dba:	099b      	lsrs	r3, r3, #6
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002dc0:	6939      	ldr	r1, [r7, #16]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd0:	fb00 f303 	mul.w	r3, r0, r3
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	440b      	add	r3, r1
 8002dde:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	3304      	adds	r3, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8a3 	bl	8002f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ff68 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	10624dd3 	.word	0x10624dd3
 8002e0c:	000f4240 	.word	0x000f4240

08002e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b63      	cmp	r3, #99	; 0x63
 8002e20:	dd09      	ble.n	8002e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e077      	b.n	8002f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8002e42:	3207      	adds	r2, #7
 8002e44:	4611      	mov	r1, r2
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	22ff      	movs	r2, #255	; 0xff
 8002e50:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	22fe      	movs	r2, #254	; 0xfe
 8002e58:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	121b      	asrs	r3, r3, #8
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002e80:	4413      	add	r3, r2
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	121b      	asrs	r3, r3, #8
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002eaa:	2305      	movs	r3, #5
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3307      	adds	r3, #7
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	da0d      	bge.n	8002ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e7ec      	b.n	8002eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3307      	adds	r3, #7
 8002ed8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	425a      	negs	r2, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	bf58      	it	pl
 8002ee4:	4253      	negpl	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1c59      	adds	r1, r3, #1
 8002eec:	6179      	str	r1, [r7, #20]
 8002eee:	43d2      	mvns	r2, r2
 8002ef0:	b2d1      	uxtb	r1, r2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f02:	dc0a      	bgt.n	8002f1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1d18      	adds	r0, r3, #4
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7fd fec8 	bl	8000ca6 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	e005      	b.n	8002f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002f1a:	4905      	ldr	r1, [pc, #20]	; (8002f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f847 	bl	8002fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080069f4 	.word	0x080069f4

08002f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fec0 	bl	8000cc8 <_ZN13STM32Hardware4timeEv>
 8002f48:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4914      	ldr	r1, [pc, #80]	; (8002fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8002f52:	fba1 1303 	umull	r1, r3, r1, r3
 8002f56:	099b      	lsrs	r3, r3, #6
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8002f68:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	1aca      	subs	r2, r1, r3
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002f82:	4413      	add	r3, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f103 020c 	add.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3310      	adds	r3, #16
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f000 fad7 	bl	8003548 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	10624dd3 	.word	0x10624dd3
 8002fa8:	000f4240 	.word	0x000f4240
 8002fac:	3b9aca00 	.word	0x3b9aca00

08002fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	2103      	movs	r1, #3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f804 	bl	8002fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe f952 	bl	8001288 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f107 0214 	add.w	r2, r7, #20
 8002ff6:	2107      	movs	r1, #7
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	4798      	blx	r3
  }
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_Z41__static_initialization_and_destruction_0ii>:
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10d      	bne.n	8003030 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 800301e:	4806      	ldr	r0, [pc, #24]	; (8003038 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003020:	f7ff fadc 	bl	80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::ByteMultiArray> base_sub("stm32/anya_base", &wheels_go);
 8003024:	2301      	movs	r3, #1
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003028:	4905      	ldr	r1, [pc, #20]	; (8003040 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800302a:	4806      	ldr	r0, [pc, #24]	; (8003044 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800302c:	f7ff fb64 	bl	80026f8 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200004b4 	.word	0x200004b4
 800303c:	08002091 	.word	0x08002091
 8003040:	08006a30 	.word	0x08006a30
 8003044:	200009e4 	.word	0x200009e4

08003048 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	330c      	adds	r3, #12
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe ff8c 	bl	8001f76 <_ZN8std_msgs14ByteMultiArray11deserializeEPh>
    this->cb_(msg);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	320c      	adds	r2, #12
 8003066:	4610      	mov	r0, r2
 8003068:	4798      	blx	r3
  }
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	330c      	adds	r3, #12
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe ffde 	bl	8002058 <_ZN8std_msgs14ByteMultiArray7getTypeEv>
 800309c:	4603      	mov	r3, r0
  }
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_ZN3ros10SubscriberIN8std_msgs14ByteMultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	330c      	adds	r3, #12
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe ffde 	bl	8002074 <_ZN8std_msgs14ByteMultiArray6getMD5Ev>
 80030b8:	4603      	mov	r3, r0
  }
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    return configured_;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <_GLOBAL__sub_I_linear>:
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
 80030e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff ff8d 	bl	8003004 <_Z41__static_initialization_and_destruction_0ii>
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_MspInit+0x4c>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <HAL_MspInit+0x4c>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_MspInit+0x4c>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_MspInit+0x4c>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_MspInit+0x4c>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_MspInit+0x4c>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800312a:	2007      	movs	r0, #7
 800312c:	f000 fbc6 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <HAL_TIM_Base_MspInit+0x64>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10e      	bne.n	800316c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_TIM_Base_MspInit+0x68>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_TIM_Base_MspInit+0x68>)
 8003158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_TIM_Base_MspInit+0x68>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800316a:	e012      	b.n	8003192 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_TIM_Base_MspInit+0x68>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_TIM_Base_MspInit+0x68>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_TIM_Base_MspInit+0x68>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40014400 	.word	0x40014400
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40014800 	.word	0x40014800

080031ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <HAL_TIM_MspPostInit+0xb4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d11f      	bne.n	800320e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_TIM_MspPostInit+0xb8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_TIM_MspPostInit+0xb8>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b21      	ldr	r3, [pc, #132]	; (8003264 <HAL_TIM_MspPostInit+0xb8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80031fc:	2303      	movs	r3, #3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	4619      	mov	r1, r3
 8003206:	4818      	ldr	r0, [pc, #96]	; (8003268 <HAL_TIM_MspPostInit+0xbc>)
 8003208:	f000 ff2a 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800320c:	e023      	b.n	8003256 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_TIM_MspPostInit+0xc0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d11e      	bne.n	8003256 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_TIM_MspPostInit+0xb8>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_TIM_MspPostInit+0xb8>)
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	6313      	str	r3, [r2, #48]	; 0x30
 8003228:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_TIM_MspPostInit+0xb8>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003246:	2303      	movs	r3, #3
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	4805      	ldr	r0, [pc, #20]	; (8003268 <HAL_TIM_MspPostInit+0xbc>)
 8003252:	f000 ff05 	bl	8004060 <HAL_GPIO_Init>
}
 8003256:	bf00      	nop
 8003258:	3728      	adds	r7, #40	; 0x28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40014400 	.word	0x40014400
 8003264:	40023800 	.word	0x40023800
 8003268:	40020400 	.word	0x40020400
 800326c:	40014800 	.word	0x40014800

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_UART_MspInit+0x150>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f040 8092 	bne.w	80033b8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_UART_MspInit+0x154>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <HAL_UART_MspInit+0x154>)
 800329e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a2:	6413      	str	r3, [r2, #64]	; 0x40
 80032a4:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_UART_MspInit+0x154>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_UART_MspInit+0x154>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <HAL_UART_MspInit+0x154>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6313      	str	r3, [r2, #48]	; 0x30
 80032c0:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <HAL_UART_MspInit+0x154>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032cc:	230c      	movs	r3, #12
 80032ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032dc:	2307      	movs	r3, #7
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	4838      	ldr	r0, [pc, #224]	; (80033c8 <HAL_UART_MspInit+0x158>)
 80032e8:	f000 feba 	bl	8004060 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80032ec:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032ee:	4a38      	ldr	r2, [pc, #224]	; (80033d0 <HAL_UART_MspInit+0x160>)
 80032f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_UART_MspInit+0x15c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800330c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003316:	2200      	movs	r2, #0
 8003318:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800331a:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <HAL_UART_MspInit+0x15c>)
 800331c:	2200      	movs	r2, #0
 800331e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003326:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_UART_MspInit+0x15c>)
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800332e:	4827      	ldr	r0, [pc, #156]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003330:	f000 fb06 	bl	8003940 <HAL_DMA_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800333a:	f7fd fc85 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003342:	635a      	str	r2, [r3, #52]	; 0x34
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_UART_MspInit+0x15c>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_UART_MspInit+0x168>)
 800334e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003356:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800335a:	2240      	movs	r2, #64	; 0x40
 800335c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003360:	2200      	movs	r2, #0
 8003362:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003384:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_UART_MspInit+0x164>)
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800338c:	4811      	ldr	r0, [pc, #68]	; (80033d4 <HAL_UART_MspInit+0x164>)
 800338e:	f000 fad7 	bl	8003940 <HAL_DMA_Init>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8003398:	f7fd fc56 	bl	8000c48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_UART_MspInit+0x164>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	2100      	movs	r1, #0
 80033ac:	2026      	movs	r0, #38	; 0x26
 80033ae:	f000 fa90 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033b2:	2026      	movs	r0, #38	; 0x26
 80033b4:	f000 faa9 	bl	800390a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033b8:	bf00      	nop
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	20000a34 	.word	0x20000a34
 80033d0:	40026088 	.word	0x40026088
 80033d4:	20000ad4 	.word	0x20000ad4
 80033d8:	400260a0 	.word	0x400260a0

080033dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e0:	e7fe      	b.n	80033e0 <NMI_Handler+0x4>

080033e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e6:	e7fe      	b.n	80033e6 <HardFault_Handler+0x4>

080033e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <MemManage_Handler+0x4>

080033ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <BusFault_Handler+0x4>

080033f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <UsageFault_Handler+0x4>

080033fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003428:	f000 f936 	bl	8003698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342c:	bf00      	nop
 800342e:	bd80      	pop	{r7, pc}

08003430 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <DMA1_Stream5_IRQHandler+0x10>)
 8003436:	f000 fbab 	bl	8003b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000a34 	.word	0x20000a34

08003444 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <DMA1_Stream6_IRQHandler+0x10>)
 800344a:	f000 fba1 	bl	8003b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000ad4 	.word	0x20000ad4

08003458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <USART2_IRQHandler+0x10>)
 800345e:	f002 f9d1 	bl	8005804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000b74 	.word	0x20000b74

0800346c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
	return 1;
 8003470:	2301      	movs	r3, #1
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_kill>:

int _kill(int pid, int sig)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003486:	f003 f86d 	bl	8006564 <__errno>
 800348a:	4602      	mov	r2, r0
 800348c:	2316      	movs	r3, #22
 800348e:	6013      	str	r3, [r2, #0]
	return -1;
 8003490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_exit>:

void _exit (int status)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffe7 	bl	800347c <_kill>
	while (1) {}		/* Make sure we hang here */
 80034ae:	e7fe      	b.n	80034ae <_exit+0x12>

080034b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <_sbrk+0x5c>)
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_sbrk+0x60>)
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_sbrk+0x64>)
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <_sbrk+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e0:	f003 f840 	bl	8006564 <__errno>
 80034e4:	4602      	mov	r2, r0
 80034e6:	230c      	movs	r3, #12
 80034e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ee:	e009      	b.n	8003504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <_sbrk+0x64>)
 8003500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20020000 	.word	0x20020000
 8003510:	00000400 	.word	0x00000400
 8003514:	20000a28 	.word	0x20000a28
 8003518:	20000bc0 	.word	0x20000bc0

0800351c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <SystemInit+0x28>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <SystemInit+0x28>)
 8003528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800352c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SystemInit+0x28>)
 8003532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003536:	609a      	str	r2, [r3, #8]
#endif
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0a5a      	lsrs	r2, r3, #9
 8003558:	490f      	ldr	r1, [pc, #60]	; (8003598 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800355a:	fba1 1202 	umull	r1, r2, r1, r2
 800355e:	09d2      	lsrs	r2, r2, #7
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003562:	fb01 f202 	mul.w	r2, r1, r2
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0a5b      	lsrs	r3, r3, #9
 8003570:	4a09      	ldr	r2, [pc, #36]	; (8003598 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	09db      	lsrs	r3, r3, #7
 8003578:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	00044b83 	.word	0x00044b83
 800359c:	3b9aca00 	.word	0x3b9aca00

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035a6:	e003      	b.n	80035b0 <LoopCopyDataInit>

080035a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035ae:	3104      	adds	r1, #4

080035b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035b0:	480b      	ldr	r0, [pc, #44]	; (80035e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035b8:	d3f6      	bcc.n	80035a8 <CopyDataInit>
  ldr  r2, =_sbss
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035bc:	e002      	b.n	80035c4 <LoopFillZerobss>

080035be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035c0:	f842 3b04 	str.w	r3, [r2], #4

080035c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035c8:	d3f9      	bcc.n	80035be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035ca:	f7ff ffa7 	bl	800351c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ce:	f002 ffcf 	bl	8006570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7fd f94f 	bl	8000874 <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035dc:	08006bac 	.word	0x08006bac
  ldr  r0, =_sdata
 80035e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035e4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80035e8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80035ec:	20000bbc 	.word	0x20000bbc

080035f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <HAL_Init+0x40>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_Init+0x40>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_Init+0x40>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 f94d 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	2000      	movs	r0, #0
 8003624:	f000 f808 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fd60 	bl	80030ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_InitTick+0x54>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f965 	bl	8003926 <HAL_SYSTICK_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00e      	b.n	8003684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0f      	cmp	r3, #15
 800366a:	d80a      	bhi.n	8003682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003674:	f000 f92d 	bl	80038d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_InitTick+0x5c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000004 	.word	0x20000004
 8003690:	2000000c 	.word	0x2000000c
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_IncTick+0x20>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x24>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_IncTick+0x24>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2000000c 	.word	0x2000000c
 80036bc:	20000bb4 	.word	0x20000bb4

080036c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return uwTick;
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_GetTick+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000bb4 	.word	0x20000bb4

080036d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7ff ffee 	bl	80036c0 <HAL_GetTick>
 80036e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f0:	d005      	beq.n	80036fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_Delay+0x40>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036fe:	bf00      	nop
 8003700:	f7ff ffde 	bl	80036c0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8f7      	bhi.n	8003700 <HAL_Delay+0x28>
  {
  }
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	2000000c 	.word	0x2000000c

0800371c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003738:	4013      	ands	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374e:	4a04      	ldr	r2, [pc, #16]	; (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	60d3      	str	r3, [r2, #12]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <__NVIC_GetPriorityGrouping+0x18>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 0307 	and.w	r3, r3, #7
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	db0b      	blt.n	80037aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4907      	ldr	r1, [pc, #28]	; (80037b8 <__NVIC_EnableIRQ+0x38>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2001      	movs	r0, #1
 80037a2:	fa00 f202 	lsl.w	r2, r0, r2
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000e100 	.word	0xe000e100

080037bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db0a      	blt.n	80037e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <__NVIC_SetPriority+0x4c>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	440b      	add	r3, r1
 80037e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e4:	e00a      	b.n	80037fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <__NVIC_SetPriority+0x50>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3b04      	subs	r3, #4
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	761a      	strb	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f1c3 0307 	rsb	r3, r3, #7
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf28      	it	cs
 800382e:	2304      	movcs	r3, #4
 8003830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3304      	adds	r3, #4
 8003836:	2b06      	cmp	r3, #6
 8003838:	d902      	bls.n	8003840 <NVIC_EncodePriority+0x30>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3b03      	subs	r3, #3
 800383e:	e000      	b.n	8003842 <NVIC_EncodePriority+0x32>
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	401a      	ands	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43d9      	mvns	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	4313      	orrs	r3, r2
         );
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389c:	f7ff ff8e 	bl	80037bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff29 	bl	800371c <__NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff3e 	bl	8003764 <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff8e 	bl	8003810 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5d 	bl	80037bc <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff31 	bl	8003780 <__NVIC_EnableIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ffa2 	bl	8003878 <SysTick_Config>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7ff feb8 	bl	80036c0 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e099      	b.n	8003a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397c:	e00f      	b.n	800399e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397e:	f7ff fe9f 	bl	80036c0 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b05      	cmp	r3, #5
 800398a:	d908      	bls.n	800399e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e078      	b.n	8003a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e8      	bne.n	800397e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <HAL_DMA_Init+0x158>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4313      	orrs	r3, r2
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d117      	bne.n	8003a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa91 	bl	8003f6c <DMA_CheckFifoParam>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e016      	b.n	8003a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa48 	bl	8003f00 <DMA_CalcBaseAndBitshift>
 8003a70:	4603      	mov	r3, r0
 8003a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	223f      	movs	r2, #63	; 0x3f
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	f010803f 	.word	0xf010803f

08003a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_DMA_Start_IT+0x26>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e040      	b.n	8003b44 <HAL_DMA_Start_IT+0xa8>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d12f      	bne.n	8003b36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f9da 	bl	8003ea4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	223f      	movs	r2, #63	; 0x3f
 8003af6:	409a      	lsls	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0216 	orr.w	r2, r2, #22
 8003b0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e005      	b.n	8003b42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d004      	beq.n	8003b6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00c      	b.n	8003b84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b9c:	4b92      	ldr	r3, [pc, #584]	; (8003de8 <HAL_DMA_IRQHandler+0x258>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a92      	ldr	r2, [pc, #584]	; (8003dec <HAL_DMA_IRQHandler+0x25c>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0a9b      	lsrs	r3, r3, #10
 8003ba8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	2208      	movs	r2, #8
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01a      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0204 	bic.w	r2, r2, #4
 8003be2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	2208      	movs	r2, #8
 8003bea:	409a      	lsls	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f043 0201 	orr.w	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	2201      	movs	r2, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	f043 0202 	orr.w	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	2204      	movs	r2, #4
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	2204      	movs	r2, #4
 8003c56:	409a      	lsls	r2, r3
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0204 	orr.w	r2, r3, #4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d043      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03c      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d024      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
 8003cbe:	e01f      	b.n	8003d00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
 8003cd0:	e016      	b.n	8003d00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0208 	bic.w	r2, r2, #8
 8003cee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	2220      	movs	r2, #32
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 808e 	beq.w	8003e2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8086 	beq.w	8003e2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d26:	2220      	movs	r2, #32
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d136      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0216 	bic.w	r2, r2, #22
 8003d48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <HAL_DMA_IRQHandler+0x1da>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0208 	bic.w	r2, r2, #8
 8003d78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	223f      	movs	r2, #63	; 0x3f
 8003d80:	409a      	lsls	r2, r3
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d07d      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
        }
        return;
 8003da6:	e078      	b.n	8003e9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01c      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d030      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
 8003dd4:	e02b      	b.n	8003e2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d027      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
 8003de6:	e022      	b.n	8003e2e <HAL_DMA_IRQHandler+0x29e>
 8003de8:	20000004 	.word	0x20000004
 8003dec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0210 	bic.w	r2, r2, #16
 8003e0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d032      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d307      	bcc.n	8003e76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f2      	bne.n	8003e5a <HAL_DMA_IRQHandler+0x2ca>
 8003e74:	e000      	b.n	8003e78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
 8003e98:	e000      	b.n	8003e9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e9a:	bf00      	nop
    }
  }
}
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop

08003ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d108      	bne.n	8003ee4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ee2:	e007      	b.n	8003ef4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3b10      	subs	r3, #16
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <DMA_CalcBaseAndBitshift+0x64>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <DMA_CalcBaseAndBitshift+0x68>)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d909      	bls.n	8003f42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f40:	e007      	b.n	8003f52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	aaaaaaab 	.word	0xaaaaaaab
 8003f68:	08006b8c 	.word	0x08006b8c

08003f6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d11f      	bne.n	8003fc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d855      	bhi.n	8004038 <DMA_CheckFifoParam+0xcc>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <DMA_CheckFifoParam+0x28>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fa5 	.word	0x08003fa5
 8003f98:	08003fb7 	.word	0x08003fb7
 8003f9c:	08003fa5 	.word	0x08003fa5
 8003fa0:	08004039 	.word	0x08004039
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d045      	beq.n	800403c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb4:	e042      	b.n	800403c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fbe:	d13f      	bne.n	8004040 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc4:	e03c      	b.n	8004040 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fce:	d121      	bne.n	8004014 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d836      	bhi.n	8004044 <DMA_CheckFifoParam+0xd8>
 8003fd6:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <DMA_CheckFifoParam+0x70>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08003fed 	.word	0x08003fed
 8003fe0:	08003ff3 	.word	0x08003ff3
 8003fe4:	08003fed 	.word	0x08003fed
 8003fe8:	08004005 	.word	0x08004005
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff0:	e02f      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d024      	beq.n	8004048 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004002:	e021      	b.n	8004048 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800400c:	d11e      	bne.n	800404c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004012:	e01b      	b.n	800404c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d902      	bls.n	8004020 <DMA_CheckFifoParam+0xb4>
 800401a:	2b03      	cmp	r3, #3
 800401c:	d003      	beq.n	8004026 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800401e:	e018      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	e015      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
      break;
 8004036:	e00b      	b.n	8004050 <DMA_CheckFifoParam+0xe4>
      break;
 8004038:	bf00      	nop
 800403a:	e00a      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      break;
 800403c:	bf00      	nop
 800403e:	e008      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      break;
 8004040:	bf00      	nop
 8004042:	e006      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      break;
 8004044:	bf00      	nop
 8004046:	e004      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      break;
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      break;   
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <DMA_CheckFifoParam+0xe6>
      break;
 8004050:	bf00      	nop
    }
  } 
  
  return status; 
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	; 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e165      	b.n	8004348 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800407c:	2201      	movs	r2, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	f040 8154 	bne.w	8004342 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d00b      	beq.n	80040ba <HAL_GPIO_Init+0x5a>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d007      	beq.n	80040ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040ae:	2b11      	cmp	r3, #17
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b12      	cmp	r3, #18
 80040b8:	d130      	bne.n	800411c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0xfc>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b12      	cmp	r3, #18
 800415a:	d123      	bne.n	80041a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	08da      	lsrs	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3208      	adds	r2, #8
 8004164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220f      	movs	r2, #15
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3208      	adds	r2, #8
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80ae 	beq.w	8004342 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4b5c      	ldr	r3, [pc, #368]	; (800435c <HAL_GPIO_Init+0x2fc>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	4a5b      	ldr	r2, [pc, #364]	; (800435c <HAL_GPIO_Init+0x2fc>)
 80041f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f4:	6453      	str	r3, [r2, #68]	; 0x44
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_GPIO_Init+0x2fc>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004202:	4a57      	ldr	r2, [pc, #348]	; (8004360 <HAL_GPIO_Init+0x300>)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	3302      	adds	r3, #2
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <HAL_GPIO_Init+0x304>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d025      	beq.n	800427a <HAL_GPIO_Init+0x21a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_GPIO_Init+0x308>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01f      	beq.n	8004276 <HAL_GPIO_Init+0x216>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4c      	ldr	r2, [pc, #304]	; (800436c <HAL_GPIO_Init+0x30c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d019      	beq.n	8004272 <HAL_GPIO_Init+0x212>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_GPIO_Init+0x310>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_GPIO_Init+0x20e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4a      	ldr	r2, [pc, #296]	; (8004374 <HAL_GPIO_Init+0x314>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_GPIO_Init+0x20a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a49      	ldr	r2, [pc, #292]	; (8004378 <HAL_GPIO_Init+0x318>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_Init+0x206>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a48      	ldr	r2, [pc, #288]	; (800437c <HAL_GPIO_Init+0x31c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_GPIO_Init+0x202>
 800425e:	2306      	movs	r3, #6
 8004260:	e00c      	b.n	800427c <HAL_GPIO_Init+0x21c>
 8004262:	2307      	movs	r3, #7
 8004264:	e00a      	b.n	800427c <HAL_GPIO_Init+0x21c>
 8004266:	2305      	movs	r3, #5
 8004268:	e008      	b.n	800427c <HAL_GPIO_Init+0x21c>
 800426a:	2304      	movs	r3, #4
 800426c:	e006      	b.n	800427c <HAL_GPIO_Init+0x21c>
 800426e:	2303      	movs	r3, #3
 8004270:	e004      	b.n	800427c <HAL_GPIO_Init+0x21c>
 8004272:	2302      	movs	r3, #2
 8004274:	e002      	b.n	800427c <HAL_GPIO_Init+0x21c>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_GPIO_Init+0x21c>
 800427a:	2300      	movs	r3, #0
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	f002 0203 	and.w	r2, r2, #3
 8004282:	0092      	lsls	r2, r2, #2
 8004284:	4093      	lsls	r3, r2
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800428c:	4934      	ldr	r1, [pc, #208]	; (8004360 <HAL_GPIO_Init+0x300>)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_GPIO_Init+0x320>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042be:	4a30      	ldr	r2, [pc, #192]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042c4:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042e8:	4a25      	ldr	r2, [pc, #148]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_GPIO_Init+0x320>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_GPIO_Init+0x320>)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_GPIO_Init+0x320>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800433c:	4a10      	ldr	r2, [pc, #64]	; (8004380 <HAL_GPIO_Init+0x320>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b0f      	cmp	r3, #15
 800434c:	f67f ae96 	bls.w	800407c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3724      	adds	r7, #36	; 0x24
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40023800 	.word	0x40023800
 8004360:	40013800 	.word	0x40013800
 8004364:	40020000 	.word	0x40020000
 8004368:	40020400 	.word	0x40020400
 800436c:	40020800 	.word	0x40020800
 8004370:	40020c00 	.word	0x40020c00
 8004374:	40021000 	.word	0x40021000
 8004378:	40021400 	.word	0x40021400
 800437c:	40021800 	.word	0x40021800
 8004380:	40013c00 	.word	0x40013c00

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043a0:	e003      	b.n	80043aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	041a      	lsls	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	619a      	str	r2, [r3, #24]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0cc      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d90c      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d044      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d119      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d003      	beq.n	8004476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004472:	2b03      	cmp	r3, #3
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e067      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4934      	ldr	r1, [pc, #208]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a8:	f7ff f90a 	bl	80036c0 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7ff f906 	bl	80036c0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e04f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d20c      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b22      	ldr	r3, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f855 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 8004542:	4601      	mov	r1, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	fa21 f303 	lsr.w	r3, r1, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff f86a 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00
 8004574:	40023800 	.word	0x40023800
 8004578:	08006b74 	.word	0x08006b74
 800457c:	20000004 	.word	0x20000004
 8004580:	20000008 	.word	0x20000008

08004584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <HAL_RCC_GetHCLKFreq+0x14>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a0:	f7ff fff0 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045a4:	4601      	mov	r1, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40023800 	.word	0x40023800
 80045c0:	08006b84 	.word	0x08006b84

080045c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045c8:	f7ff ffdc 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	0b5b      	lsrs	r3, r3, #13
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4a03      	ldr	r2, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40023800 	.word	0x40023800
 80045e8:	08006b84 	.word	0x08006b84

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004606:	4bc6      	ldr	r3, [pc, #792]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b0c      	cmp	r3, #12
 8004610:	f200 817e 	bhi.w	8004910 <HAL_RCC_GetSysClockFreq+0x324>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <HAL_RCC_GetSysClockFreq+0x30>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004651 	.word	0x08004651
 8004620:	08004911 	.word	0x08004911
 8004624:	08004911 	.word	0x08004911
 8004628:	08004911 	.word	0x08004911
 800462c:	08004657 	.word	0x08004657
 8004630:	08004911 	.word	0x08004911
 8004634:	08004911 	.word	0x08004911
 8004638:	08004911 	.word	0x08004911
 800463c:	0800465d 	.word	0x0800465d
 8004640:	08004911 	.word	0x08004911
 8004644:	08004911 	.word	0x08004911
 8004648:	08004911 	.word	0x08004911
 800464c:	080047b9 	.word	0x080047b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4bb4      	ldr	r3, [pc, #720]	; (8004924 <HAL_RCC_GetSysClockFreq+0x338>)
 8004652:	613b      	str	r3, [r7, #16]
       break;
 8004654:	e15f      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004656:	4bb4      	ldr	r3, [pc, #720]	; (8004928 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004658:	613b      	str	r3, [r7, #16]
      break;
 800465a:	e15c      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800465c:	4bb0      	ldr	r3, [pc, #704]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004664:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004666:	4bae      	ldr	r3, [pc, #696]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04a      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4bab      	ldr	r3, [pc, #684]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	ea03 0501 	and.w	r5, r3, r1
 8004688:	ea04 0602 	and.w	r6, r4, r2
 800468c:	4629      	mov	r1, r5
 800468e:	4632      	mov	r2, r6
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f04f 0400 	mov.w	r4, #0
 8004698:	0154      	lsls	r4, r2, #5
 800469a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800469e:	014b      	lsls	r3, r1, #5
 80046a0:	4619      	mov	r1, r3
 80046a2:	4622      	mov	r2, r4
 80046a4:	1b49      	subs	r1, r1, r5
 80046a6:	eb62 0206 	sbc.w	r2, r2, r6
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	0194      	lsls	r4, r2, #6
 80046b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046b8:	018b      	lsls	r3, r1, #6
 80046ba:	1a5b      	subs	r3, r3, r1
 80046bc:	eb64 0402 	sbc.w	r4, r4, r2
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	00e2      	lsls	r2, r4, #3
 80046ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ce:	00d9      	lsls	r1, r3, #3
 80046d0:	460b      	mov	r3, r1
 80046d2:	4614      	mov	r4, r2
 80046d4:	195b      	adds	r3, r3, r5
 80046d6:	eb44 0406 	adc.w	r4, r4, r6
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	0262      	lsls	r2, r4, #9
 80046e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046e8:	0259      	lsls	r1, r3, #9
 80046ea:	460b      	mov	r3, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	4621      	mov	r1, r4
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	f7fb fd8a 	bl	8000214 <__aeabi_uldivmod>
 8004700:	4603      	mov	r3, r0
 8004702:	460c      	mov	r4, r1
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e049      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004708:	4b85      	ldr	r3, [pc, #532]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	f04f 0400 	mov.w	r4, #0
 8004712:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	ea03 0501 	and.w	r5, r3, r1
 800471e:	ea04 0602 	and.w	r6, r4, r2
 8004722:	4629      	mov	r1, r5
 8004724:	4632      	mov	r2, r6
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	f04f 0400 	mov.w	r4, #0
 800472e:	0154      	lsls	r4, r2, #5
 8004730:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004734:	014b      	lsls	r3, r1, #5
 8004736:	4619      	mov	r1, r3
 8004738:	4622      	mov	r2, r4
 800473a:	1b49      	subs	r1, r1, r5
 800473c:	eb62 0206 	sbc.w	r2, r2, r6
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	0194      	lsls	r4, r2, #6
 800474a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800474e:	018b      	lsls	r3, r1, #6
 8004750:	1a5b      	subs	r3, r3, r1
 8004752:	eb64 0402 	sbc.w	r4, r4, r2
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	00e2      	lsls	r2, r4, #3
 8004760:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004764:	00d9      	lsls	r1, r3, #3
 8004766:	460b      	mov	r3, r1
 8004768:	4614      	mov	r4, r2
 800476a:	195b      	adds	r3, r3, r5
 800476c:	eb44 0406 	adc.w	r4, r4, r6
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	02a2      	lsls	r2, r4, #10
 800477a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800477e:	0299      	lsls	r1, r3, #10
 8004780:	460b      	mov	r3, r1
 8004782:	4614      	mov	r4, r2
 8004784:	4618      	mov	r0, r3
 8004786:	4621      	mov	r1, r4
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f04f 0400 	mov.w	r4, #0
 800478e:	461a      	mov	r2, r3
 8004790:	4623      	mov	r3, r4
 8004792:	f7fb fd3f 	bl	8000214 <__aeabi_uldivmod>
 8004796:	4603      	mov	r3, r0
 8004798:	460c      	mov	r4, r1
 800479a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800479c:	4b60      	ldr	r3, [pc, #384]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	3301      	adds	r3, #1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	613b      	str	r3, [r7, #16]
      break;
 80047b6:	e0ae      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b8:	4b59      	ldr	r3, [pc, #356]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047c2:	4b57      	ldr	r3, [pc, #348]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04a      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	f04f 0400 	mov.w	r4, #0
 80047d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	ea03 0501 	and.w	r5, r3, r1
 80047e4:	ea04 0602 	and.w	r6, r4, r2
 80047e8:	4629      	mov	r1, r5
 80047ea:	4632      	mov	r2, r6
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	0154      	lsls	r4, r2, #5
 80047f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047fa:	014b      	lsls	r3, r1, #5
 80047fc:	4619      	mov	r1, r3
 80047fe:	4622      	mov	r2, r4
 8004800:	1b49      	subs	r1, r1, r5
 8004802:	eb62 0206 	sbc.w	r2, r2, r6
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	f04f 0400 	mov.w	r4, #0
 800480e:	0194      	lsls	r4, r2, #6
 8004810:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004814:	018b      	lsls	r3, r1, #6
 8004816:	1a5b      	subs	r3, r3, r1
 8004818:	eb64 0402 	sbc.w	r4, r4, r2
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	00e2      	lsls	r2, r4, #3
 8004826:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800482a:	00d9      	lsls	r1, r3, #3
 800482c:	460b      	mov	r3, r1
 800482e:	4614      	mov	r4, r2
 8004830:	195b      	adds	r3, r3, r5
 8004832:	eb44 0406 	adc.w	r4, r4, r6
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	0262      	lsls	r2, r4, #9
 8004840:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004844:	0259      	lsls	r1, r3, #9
 8004846:	460b      	mov	r3, r1
 8004848:	4614      	mov	r4, r2
 800484a:	4618      	mov	r0, r3
 800484c:	4621      	mov	r1, r4
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	461a      	mov	r2, r3
 8004856:	4623      	mov	r3, r4
 8004858:	f7fb fcdc 	bl	8000214 <__aeabi_uldivmod>
 800485c:	4603      	mov	r3, r0
 800485e:	460c      	mov	r4, r1
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e049      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004864:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	099b      	lsrs	r3, r3, #6
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	ea03 0501 	and.w	r5, r3, r1
 800487a:	ea04 0602 	and.w	r6, r4, r2
 800487e:	4629      	mov	r1, r5
 8004880:	4632      	mov	r2, r6
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	f04f 0400 	mov.w	r4, #0
 800488a:	0154      	lsls	r4, r2, #5
 800488c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004890:	014b      	lsls	r3, r1, #5
 8004892:	4619      	mov	r1, r3
 8004894:	4622      	mov	r2, r4
 8004896:	1b49      	subs	r1, r1, r5
 8004898:	eb62 0206 	sbc.w	r2, r2, r6
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	f04f 0400 	mov.w	r4, #0
 80048a4:	0194      	lsls	r4, r2, #6
 80048a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048aa:	018b      	lsls	r3, r1, #6
 80048ac:	1a5b      	subs	r3, r3, r1
 80048ae:	eb64 0402 	sbc.w	r4, r4, r2
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	00e2      	lsls	r2, r4, #3
 80048bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048c0:	00d9      	lsls	r1, r3, #3
 80048c2:	460b      	mov	r3, r1
 80048c4:	4614      	mov	r4, r2
 80048c6:	195b      	adds	r3, r3, r5
 80048c8:	eb44 0406 	adc.w	r4, r4, r6
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	02a2      	lsls	r2, r4, #10
 80048d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048da:	0299      	lsls	r1, r3, #10
 80048dc:	460b      	mov	r3, r1
 80048de:	4614      	mov	r4, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	4621      	mov	r1, r4
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f04f 0400 	mov.w	r4, #0
 80048ea:	461a      	mov	r2, r3
 80048ec:	4623      	mov	r3, r4
 80048ee:	f7fb fc91 	bl	8000214 <__aeabi_uldivmod>
 80048f2:	4603      	mov	r3, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_GetSysClockFreq+0x334>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0f1b      	lsrs	r3, r3, #28
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	613b      	str	r3, [r7, #16]
      break;
 800490e:	e002      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <HAL_RCC_GetSysClockFreq+0x338>)
 8004912:	613b      	str	r3, [r7, #16]
      break;
 8004914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004916:	693b      	ldr	r3, [r7, #16]
}
 8004918:	4618      	mov	r0, r3
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	00f42400 	.word	0x00f42400
 8004928:	007a1200 	.word	0x007a1200

0800492c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8083 	beq.w	8004a4c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004946:	4b95      	ldr	r3, [pc, #596]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b04      	cmp	r3, #4
 8004950:	d019      	beq.n	8004986 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004952:	4b92      	ldr	r3, [pc, #584]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d106      	bne.n	800496c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800495e:	4b8f      	ldr	r3, [pc, #572]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496a:	d00c      	beq.n	8004986 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496c:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d112      	bne.n	800499e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004978:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004984:	d10b      	bne.n	800499e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004986:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d05b      	beq.n	8004a4a <HAL_RCC_OscConfig+0x11e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d157      	bne.n	8004a4a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e216      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x8a>
 80049a8:	4b7c      	ldr	r3, [pc, #496]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a7b      	ldr	r2, [pc, #492]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e01d      	b.n	80049f2 <HAL_RCC_OscConfig+0xc6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049be:	d10c      	bne.n	80049da <HAL_RCC_OscConfig+0xae>
 80049c0:	4b76      	ldr	r3, [pc, #472]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a75      	ldr	r2, [pc, #468]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a72      	ldr	r2, [pc, #456]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e00b      	b.n	80049f2 <HAL_RCC_OscConfig+0xc6>
 80049da:	4b70      	ldr	r3, [pc, #448]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a6f      	ldr	r2, [pc, #444]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b6d      	ldr	r3, [pc, #436]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a6c      	ldr	r2, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d013      	beq.n	8004a22 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fe fe61 	bl	80036c0 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a02:	f7fe fe5d 	bl	80036c0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1db      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a14:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0xd6>
 8004a20:	e014      	b.n	8004a4c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fe fe4d 	bl	80036c0 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a2a:	f7fe fe49 	bl	80036c0 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1c7      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3c:	4b57      	ldr	r3, [pc, #348]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0xfe>
 8004a48:	e000      	b.n	8004a4c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d06f      	beq.n	8004b38 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a58:	4b50      	ldr	r3, [pc, #320]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a64:	4b4d      	ldr	r3, [pc, #308]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a70:	4b4a      	ldr	r3, [pc, #296]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7c:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d11c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a88:	4b44      	ldr	r3, [pc, #272]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d116      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a94:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_OscConfig+0x180>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e18f      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4938      	ldr	r1, [pc, #224]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac0:	e03a      	b.n	8004b38 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aca:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fdf6 	bl	80036c0 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fe fdf2 	bl	80036c0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e170      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aea:	4b2c      	ldr	r3, [pc, #176]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4925      	ldr	r1, [pc, #148]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]
 8004b0a:	e015      	b.n	8004b38 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0c:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fe fdd5 	bl	80036c0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fe fdd1 	bl	80036c0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e14f      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d037      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4c:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <HAL_RCC_OscConfig+0x278>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fe fdb5 	bl	80036c0 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7fe fdb1 	bl	80036c0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e12f      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x22e>
 8004b78:	e01c      	b.n	8004bb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_OscConfig+0x278>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fe fd9e 	bl	80036c0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b86:	e00f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fe fd9a 	bl	80036c0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d908      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e118      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	42470000 	.word	0x42470000
 8004ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba8:	4b8a      	ldr	r3, [pc, #552]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e9      	bne.n	8004b88 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8097 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc6:	4b83      	ldr	r3, [pc, #524]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	4a7e      	ldr	r2, [pc, #504]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
 8004be2:	4b7c      	ldr	r3, [pc, #496]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf2:	4b79      	ldr	r3, [pc, #484]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d118      	bne.n	8004c30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfe:	4b76      	ldr	r3, [pc, #472]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a75      	ldr	r2, [pc, #468]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe fd59 	bl	80036c0 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c12:	f7fe fd55 	bl	80036c0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e0d3      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c24:	4b6c      	ldr	r3, [pc, #432]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d106      	bne.n	8004c46 <HAL_RCC_OscConfig+0x31a>
 8004c38:	4b66      	ldr	r3, [pc, #408]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a65      	ldr	r2, [pc, #404]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	e01c      	b.n	8004c80 <HAL_RCC_OscConfig+0x354>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x33c>
 8004c4e:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a60      	ldr	r2, [pc, #384]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c54:	f043 0304 	orr.w	r3, r3, #4
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5a:	4b5e      	ldr	r3, [pc, #376]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a5d      	ldr	r2, [pc, #372]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
 8004c66:	e00b      	b.n	8004c80 <HAL_RCC_OscConfig+0x354>
 8004c68:	4b5a      	ldr	r3, [pc, #360]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	4a59      	ldr	r2, [pc, #356]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	6713      	str	r3, [r2, #112]	; 0x70
 8004c74:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c78:	4a56      	ldr	r2, [pc, #344]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004c7a:	f023 0304 	bic.w	r3, r3, #4
 8004c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fe fd1a 	bl	80036c0 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fe fd16 	bl	80036c0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e092      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ee      	beq.n	8004c90 <HAL_RCC_OscConfig+0x364>
 8004cb2:	e014      	b.n	8004cde <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fe fd04 	bl	80036c0 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fe fd00 	bl	80036c0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e07c      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ee      	bne.n	8004cbc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce4:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d068      	beq.n	8004dca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cf8:	4b36      	ldr	r3, [pc, #216]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d060      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d145      	bne.n	8004d98 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fe fcd5 	bl	80036c0 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1a:	f7fe fcd1 	bl	80036c0 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e04f      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2c:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	019b      	lsls	r3, r3, #6
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	3b01      	subs	r3, #1
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	061b      	lsls	r3, r3, #24
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	071b      	lsls	r3, r3, #28
 8004d64:	491b      	ldr	r1, [pc, #108]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6a:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fe fca6 	bl	80036c0 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fe fca2 	bl	80036c0 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e020      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x44c>
 8004d96:	e018      	b.n	8004dca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fe fc8f 	bl	80036c0 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fe fc8b 	bl	80036c0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e009      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_OscConfig+0x4a8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <HAL_RCC_OscConfig+0x47a>
 8004dc4:	e001      	b.n	8004dca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40007000 	.word	0x40007000
 8004ddc:	42470060 	.word	0x42470060

08004de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e01d      	b.n	8004e2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fe f998 	bl	800313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f000 f942 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e01d      	b.n	8004e84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f815 	bl	8004e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f000 f917 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb48 	bl	8005548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <HAL_TIM_PWM_Start+0x74>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIM_PWM_Start+0x2c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <HAL_TIM_PWM_Start+0x78>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIM_PWM_Start+0x30>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x32>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b06      	cmp	r3, #6
 8004ef6:	d007      	beq.n	8004f08 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40010400 	.word	0x40010400

08004f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0b4      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	f200 809f 	bhi.w	800508c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	0800508d 	.word	0x0800508d
 8004f5c:	0800508d 	.word	0x0800508d
 8004f60:	0800508d 	.word	0x0800508d
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	0800508d 	.word	0x0800508d
 8004f6c:	0800508d 	.word	0x0800508d
 8004f70:	0800508d 	.word	0x0800508d
 8004f74:	0800500b 	.word	0x0800500b
 8004f78:	0800508d 	.word	0x0800508d
 8004f7c:	0800508d 	.word	0x0800508d
 8004f80:	0800508d 	.word	0x0800508d
 8004f84:	0800504b 	.word	0x0800504b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f92a 	bl	80051e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	619a      	str	r2, [r3, #24]
      break;
 8004fc6:	e062      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f97a 	bl	80052c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	619a      	str	r2, [r3, #24]
      break;
 8005008:	e041      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f9cf 	bl	80053b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0208 	orr.w	r2, r2, #8
 8005024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0204 	bic.w	r2, r2, #4
 8005034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	61da      	str	r2, [r3, #28]
      break;
 8005048:	e021      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fa23 	bl	800549c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	021a      	lsls	r2, r3, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	61da      	str	r2, [r3, #28]
      break;
 800508a:	e000      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800508c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a40      	ldr	r2, [pc, #256]	; (80051bc <TIM_Base_SetConfig+0x114>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d00f      	beq.n	80050e8 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a3d      	ldr	r2, [pc, #244]	; (80051c0 <TIM_Base_SetConfig+0x118>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00b      	beq.n	80050e8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <TIM_Base_SetConfig+0x11c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3b      	ldr	r2, [pc, #236]	; (80051c8 <TIM_Base_SetConfig+0x120>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3a      	ldr	r2, [pc, #232]	; (80051cc <TIM_Base_SetConfig+0x124>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d108      	bne.n	80050fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2f      	ldr	r2, [pc, #188]	; (80051bc <TIM_Base_SetConfig+0x114>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d02b      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005108:	d027      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <TIM_Base_SetConfig+0x118>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d023      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <TIM_Base_SetConfig+0x11c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01f      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <TIM_Base_SetConfig+0x120>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01b      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a29      	ldr	r2, [pc, #164]	; (80051cc <TIM_Base_SetConfig+0x124>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d017      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a28      	ldr	r2, [pc, #160]	; (80051d0 <TIM_Base_SetConfig+0x128>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <TIM_Base_SetConfig+0x12c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00f      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <TIM_Base_SetConfig+0x130>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00b      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a25      	ldr	r2, [pc, #148]	; (80051dc <TIM_Base_SetConfig+0x134>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a24      	ldr	r2, [pc, #144]	; (80051e0 <TIM_Base_SetConfig+0x138>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a23      	ldr	r2, [pc, #140]	; (80051e4 <TIM_Base_SetConfig+0x13c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d108      	bne.n	800516c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <TIM_Base_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_Base_SetConfig+0xf8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <TIM_Base_SetConfig+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40001800 	.word	0x40001800
 80051e0:	40001c00 	.word	0x40001c00
 80051e4:	40002000 	.word	0x40002000

080051e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 0302 	bic.w	r3, r3, #2
 8005230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <TIM_OC1_SetConfig+0xd8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC1_SetConfig+0x64>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <TIM_OC1_SetConfig+0xdc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10c      	bne.n	8005266 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0308 	bic.w	r3, r3, #8
 8005252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <TIM_OC1_SetConfig+0xd8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC1_SetConfig+0x8e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <TIM_OC1_SetConfig+0xdc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d111      	bne.n	800529a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800527c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400

080052c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0210 	bic.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0320 	bic.w	r3, r3, #32
 8005312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a22      	ldr	r2, [pc, #136]	; (80053ac <TIM_OC2_SetConfig+0xe4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_OC2_SetConfig+0x68>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <TIM_OC2_SetConfig+0xe8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10d      	bne.n	800534c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <TIM_OC2_SetConfig+0xe4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_OC2_SetConfig+0x94>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <TIM_OC2_SetConfig+0xe8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d113      	bne.n	8005384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400

080053b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a21      	ldr	r2, [pc, #132]	; (8005494 <TIM_OC3_SetConfig+0xe0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC3_SetConfig+0x66>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a20      	ldr	r2, [pc, #128]	; (8005498 <TIM_OC3_SetConfig+0xe4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10d      	bne.n	8005436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a16      	ldr	r2, [pc, #88]	; (8005494 <TIM_OC3_SetConfig+0xe0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <TIM_OC3_SetConfig+0x92>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <TIM_OC3_SetConfig+0xe4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d113      	bne.n	800546e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000
 8005498:	40010400 	.word	0x40010400

0800549c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	031b      	lsls	r3, r3, #12
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a12      	ldr	r2, [pc, #72]	; (8005540 <TIM_OC4_SetConfig+0xa4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC4_SetConfig+0x68>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a11      	ldr	r2, [pc, #68]	; (8005544 <TIM_OC4_SetConfig+0xa8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d109      	bne.n	8005518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800550a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	019b      	lsls	r3, r3, #6
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40010400 	.word	0x40010400

08005548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2201      	movs	r2, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	43db      	mvns	r3, r3
 800556a:	401a      	ands	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a1a      	ldr	r2, [r3, #32]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	fa01 f303 	lsl.w	r3, r1, r3
 8005580:	431a      	orrs	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e03f      	b.n	8005624 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fd fe59 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2224      	movs	r2, #36	; 0x24
 80055c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fc2c 	bl	8005e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b20      	cmp	r3, #32
 8005644:	d153      	bne.n	80056ee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_UART_Transmit_DMA+0x26>
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e04c      	b.n	80056f0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_UART_Transmit_DMA+0x38>
 8005660:	2302      	movs	r3, #2
 8005662:	e045      	b.n	80056f0 <HAL_UART_Transmit_DMA+0xc4>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2221      	movs	r2, #33	; 0x21
 8005688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <HAL_UART_Transmit_DMA+0xcc>)
 8005692:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_UART_Transmit_DMA+0xd0>)
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <HAL_UART_Transmit_DMA+0xd4>)
 80056a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80056ac:	f107 0308 	add.w	r3, r7, #8
 80056b0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3304      	adds	r3, #4
 80056c0:	461a      	mov	r2, r3
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	f7fe f9ea 	bl	8003a9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695a      	ldr	r2, [r3, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056e8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
  }
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	08005a41 	.word	0x08005a41
 80056fc:	08005a93 	.word	0x08005a93
 8005700:	08005b33 	.word	0x08005b33

08005704 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b20      	cmp	r3, #32
 800571c:	d166      	bne.n	80057ec <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_Receive_DMA+0x26>
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e05f      	b.n	80057ee <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UART_Receive_DMA+0x38>
 8005738:	2302      	movs	r3, #2
 800573a:	e058      	b.n	80057ee <HAL_UART_Receive_DMA+0xea>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2222      	movs	r2, #34	; 0x22
 800575a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	4a25      	ldr	r2, [pc, #148]	; (80057f8 <HAL_UART_Receive_DMA+0xf4>)
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	4a24      	ldr	r2, [pc, #144]	; (80057fc <HAL_UART_Receive_DMA+0xf8>)
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <HAL_UART_Receive_DMA+0xfc>)
 8005774:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	2200      	movs	r2, #0
 800577c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	f7fe f981 	bl	8003a9c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	08005aaf 	.word	0x08005aaf
 80057fc:	08005b17 	.word	0x08005b17
 8005800:	08005b33 	.word	0x08005b33

08005804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_UART_IRQHandler+0x52>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa6f 	bl	8005d32 <UART_Receive_IT>
      return;
 8005854:	e0d1      	b.n	80059fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80b0 	beq.w	80059be <HAL_UART_IRQHandler+0x1ba>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <HAL_UART_IRQHandler+0x70>
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80a5 	beq.w	80059be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_UART_IRQHandler+0x90>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	f043 0201 	orr.w	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_UART_IRQHandler+0xb0>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ac:	f043 0202 	orr.w	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_UART_IRQHandler+0xd0>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058cc:	f043 0204 	orr.w	r2, r3, #4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <HAL_UART_IRQHandler+0xfa>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_UART_IRQHandler+0xee>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	f043 0208 	orr.w	r2, r3, #8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d078      	beq.n	80059f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <HAL_UART_IRQHandler+0x11c>
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fa09 	bl	8005d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <HAL_UART_IRQHandler+0x144>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d031      	beq.n	80059ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f952 	bl	8005bf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d123      	bne.n	80059a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	2b00      	cmp	r3, #0
 8005972:	d013      	beq.n	800599c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <HAL_UART_IRQHandler+0x1fc>)
 800597a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe f8e3 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005996:	4610      	mov	r0, r2
 8005998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599a:	e00e      	b.n	80059ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f845 	bl	8005a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	e00a      	b.n	80059ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f841 	bl	8005a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059aa:	e006      	b.n	80059ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f83d 	bl	8005a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80059b8:	e01e      	b.n	80059f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ba:	bf00      	nop
    return;
 80059bc:	e01c      	b.n	80059f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_UART_IRQHandler+0x1d6>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f93f 	bl	8005c56 <UART_Transmit_IT>
    return;
 80059d8:	e00f      	b.n	80059fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_UART_IRQHandler+0x1f6>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f987 	bl	8005d02 <UART_EndTransmit_IT>
    return;
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80059f8:	bf00      	nop
  }
}
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	08005c2f 	.word	0x08005c2f

08005a04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d113      	bne.n	8005a84 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a70:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a80:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a82:	e002      	b.n	8005a8a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7fa fea9 	bl	80007dc <HAL_UART_TxCpltCallback>
}
 8005a8a:	bf00      	nop
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff ffaf 	bl	8005a04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa6:	bf00      	nop
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d11e      	bne.n	8005b08 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ade:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7fa fe83 	bl	8000814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff ff77 	bl	8005a18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b21      	cmp	r3, #33	; 0x21
 8005b64:	d108      	bne.n	8005b78 <UART_DMAError+0x46>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b72:	68b8      	ldr	r0, [r7, #8]
 8005b74:	f000 f827 	bl	8005bc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b22      	cmp	r3, #34	; 0x22
 8005b98:	d108      	bne.n	8005bac <UART_DMAError+0x7a>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f000 f823 	bl	8005bf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	f043 0210 	orr.w	r2, r3, #16
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bb8:	68b8      	ldr	r0, [r7, #8]
 8005bba:	f7ff ff37 	bl	8005a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005bdc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff feef 	bl	8005a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b21      	cmp	r3, #33	; 0x21
 8005c68:	d144      	bne.n	8005cf4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	d11a      	bne.n	8005caa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d105      	bne.n	8005c9e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	1c9a      	adds	r2, r3, #2
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	621a      	str	r2, [r3, #32]
 8005c9c:	e00e      	b.n	8005cbc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]
 8005ca8:	e008      	b.n	8005cbc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6211      	str	r1, [r2, #32]
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10f      	bne.n	8005cf0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e000      	b.n	8005cf6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005cf4:	2302      	movs	r3, #2
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fa fd5a 	bl	80007dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b22      	cmp	r3, #34	; 0x22
 8005d44:	d171      	bne.n	8005e2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4e:	d123      	bne.n	8005d98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28
 8005d7a:	e029      	b.n	8005dd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
 8005d96:	e01b      	b.n	8005dd0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6858      	ldr	r0, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6291      	str	r1, [r2, #40]	; 0x28
 8005db0:	b2c2      	uxtb	r2, r0
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e00c      	b.n	8005dd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	1c58      	adds	r0, r3, #1
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	6288      	str	r0, [r1, #40]	; 0x28
 8005dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d120      	bne.n	8005e26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0220 	bic.w	r2, r2, #32
 8005df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fa fcf9 	bl	8000814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e002      	b.n	8005e2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e000      	b.n	8005e2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
  }
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e76:	f023 030c 	bic.w	r3, r3, #12
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	430b      	orrs	r3, r1
 8005e82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea2:	f040 818b 	bne.w	80061bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4ac1      	ldr	r2, [pc, #772]	; (80061b0 <UART_SetConfig+0x37c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d005      	beq.n	8005ebc <UART_SetConfig+0x88>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4abf      	ldr	r2, [pc, #764]	; (80061b4 <UART_SetConfig+0x380>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f040 80bd 	bne.w	8006036 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fe fb82 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	461d      	mov	r5, r3
 8005ec6:	f04f 0600 	mov.w	r6, #0
 8005eca:	46a8      	mov	r8, r5
 8005ecc:	46b1      	mov	r9, r6
 8005ece:	eb18 0308 	adds.w	r3, r8, r8
 8005ed2:	eb49 0409 	adc.w	r4, r9, r9
 8005ed6:	4698      	mov	r8, r3
 8005ed8:	46a1      	mov	r9, r4
 8005eda:	eb18 0805 	adds.w	r8, r8, r5
 8005ede:	eb49 0906 	adc.w	r9, r9, r6
 8005ee2:	f04f 0100 	mov.w	r1, #0
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ef2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ef6:	4688      	mov	r8, r1
 8005ef8:	4691      	mov	r9, r2
 8005efa:	eb18 0005 	adds.w	r0, r8, r5
 8005efe:	eb49 0106 	adc.w	r1, r9, r6
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	461d      	mov	r5, r3
 8005f08:	f04f 0600 	mov.w	r6, #0
 8005f0c:	196b      	adds	r3, r5, r5
 8005f0e:	eb46 0406 	adc.w	r4, r6, r6
 8005f12:	461a      	mov	r2, r3
 8005f14:	4623      	mov	r3, r4
 8005f16:	f7fa f97d 	bl	8000214 <__aeabi_uldivmod>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4ba5      	ldr	r3, [pc, #660]	; (80061b8 <UART_SetConfig+0x384>)
 8005f22:	fba3 2302 	umull	r2, r3, r3, r2
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	461d      	mov	r5, r3
 8005f30:	f04f 0600 	mov.w	r6, #0
 8005f34:	46a9      	mov	r9, r5
 8005f36:	46b2      	mov	sl, r6
 8005f38:	eb19 0309 	adds.w	r3, r9, r9
 8005f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f40:	4699      	mov	r9, r3
 8005f42:	46a2      	mov	sl, r4
 8005f44:	eb19 0905 	adds.w	r9, r9, r5
 8005f48:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f4c:	f04f 0100 	mov.w	r1, #0
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f60:	4689      	mov	r9, r1
 8005f62:	4692      	mov	sl, r2
 8005f64:	eb19 0005 	adds.w	r0, r9, r5
 8005f68:	eb4a 0106 	adc.w	r1, sl, r6
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	461d      	mov	r5, r3
 8005f72:	f04f 0600 	mov.w	r6, #0
 8005f76:	196b      	adds	r3, r5, r5
 8005f78:	eb46 0406 	adc.w	r4, r6, r6
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	f7fa f948 	bl	8000214 <__aeabi_uldivmod>
 8005f84:	4603      	mov	r3, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4b8b      	ldr	r3, [pc, #556]	; (80061b8 <UART_SetConfig+0x384>)
 8005f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	2164      	movs	r1, #100	; 0x64
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	3332      	adds	r3, #50	; 0x32
 8005f9e:	4a86      	ldr	r2, [pc, #536]	; (80061b8 <UART_SetConfig+0x384>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fac:	4498      	add	r8, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	f04f 0600 	mov.w	r6, #0
 8005fb6:	46a9      	mov	r9, r5
 8005fb8:	46b2      	mov	sl, r6
 8005fba:	eb19 0309 	adds.w	r3, r9, r9
 8005fbe:	eb4a 040a 	adc.w	r4, sl, sl
 8005fc2:	4699      	mov	r9, r3
 8005fc4:	46a2      	mov	sl, r4
 8005fc6:	eb19 0905 	adds.w	r9, r9, r5
 8005fca:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	4692      	mov	sl, r2
 8005fe6:	eb19 0005 	adds.w	r0, r9, r5
 8005fea:	eb4a 0106 	adc.w	r1, sl, r6
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	f04f 0600 	mov.w	r6, #0
 8005ff8:	196b      	adds	r3, r5, r5
 8005ffa:	eb46 0406 	adc.w	r4, r6, r6
 8005ffe:	461a      	mov	r2, r3
 8006000:	4623      	mov	r3, r4
 8006002:	f7fa f907 	bl	8000214 <__aeabi_uldivmod>
 8006006:	4603      	mov	r3, r0
 8006008:	460c      	mov	r4, r1
 800600a:	461a      	mov	r2, r3
 800600c:	4b6a      	ldr	r3, [pc, #424]	; (80061b8 <UART_SetConfig+0x384>)
 800600e:	fba3 1302 	umull	r1, r3, r3, r2
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	2164      	movs	r1, #100	; 0x64
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	3332      	adds	r3, #50	; 0x32
 8006020:	4a65      	ldr	r2, [pc, #404]	; (80061b8 <UART_SetConfig+0x384>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	f003 0207 	and.w	r2, r3, #7
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4442      	add	r2, r8
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	e26f      	b.n	8006516 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006036:	f7fe fab1 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 800603a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	461d      	mov	r5, r3
 8006040:	f04f 0600 	mov.w	r6, #0
 8006044:	46a8      	mov	r8, r5
 8006046:	46b1      	mov	r9, r6
 8006048:	eb18 0308 	adds.w	r3, r8, r8
 800604c:	eb49 0409 	adc.w	r4, r9, r9
 8006050:	4698      	mov	r8, r3
 8006052:	46a1      	mov	r9, r4
 8006054:	eb18 0805 	adds.w	r8, r8, r5
 8006058:	eb49 0906 	adc.w	r9, r9, r6
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006068:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800606c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006070:	4688      	mov	r8, r1
 8006072:	4691      	mov	r9, r2
 8006074:	eb18 0005 	adds.w	r0, r8, r5
 8006078:	eb49 0106 	adc.w	r1, r9, r6
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	461d      	mov	r5, r3
 8006082:	f04f 0600 	mov.w	r6, #0
 8006086:	196b      	adds	r3, r5, r5
 8006088:	eb46 0406 	adc.w	r4, r6, r6
 800608c:	461a      	mov	r2, r3
 800608e:	4623      	mov	r3, r4
 8006090:	f7fa f8c0 	bl	8000214 <__aeabi_uldivmod>
 8006094:	4603      	mov	r3, r0
 8006096:	460c      	mov	r4, r1
 8006098:	461a      	mov	r2, r3
 800609a:	4b47      	ldr	r3, [pc, #284]	; (80061b8 <UART_SetConfig+0x384>)
 800609c:	fba3 2302 	umull	r2, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	461d      	mov	r5, r3
 80060aa:	f04f 0600 	mov.w	r6, #0
 80060ae:	46a9      	mov	r9, r5
 80060b0:	46b2      	mov	sl, r6
 80060b2:	eb19 0309 	adds.w	r3, r9, r9
 80060b6:	eb4a 040a 	adc.w	r4, sl, sl
 80060ba:	4699      	mov	r9, r3
 80060bc:	46a2      	mov	sl, r4
 80060be:	eb19 0905 	adds.w	r9, r9, r5
 80060c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060da:	4689      	mov	r9, r1
 80060dc:	4692      	mov	sl, r2
 80060de:	eb19 0005 	adds.w	r0, r9, r5
 80060e2:	eb4a 0106 	adc.w	r1, sl, r6
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	461d      	mov	r5, r3
 80060ec:	f04f 0600 	mov.w	r6, #0
 80060f0:	196b      	adds	r3, r5, r5
 80060f2:	eb46 0406 	adc.w	r4, r6, r6
 80060f6:	461a      	mov	r2, r3
 80060f8:	4623      	mov	r3, r4
 80060fa:	f7fa f88b 	bl	8000214 <__aeabi_uldivmod>
 80060fe:	4603      	mov	r3, r0
 8006100:	460c      	mov	r4, r1
 8006102:	461a      	mov	r2, r3
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <UART_SetConfig+0x384>)
 8006106:	fba3 1302 	umull	r1, r3, r3, r2
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2164      	movs	r1, #100	; 0x64
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	3332      	adds	r3, #50	; 0x32
 8006118:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <UART_SetConfig+0x384>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006126:	4498      	add	r8, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	461d      	mov	r5, r3
 800612c:	f04f 0600 	mov.w	r6, #0
 8006130:	46a9      	mov	r9, r5
 8006132:	46b2      	mov	sl, r6
 8006134:	eb19 0309 	adds.w	r3, r9, r9
 8006138:	eb4a 040a 	adc.w	r4, sl, sl
 800613c:	4699      	mov	r9, r3
 800613e:	46a2      	mov	sl, r4
 8006140:	eb19 0905 	adds.w	r9, r9, r5
 8006144:	eb4a 0a06 	adc.w	sl, sl, r6
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800615c:	4689      	mov	r9, r1
 800615e:	4692      	mov	sl, r2
 8006160:	eb19 0005 	adds.w	r0, r9, r5
 8006164:	eb4a 0106 	adc.w	r1, sl, r6
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	461d      	mov	r5, r3
 800616e:	f04f 0600 	mov.w	r6, #0
 8006172:	196b      	adds	r3, r5, r5
 8006174:	eb46 0406 	adc.w	r4, r6, r6
 8006178:	461a      	mov	r2, r3
 800617a:	4623      	mov	r3, r4
 800617c:	f7fa f84a 	bl	8000214 <__aeabi_uldivmod>
 8006180:	4603      	mov	r3, r0
 8006182:	460c      	mov	r4, r1
 8006184:	461a      	mov	r2, r3
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <UART_SetConfig+0x384>)
 8006188:	fba3 1302 	umull	r1, r3, r3, r2
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	2164      	movs	r1, #100	; 0x64
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	3332      	adds	r3, #50	; 0x32
 800619a:	4a07      	ldr	r2, [pc, #28]	; (80061b8 <UART_SetConfig+0x384>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	f003 0207 	and.w	r2, r3, #7
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4442      	add	r2, r8
 80061ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061ae:	e1b2      	b.n	8006516 <UART_SetConfig+0x6e2>
 80061b0:	40011000 	.word	0x40011000
 80061b4:	40011400 	.word	0x40011400
 80061b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4ad7      	ldr	r2, [pc, #860]	; (8006520 <UART_SetConfig+0x6ec>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d005      	beq.n	80061d2 <UART_SetConfig+0x39e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4ad6      	ldr	r2, [pc, #856]	; (8006524 <UART_SetConfig+0x6f0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	f040 80d1 	bne.w	8006374 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061d2:	f7fe f9f7 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 80061d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	469a      	mov	sl, r3
 80061dc:	f04f 0b00 	mov.w	fp, #0
 80061e0:	46d0      	mov	r8, sl
 80061e2:	46d9      	mov	r9, fp
 80061e4:	eb18 0308 	adds.w	r3, r8, r8
 80061e8:	eb49 0409 	adc.w	r4, r9, r9
 80061ec:	4698      	mov	r8, r3
 80061ee:	46a1      	mov	r9, r4
 80061f0:	eb18 080a 	adds.w	r8, r8, sl
 80061f4:	eb49 090b 	adc.w	r9, r9, fp
 80061f8:	f04f 0100 	mov.w	r1, #0
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006204:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006208:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800620c:	4688      	mov	r8, r1
 800620e:	4691      	mov	r9, r2
 8006210:	eb1a 0508 	adds.w	r5, sl, r8
 8006214:	eb4b 0609 	adc.w	r6, fp, r9
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	f04f 0400 	mov.w	r4, #0
 800622a:	0094      	lsls	r4, r2, #2
 800622c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006230:	008b      	lsls	r3, r1, #2
 8006232:	461a      	mov	r2, r3
 8006234:	4623      	mov	r3, r4
 8006236:	4628      	mov	r0, r5
 8006238:	4631      	mov	r1, r6
 800623a:	f7f9 ffeb 	bl	8000214 <__aeabi_uldivmod>
 800623e:	4603      	mov	r3, r0
 8006240:	460c      	mov	r4, r1
 8006242:	461a      	mov	r2, r3
 8006244:	4bb8      	ldr	r3, [pc, #736]	; (8006528 <UART_SetConfig+0x6f4>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	469b      	mov	fp, r3
 8006254:	f04f 0c00 	mov.w	ip, #0
 8006258:	46d9      	mov	r9, fp
 800625a:	46e2      	mov	sl, ip
 800625c:	eb19 0309 	adds.w	r3, r9, r9
 8006260:	eb4a 040a 	adc.w	r4, sl, sl
 8006264:	4699      	mov	r9, r3
 8006266:	46a2      	mov	sl, r4
 8006268:	eb19 090b 	adds.w	r9, r9, fp
 800626c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800627c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006280:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006284:	4689      	mov	r9, r1
 8006286:	4692      	mov	sl, r2
 8006288:	eb1b 0509 	adds.w	r5, fp, r9
 800628c:	eb4c 060a 	adc.w	r6, ip, sl
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4619      	mov	r1, r3
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	f04f 0400 	mov.w	r4, #0
 80062a2:	0094      	lsls	r4, r2, #2
 80062a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062a8:	008b      	lsls	r3, r1, #2
 80062aa:	461a      	mov	r2, r3
 80062ac:	4623      	mov	r3, r4
 80062ae:	4628      	mov	r0, r5
 80062b0:	4631      	mov	r1, r6
 80062b2:	f7f9 ffaf 	bl	8000214 <__aeabi_uldivmod>
 80062b6:	4603      	mov	r3, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	461a      	mov	r2, r3
 80062bc:	4b9a      	ldr	r3, [pc, #616]	; (8006528 <UART_SetConfig+0x6f4>)
 80062be:	fba3 1302 	umull	r1, r3, r3, r2
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	2164      	movs	r1, #100	; 0x64
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	3332      	adds	r3, #50	; 0x32
 80062d0:	4a95      	ldr	r2, [pc, #596]	; (8006528 <UART_SetConfig+0x6f4>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062dc:	4498      	add	r8, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	469b      	mov	fp, r3
 80062e2:	f04f 0c00 	mov.w	ip, #0
 80062e6:	46d9      	mov	r9, fp
 80062e8:	46e2      	mov	sl, ip
 80062ea:	eb19 0309 	adds.w	r3, r9, r9
 80062ee:	eb4a 040a 	adc.w	r4, sl, sl
 80062f2:	4699      	mov	r9, r3
 80062f4:	46a2      	mov	sl, r4
 80062f6:	eb19 090b 	adds.w	r9, r9, fp
 80062fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062fe:	f04f 0100 	mov.w	r1, #0
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800630a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800630e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006312:	4689      	mov	r9, r1
 8006314:	4692      	mov	sl, r2
 8006316:	eb1b 0509 	adds.w	r5, fp, r9
 800631a:	eb4c 060a 	adc.w	r6, ip, sl
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	4619      	mov	r1, r3
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	f04f 0400 	mov.w	r4, #0
 8006330:	0094      	lsls	r4, r2, #2
 8006332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006336:	008b      	lsls	r3, r1, #2
 8006338:	461a      	mov	r2, r3
 800633a:	4623      	mov	r3, r4
 800633c:	4628      	mov	r0, r5
 800633e:	4631      	mov	r1, r6
 8006340:	f7f9 ff68 	bl	8000214 <__aeabi_uldivmod>
 8006344:	4603      	mov	r3, r0
 8006346:	460c      	mov	r4, r1
 8006348:	461a      	mov	r2, r3
 800634a:	4b77      	ldr	r3, [pc, #476]	; (8006528 <UART_SetConfig+0x6f4>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	; 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	3332      	adds	r3, #50	; 0x32
 800635e:	4a72      	ldr	r2, [pc, #456]	; (8006528 <UART_SetConfig+0x6f4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 020f 	and.w	r2, r3, #15
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4442      	add	r2, r8
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	e0d0      	b.n	8006516 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7fe f912 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8006378:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	469a      	mov	sl, r3
 800637e:	f04f 0b00 	mov.w	fp, #0
 8006382:	46d0      	mov	r8, sl
 8006384:	46d9      	mov	r9, fp
 8006386:	eb18 0308 	adds.w	r3, r8, r8
 800638a:	eb49 0409 	adc.w	r4, r9, r9
 800638e:	4698      	mov	r8, r3
 8006390:	46a1      	mov	r9, r4
 8006392:	eb18 080a 	adds.w	r8, r8, sl
 8006396:	eb49 090b 	adc.w	r9, r9, fp
 800639a:	f04f 0100 	mov.w	r1, #0
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ae:	4688      	mov	r8, r1
 80063b0:	4691      	mov	r9, r2
 80063b2:	eb1a 0508 	adds.w	r5, sl, r8
 80063b6:	eb4b 0609 	adc.w	r6, fp, r9
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4619      	mov	r1, r3
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	f04f 0400 	mov.w	r4, #0
 80063cc:	0094      	lsls	r4, r2, #2
 80063ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063d2:	008b      	lsls	r3, r1, #2
 80063d4:	461a      	mov	r2, r3
 80063d6:	4623      	mov	r3, r4
 80063d8:	4628      	mov	r0, r5
 80063da:	4631      	mov	r1, r6
 80063dc:	f7f9 ff1a 	bl	8000214 <__aeabi_uldivmod>
 80063e0:	4603      	mov	r3, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	461a      	mov	r2, r3
 80063e6:	4b50      	ldr	r3, [pc, #320]	; (8006528 <UART_SetConfig+0x6f4>)
 80063e8:	fba3 2302 	umull	r2, r3, r3, r2
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	469b      	mov	fp, r3
 80063f6:	f04f 0c00 	mov.w	ip, #0
 80063fa:	46d9      	mov	r9, fp
 80063fc:	46e2      	mov	sl, ip
 80063fe:	eb19 0309 	adds.w	r3, r9, r9
 8006402:	eb4a 040a 	adc.w	r4, sl, sl
 8006406:	4699      	mov	r9, r3
 8006408:	46a2      	mov	sl, r4
 800640a:	eb19 090b 	adds.w	r9, r9, fp
 800640e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006412:	f04f 0100 	mov.w	r1, #0
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800641e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006422:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006426:	4689      	mov	r9, r1
 8006428:	4692      	mov	sl, r2
 800642a:	eb1b 0509 	adds.w	r5, fp, r9
 800642e:	eb4c 060a 	adc.w	r6, ip, sl
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4619      	mov	r1, r3
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	f04f 0400 	mov.w	r4, #0
 8006444:	0094      	lsls	r4, r2, #2
 8006446:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800644a:	008b      	lsls	r3, r1, #2
 800644c:	461a      	mov	r2, r3
 800644e:	4623      	mov	r3, r4
 8006450:	4628      	mov	r0, r5
 8006452:	4631      	mov	r1, r6
 8006454:	f7f9 fede 	bl	8000214 <__aeabi_uldivmod>
 8006458:	4603      	mov	r3, r0
 800645a:	460c      	mov	r4, r1
 800645c:	461a      	mov	r2, r3
 800645e:	4b32      	ldr	r3, [pc, #200]	; (8006528 <UART_SetConfig+0x6f4>)
 8006460:	fba3 1302 	umull	r1, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	2164      	movs	r1, #100	; 0x64
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	3332      	adds	r3, #50	; 0x32
 8006472:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <UART_SetConfig+0x6f4>)
 8006474:	fba2 2303 	umull	r2, r3, r2, r3
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800647e:	4498      	add	r8, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	469b      	mov	fp, r3
 8006484:	f04f 0c00 	mov.w	ip, #0
 8006488:	46d9      	mov	r9, fp
 800648a:	46e2      	mov	sl, ip
 800648c:	eb19 0309 	adds.w	r3, r9, r9
 8006490:	eb4a 040a 	adc.w	r4, sl, sl
 8006494:	4699      	mov	r9, r3
 8006496:	46a2      	mov	sl, r4
 8006498:	eb19 090b 	adds.w	r9, r9, fp
 800649c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064a0:	f04f 0100 	mov.w	r1, #0
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064b4:	4689      	mov	r9, r1
 80064b6:	4692      	mov	sl, r2
 80064b8:	eb1b 0509 	adds.w	r5, fp, r9
 80064bc:	eb4c 060a 	adc.w	r6, ip, sl
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4619      	mov	r1, r3
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	f04f 0400 	mov.w	r4, #0
 80064d2:	0094      	lsls	r4, r2, #2
 80064d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064d8:	008b      	lsls	r3, r1, #2
 80064da:	461a      	mov	r2, r3
 80064dc:	4623      	mov	r3, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	4631      	mov	r1, r6
 80064e2:	f7f9 fe97 	bl	8000214 <__aeabi_uldivmod>
 80064e6:	4603      	mov	r3, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	461a      	mov	r2, r3
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <UART_SetConfig+0x6f4>)
 80064ee:	fba3 1302 	umull	r1, r3, r3, r2
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	2164      	movs	r1, #100	; 0x64
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	3332      	adds	r3, #50	; 0x32
 8006500:	4a09      	ldr	r2, [pc, #36]	; (8006528 <UART_SetConfig+0x6f4>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	f003 020f 	and.w	r2, r3, #15
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4442      	add	r2, r8
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	e7ff      	b.n	8006516 <UART_SetConfig+0x6e2>
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	40011000 	.word	0x40011000
 8006524:	40011400 	.word	0x40011400
 8006528:	51eb851f 	.word	0x51eb851f

0800652c <__cxa_pure_virtual>:
 800652c:	b508      	push	{r3, lr}
 800652e:	f000 f80d 	bl	800654c <_ZSt9terminatev>

08006532 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006532:	b508      	push	{r3, lr}
 8006534:	4780      	blx	r0
 8006536:	f000 f80e 	bl	8006556 <abort>
	...

0800653c <_ZSt13get_terminatev>:
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <_ZSt13get_terminatev+0xc>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	f3bf 8f5b 	dmb	ish
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	20000010 	.word	0x20000010

0800654c <_ZSt9terminatev>:
 800654c:	b508      	push	{r3, lr}
 800654e:	f7ff fff5 	bl	800653c <_ZSt13get_terminatev>
 8006552:	f7ff ffee 	bl	8006532 <_ZN10__cxxabiv111__terminateEPFvvE>

08006556 <abort>:
 8006556:	b508      	push	{r3, lr}
 8006558:	2006      	movs	r0, #6
 800655a:	f000 f871 	bl	8006640 <raise>
 800655e:	2001      	movs	r0, #1
 8006560:	f7fc ff9c 	bl	800349c <_exit>

08006564 <__errno>:
 8006564:	4b01      	ldr	r3, [pc, #4]	; (800656c <__errno+0x8>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000014 	.word	0x20000014

08006570 <__libc_init_array>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4e0d      	ldr	r6, [pc, #52]	; (80065a8 <__libc_init_array+0x38>)
 8006574:	4c0d      	ldr	r4, [pc, #52]	; (80065ac <__libc_init_array+0x3c>)
 8006576:	1ba4      	subs	r4, r4, r6
 8006578:	10a4      	asrs	r4, r4, #2
 800657a:	2500      	movs	r5, #0
 800657c:	42a5      	cmp	r5, r4
 800657e:	d109      	bne.n	8006594 <__libc_init_array+0x24>
 8006580:	4e0b      	ldr	r6, [pc, #44]	; (80065b0 <__libc_init_array+0x40>)
 8006582:	4c0c      	ldr	r4, [pc, #48]	; (80065b4 <__libc_init_array+0x44>)
 8006584:	f000 f960 	bl	8006848 <_init>
 8006588:	1ba4      	subs	r4, r4, r6
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	2500      	movs	r5, #0
 800658e:	42a5      	cmp	r5, r4
 8006590:	d105      	bne.n	800659e <__libc_init_array+0x2e>
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006598:	4798      	blx	r3
 800659a:	3501      	adds	r5, #1
 800659c:	e7ee      	b.n	800657c <__libc_init_array+0xc>
 800659e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a2:	4798      	blx	r3
 80065a4:	3501      	adds	r5, #1
 80065a6:	e7f2      	b.n	800658e <__libc_init_array+0x1e>
 80065a8:	08006b9c 	.word	0x08006b9c
 80065ac:	08006b9c 	.word	0x08006b9c
 80065b0:	08006b9c 	.word	0x08006b9c
 80065b4:	08006ba8 	.word	0x08006ba8

080065b8 <memcpy>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	1e43      	subs	r3, r0, #1
 80065bc:	440a      	add	r2, r1
 80065be:	4291      	cmp	r1, r2
 80065c0:	d100      	bne.n	80065c4 <memcpy+0xc>
 80065c2:	bd10      	pop	{r4, pc}
 80065c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065cc:	e7f7      	b.n	80065be <memcpy+0x6>

080065ce <memset>:
 80065ce:	4402      	add	r2, r0
 80065d0:	4603      	mov	r3, r0
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d100      	bne.n	80065d8 <memset+0xa>
 80065d6:	4770      	bx	lr
 80065d8:	f803 1b01 	strb.w	r1, [r3], #1
 80065dc:	e7f9      	b.n	80065d2 <memset+0x4>
	...

080065e0 <realloc>:
 80065e0:	4b02      	ldr	r3, [pc, #8]	; (80065ec <realloc+0xc>)
 80065e2:	460a      	mov	r2, r1
 80065e4:	4601      	mov	r1, r0
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	f000 b8a0 	b.w	800672c <_realloc_r>
 80065ec:	20000014 	.word	0x20000014

080065f0 <_raise_r>:
 80065f0:	291f      	cmp	r1, #31
 80065f2:	b538      	push	{r3, r4, r5, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	d904      	bls.n	8006604 <_raise_r+0x14>
 80065fa:	2316      	movs	r3, #22
 80065fc:	6003      	str	r3, [r0, #0]
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006606:	b112      	cbz	r2, 800660e <_raise_r+0x1e>
 8006608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800660c:	b94b      	cbnz	r3, 8006622 <_raise_r+0x32>
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f830 	bl	8006674 <_getpid_r>
 8006614:	462a      	mov	r2, r5
 8006616:	4601      	mov	r1, r0
 8006618:	4620      	mov	r0, r4
 800661a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661e:	f000 b817 	b.w	8006650 <_kill_r>
 8006622:	2b01      	cmp	r3, #1
 8006624:	d00a      	beq.n	800663c <_raise_r+0x4c>
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	d103      	bne.n	8006632 <_raise_r+0x42>
 800662a:	2316      	movs	r3, #22
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	2001      	movs	r0, #1
 8006630:	e7e7      	b.n	8006602 <_raise_r+0x12>
 8006632:	2400      	movs	r4, #0
 8006634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006638:	4628      	mov	r0, r5
 800663a:	4798      	blx	r3
 800663c:	2000      	movs	r0, #0
 800663e:	e7e0      	b.n	8006602 <_raise_r+0x12>

08006640 <raise>:
 8006640:	4b02      	ldr	r3, [pc, #8]	; (800664c <raise+0xc>)
 8006642:	4601      	mov	r1, r0
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	f7ff bfd3 	b.w	80065f0 <_raise_r>
 800664a:	bf00      	nop
 800664c:	20000014 	.word	0x20000014

08006650 <_kill_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4c07      	ldr	r4, [pc, #28]	; (8006670 <_kill_r+0x20>)
 8006654:	2300      	movs	r3, #0
 8006656:	4605      	mov	r5, r0
 8006658:	4608      	mov	r0, r1
 800665a:	4611      	mov	r1, r2
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	f7fc ff0d 	bl	800347c <_kill>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d102      	bne.n	800666c <_kill_r+0x1c>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	b103      	cbz	r3, 800666c <_kill_r+0x1c>
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	bd38      	pop	{r3, r4, r5, pc}
 800666e:	bf00      	nop
 8006670:	20000bb8 	.word	0x20000bb8

08006674 <_getpid_r>:
 8006674:	f7fc befa 	b.w	800346c <_getpid>

08006678 <_malloc_r>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	1ccd      	adds	r5, r1, #3
 800667c:	f025 0503 	bic.w	r5, r5, #3
 8006680:	3508      	adds	r5, #8
 8006682:	2d0c      	cmp	r5, #12
 8006684:	bf38      	it	cc
 8006686:	250c      	movcc	r5, #12
 8006688:	2d00      	cmp	r5, #0
 800668a:	4606      	mov	r6, r0
 800668c:	db01      	blt.n	8006692 <_malloc_r+0x1a>
 800668e:	42a9      	cmp	r1, r5
 8006690:	d903      	bls.n	800669a <_malloc_r+0x22>
 8006692:	230c      	movs	r3, #12
 8006694:	6033      	str	r3, [r6, #0]
 8006696:	2000      	movs	r0, #0
 8006698:	bd70      	pop	{r4, r5, r6, pc}
 800669a:	f000 f87d 	bl	8006798 <__malloc_lock>
 800669e:	4a21      	ldr	r2, [pc, #132]	; (8006724 <_malloc_r+0xac>)
 80066a0:	6814      	ldr	r4, [r2, #0]
 80066a2:	4621      	mov	r1, r4
 80066a4:	b991      	cbnz	r1, 80066cc <_malloc_r+0x54>
 80066a6:	4c20      	ldr	r4, [pc, #128]	; (8006728 <_malloc_r+0xb0>)
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	b91b      	cbnz	r3, 80066b4 <_malloc_r+0x3c>
 80066ac:	4630      	mov	r0, r6
 80066ae:	f000 f863 	bl	8006778 <_sbrk_r>
 80066b2:	6020      	str	r0, [r4, #0]
 80066b4:	4629      	mov	r1, r5
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 f85e 	bl	8006778 <_sbrk_r>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d124      	bne.n	800670a <_malloc_r+0x92>
 80066c0:	230c      	movs	r3, #12
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 f868 	bl	800679a <__malloc_unlock>
 80066ca:	e7e4      	b.n	8006696 <_malloc_r+0x1e>
 80066cc:	680b      	ldr	r3, [r1, #0]
 80066ce:	1b5b      	subs	r3, r3, r5
 80066d0:	d418      	bmi.n	8006704 <_malloc_r+0x8c>
 80066d2:	2b0b      	cmp	r3, #11
 80066d4:	d90f      	bls.n	80066f6 <_malloc_r+0x7e>
 80066d6:	600b      	str	r3, [r1, #0]
 80066d8:	50cd      	str	r5, [r1, r3]
 80066da:	18cc      	adds	r4, r1, r3
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f85c 	bl	800679a <__malloc_unlock>
 80066e2:	f104 000b 	add.w	r0, r4, #11
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	f020 0007 	bic.w	r0, r0, #7
 80066ec:	1ac3      	subs	r3, r0, r3
 80066ee:	d0d3      	beq.n	8006698 <_malloc_r+0x20>
 80066f0:	425a      	negs	r2, r3
 80066f2:	50e2      	str	r2, [r4, r3]
 80066f4:	e7d0      	b.n	8006698 <_malloc_r+0x20>
 80066f6:	428c      	cmp	r4, r1
 80066f8:	684b      	ldr	r3, [r1, #4]
 80066fa:	bf16      	itet	ne
 80066fc:	6063      	strne	r3, [r4, #4]
 80066fe:	6013      	streq	r3, [r2, #0]
 8006700:	460c      	movne	r4, r1
 8006702:	e7eb      	b.n	80066dc <_malloc_r+0x64>
 8006704:	460c      	mov	r4, r1
 8006706:	6849      	ldr	r1, [r1, #4]
 8006708:	e7cc      	b.n	80066a4 <_malloc_r+0x2c>
 800670a:	1cc4      	adds	r4, r0, #3
 800670c:	f024 0403 	bic.w	r4, r4, #3
 8006710:	42a0      	cmp	r0, r4
 8006712:	d005      	beq.n	8006720 <_malloc_r+0xa8>
 8006714:	1a21      	subs	r1, r4, r0
 8006716:	4630      	mov	r0, r6
 8006718:	f000 f82e 	bl	8006778 <_sbrk_r>
 800671c:	3001      	adds	r0, #1
 800671e:	d0cf      	beq.n	80066c0 <_malloc_r+0x48>
 8006720:	6025      	str	r5, [r4, #0]
 8006722:	e7db      	b.n	80066dc <_malloc_r+0x64>
 8006724:	20000a2c 	.word	0x20000a2c
 8006728:	20000a30 	.word	0x20000a30

0800672c <_realloc_r>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	4607      	mov	r7, r0
 8006730:	4614      	mov	r4, r2
 8006732:	460e      	mov	r6, r1
 8006734:	b921      	cbnz	r1, 8006740 <_realloc_r+0x14>
 8006736:	4611      	mov	r1, r2
 8006738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800673c:	f7ff bf9c 	b.w	8006678 <_malloc_r>
 8006740:	b922      	cbnz	r2, 800674c <_realloc_r+0x20>
 8006742:	f000 f82b 	bl	800679c <_free_r>
 8006746:	4625      	mov	r5, r4
 8006748:	4628      	mov	r0, r5
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674c:	f000 f874 	bl	8006838 <_malloc_usable_size_r>
 8006750:	42a0      	cmp	r0, r4
 8006752:	d20f      	bcs.n	8006774 <_realloc_r+0x48>
 8006754:	4621      	mov	r1, r4
 8006756:	4638      	mov	r0, r7
 8006758:	f7ff ff8e 	bl	8006678 <_malloc_r>
 800675c:	4605      	mov	r5, r0
 800675e:	2800      	cmp	r0, #0
 8006760:	d0f2      	beq.n	8006748 <_realloc_r+0x1c>
 8006762:	4631      	mov	r1, r6
 8006764:	4622      	mov	r2, r4
 8006766:	f7ff ff27 	bl	80065b8 <memcpy>
 800676a:	4631      	mov	r1, r6
 800676c:	4638      	mov	r0, r7
 800676e:	f000 f815 	bl	800679c <_free_r>
 8006772:	e7e9      	b.n	8006748 <_realloc_r+0x1c>
 8006774:	4635      	mov	r5, r6
 8006776:	e7e7      	b.n	8006748 <_realloc_r+0x1c>

08006778 <_sbrk_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4c06      	ldr	r4, [pc, #24]	; (8006794 <_sbrk_r+0x1c>)
 800677c:	2300      	movs	r3, #0
 800677e:	4605      	mov	r5, r0
 8006780:	4608      	mov	r0, r1
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	f7fc fe94 	bl	80034b0 <_sbrk>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_sbrk_r+0x1a>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	b103      	cbz	r3, 8006792 <_sbrk_r+0x1a>
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	20000bb8 	.word	0x20000bb8

08006798 <__malloc_lock>:
 8006798:	4770      	bx	lr

0800679a <__malloc_unlock>:
 800679a:	4770      	bx	lr

0800679c <_free_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4605      	mov	r5, r0
 80067a0:	2900      	cmp	r1, #0
 80067a2:	d045      	beq.n	8006830 <_free_r+0x94>
 80067a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a8:	1f0c      	subs	r4, r1, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bfb8      	it	lt
 80067ae:	18e4      	addlt	r4, r4, r3
 80067b0:	f7ff fff2 	bl	8006798 <__malloc_lock>
 80067b4:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <_free_r+0x98>)
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	4610      	mov	r0, r2
 80067ba:	b933      	cbnz	r3, 80067ca <_free_r+0x2e>
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	6014      	str	r4, [r2, #0]
 80067c0:	4628      	mov	r0, r5
 80067c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c6:	f7ff bfe8 	b.w	800679a <__malloc_unlock>
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	d90c      	bls.n	80067e8 <_free_r+0x4c>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	1862      	adds	r2, r4, r1
 80067d2:	4293      	cmp	r3, r2
 80067d4:	bf04      	itt	eq
 80067d6:	681a      	ldreq	r2, [r3, #0]
 80067d8:	685b      	ldreq	r3, [r3, #4]
 80067da:	6063      	str	r3, [r4, #4]
 80067dc:	bf04      	itt	eq
 80067de:	1852      	addeq	r2, r2, r1
 80067e0:	6022      	streq	r2, [r4, #0]
 80067e2:	6004      	str	r4, [r0, #0]
 80067e4:	e7ec      	b.n	80067c0 <_free_r+0x24>
 80067e6:	4613      	mov	r3, r2
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	b10a      	cbz	r2, 80067f0 <_free_r+0x54>
 80067ec:	42a2      	cmp	r2, r4
 80067ee:	d9fa      	bls.n	80067e6 <_free_r+0x4a>
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	1858      	adds	r0, r3, r1
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d10b      	bne.n	8006810 <_free_r+0x74>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	4401      	add	r1, r0
 80067fc:	1858      	adds	r0, r3, r1
 80067fe:	4282      	cmp	r2, r0
 8006800:	6019      	str	r1, [r3, #0]
 8006802:	d1dd      	bne.n	80067c0 <_free_r+0x24>
 8006804:	6810      	ldr	r0, [r2, #0]
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	605a      	str	r2, [r3, #4]
 800680a:	4401      	add	r1, r0
 800680c:	6019      	str	r1, [r3, #0]
 800680e:	e7d7      	b.n	80067c0 <_free_r+0x24>
 8006810:	d902      	bls.n	8006818 <_free_r+0x7c>
 8006812:	230c      	movs	r3, #12
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	e7d3      	b.n	80067c0 <_free_r+0x24>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428a      	cmp	r2, r1
 800681e:	bf04      	itt	eq
 8006820:	6811      	ldreq	r1, [r2, #0]
 8006822:	6852      	ldreq	r2, [r2, #4]
 8006824:	6062      	str	r2, [r4, #4]
 8006826:	bf04      	itt	eq
 8006828:	1809      	addeq	r1, r1, r0
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	605c      	str	r4, [r3, #4]
 800682e:	e7c7      	b.n	80067c0 <_free_r+0x24>
 8006830:	bd38      	pop	{r3, r4, r5, pc}
 8006832:	bf00      	nop
 8006834:	20000a2c 	.word	0x20000a2c

08006838 <_malloc_usable_size_r>:
 8006838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800683c:	1f18      	subs	r0, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfbc      	itt	lt
 8006842:	580b      	ldrlt	r3, [r1, r0]
 8006844:	18c0      	addlt	r0, r0, r3
 8006846:	4770      	bx	lr

08006848 <_init>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr

08006854 <_fini>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr
