
multi_servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007500  08007500  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000074  08007584  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b78  08007584  00020b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001449e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c92  00000000  00000000  00034542  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  000371d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  000381b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259ab  00000000  00000000  00039078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf06  00000000  00000000  0005ea23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5e50  00000000  00000000  0006a929  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004768  00000000  00000000  001407f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080071a8 	.word	0x080071a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	080071a8 	.word	0x080071a8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	; 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000352:	f1a4 0401 	sub.w	r4, r4, #1
 8000356:	d1e9      	bne.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_uldivmod>:
 8000a00:	b953      	cbnz	r3, 8000a18 <__aeabi_uldivmod+0x18>
 8000a02:	b94a      	cbnz	r2, 8000a18 <__aeabi_uldivmod+0x18>
 8000a04:	2900      	cmp	r1, #0
 8000a06:	bf08      	it	eq
 8000a08:	2800      	cmpeq	r0, #0
 8000a0a:	bf1c      	itt	ne
 8000a0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a14:	f000 b972 	b.w	8000cfc <__aeabi_idiv0>
 8000a18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a20:	f000 f806 	bl	8000a30 <__udivmoddi4>
 8000a24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <__udivmoddi4>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	9e08      	ldr	r6, [sp, #32]
 8000a36:	4604      	mov	r4, r0
 8000a38:	4688      	mov	r8, r1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d14b      	bne.n	8000ad6 <__udivmoddi4+0xa6>
 8000a3e:	428a      	cmp	r2, r1
 8000a40:	4615      	mov	r5, r2
 8000a42:	d967      	bls.n	8000b14 <__udivmoddi4+0xe4>
 8000a44:	fab2 f282 	clz	r2, r2
 8000a48:	b14a      	cbz	r2, 8000a5e <__udivmoddi4+0x2e>
 8000a4a:	f1c2 0720 	rsb	r7, r2, #32
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	fa20 f707 	lsr.w	r7, r0, r7
 8000a56:	4095      	lsls	r5, r2
 8000a58:	ea47 0803 	orr.w	r8, r7, r3
 8000a5c:	4094      	lsls	r4, r2
 8000a5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a62:	0c23      	lsrs	r3, r4, #16
 8000a64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a68:	fa1f fc85 	uxth.w	ip, r5
 8000a6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a74:	fb07 f10c 	mul.w	r1, r7, ip
 8000a78:	4299      	cmp	r1, r3
 8000a7a:	d909      	bls.n	8000a90 <__udivmoddi4+0x60>
 8000a7c:	18eb      	adds	r3, r5, r3
 8000a7e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a82:	f080 811b 	bcs.w	8000cbc <__udivmoddi4+0x28c>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 8118 	bls.w	8000cbc <__udivmoddi4+0x28c>
 8000a8c:	3f02      	subs	r7, #2
 8000a8e:	442b      	add	r3, r5
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa4:	45a4      	cmp	ip, r4
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x8c>
 8000aa8:	192c      	adds	r4, r5, r4
 8000aaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aae:	f080 8107 	bcs.w	8000cc0 <__udivmoddi4+0x290>
 8000ab2:	45a4      	cmp	ip, r4
 8000ab4:	f240 8104 	bls.w	8000cc0 <__udivmoddi4+0x290>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	442c      	add	r4, r5
 8000abc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac0:	eba4 040c 	sub.w	r4, r4, ip
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	b11e      	cbz	r6, 8000ad0 <__udivmoddi4+0xa0>
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	2300      	movs	r3, #0
 8000acc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad0:	4639      	mov	r1, r7
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0xbe>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	f000 80eb 	beq.w	8000cb6 <__udivmoddi4+0x286>
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ae6:	4638      	mov	r0, r7
 8000ae8:	4639      	mov	r1, r7
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	fab3 f783 	clz	r7, r3
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d147      	bne.n	8000b86 <__udivmoddi4+0x156>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xd0>
 8000afa:	4282      	cmp	r2, r0
 8000afc:	f200 80fa 	bhi.w	8000cf4 <__udivmoddi4+0x2c4>
 8000b00:	1a84      	subs	r4, r0, r2
 8000b02:	eb61 0303 	sbc.w	r3, r1, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	4698      	mov	r8, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d0e0      	beq.n	8000ad0 <__udivmoddi4+0xa0>
 8000b0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000b12:	e7dd      	b.n	8000ad0 <__udivmoddi4+0xa0>
 8000b14:	b902      	cbnz	r2, 8000b18 <__udivmoddi4+0xe8>
 8000b16:	deff      	udf	#255	; 0xff
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f040 808f 	bne.w	8000c40 <__udivmoddi4+0x210>
 8000b22:	1b49      	subs	r1, r1, r5
 8000b24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b28:	fa1f f885 	uxth.w	r8, r5
 8000b2c:	2701      	movs	r7, #1
 8000b2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b32:	0c23      	lsrs	r3, r4, #16
 8000b34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d907      	bls.n	8000b54 <__udivmoddi4+0x124>
 8000b44:	18eb      	adds	r3, r5, r3
 8000b46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x122>
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	f200 80cd 	bhi.w	8000cec <__udivmoddi4+0x2bc>
 8000b52:	4684      	mov	ip, r0
 8000b54:	1a59      	subs	r1, r3, r1
 8000b56:	b2a3      	uxth	r3, r4
 8000b58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b64:	fb08 f800 	mul.w	r8, r8, r0
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	d907      	bls.n	8000b7c <__udivmoddi4+0x14c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x14a>
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	f200 80b6 	bhi.w	8000ce6 <__udivmoddi4+0x2b6>
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	eba4 0408 	sub.w	r4, r4, r8
 8000b80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b84:	e79f      	b.n	8000ac6 <__udivmoddi4+0x96>
 8000b86:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8a:	40bb      	lsls	r3, r7
 8000b8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b94:	fa01 f407 	lsl.w	r4, r1, r7
 8000b98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba4:	4325      	orrs	r5, r4
 8000ba6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000baa:	0c2c      	lsrs	r4, r5, #16
 8000bac:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb0:	fa1f fa8e 	uxth.w	sl, lr
 8000bb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000bc6:	d90b      	bls.n	8000be0 <__udivmoddi4+0x1b0>
 8000bc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000bcc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd0:	f080 8087 	bcs.w	8000ce2 <__udivmoddi4+0x2b2>
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	f240 8084 	bls.w	8000ce2 <__udivmoddi4+0x2b2>
 8000bda:	f1a9 0902 	sub.w	r9, r9, #2
 8000bde:	4473      	add	r3, lr
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	b2ad      	uxth	r5, r5
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf4:	45a2      	cmp	sl, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1da>
 8000bf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c00:	d26b      	bcs.n	8000cda <__udivmoddi4+0x2aa>
 8000c02:	45a2      	cmp	sl, r4
 8000c04:	d969      	bls.n	8000cda <__udivmoddi4+0x2aa>
 8000c06:	3802      	subs	r0, #2
 8000c08:	4474      	add	r4, lr
 8000c0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c12:	eba4 040a 	sub.w	r4, r4, sl
 8000c16:	454c      	cmp	r4, r9
 8000c18:	46c2      	mov	sl, r8
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	d354      	bcc.n	8000cc8 <__udivmoddi4+0x298>
 8000c1e:	d051      	beq.n	8000cc4 <__udivmoddi4+0x294>
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d069      	beq.n	8000cf8 <__udivmoddi4+0x2c8>
 8000c24:	ebb1 050a 	subs.w	r5, r1, sl
 8000c28:	eb64 0403 	sbc.w	r4, r4, r3
 8000c2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c30:	40fd      	lsrs	r5, r7
 8000c32:	40fc      	lsrs	r4, r7
 8000c34:	ea4c 0505 	orr.w	r5, ip, r5
 8000c38:	e9c6 5400 	strd	r5, r4, [r6]
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e747      	b.n	8000ad0 <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f703 	lsr.w	r7, r0, r3
 8000c48:	4095      	lsls	r5, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c56:	4338      	orrs	r0, r7
 8000c58:	0c01      	lsrs	r1, r0, #16
 8000c5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c5e:	fa1f f885 	uxth.w	r8, r5
 8000c62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6a:	fb07 f308 	mul.w	r3, r7, r8
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	fa04 f402 	lsl.w	r4, r4, r2
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x256>
 8000c76:	1869      	adds	r1, r5, r1
 8000c78:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c7c:	d22f      	bcs.n	8000cde <__udivmoddi4+0x2ae>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d92d      	bls.n	8000cde <__udivmoddi4+0x2ae>
 8000c82:	3f02      	subs	r7, #2
 8000c84:	4429      	add	r1, r5
 8000c86:	1acb      	subs	r3, r1, r3
 8000c88:	b281      	uxth	r1, r0
 8000c8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb00 f308 	mul.w	r3, r0, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x27e>
 8000c9e:	1869      	adds	r1, r5, r1
 8000ca0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca4:	d217      	bcs.n	8000cd6 <__udivmoddi4+0x2a6>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d915      	bls.n	8000cd6 <__udivmoddi4+0x2a6>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4429      	add	r1, r5
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb4:	e73b      	b.n	8000b2e <__udivmoddi4+0xfe>
 8000cb6:	4637      	mov	r7, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e709      	b.n	8000ad0 <__udivmoddi4+0xa0>
 8000cbc:	4607      	mov	r7, r0
 8000cbe:	e6e7      	b.n	8000a90 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fb      	b.n	8000abc <__udivmoddi4+0x8c>
 8000cc4:	4541      	cmp	r1, r8
 8000cc6:	d2ab      	bcs.n	8000c20 <__udivmoddi4+0x1f0>
 8000cc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ccc:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	e7a4      	b.n	8000c20 <__udivmoddi4+0x1f0>
 8000cd6:	4660      	mov	r0, ip
 8000cd8:	e7e9      	b.n	8000cae <__udivmoddi4+0x27e>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	e795      	b.n	8000c0a <__udivmoddi4+0x1da>
 8000cde:	4667      	mov	r7, ip
 8000ce0:	e7d1      	b.n	8000c86 <__udivmoddi4+0x256>
 8000ce2:	4681      	mov	r9, r0
 8000ce4:	e77c      	b.n	8000be0 <__udivmoddi4+0x1b0>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	442c      	add	r4, r5
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0x14c>
 8000cec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf0:	442b      	add	r3, r5
 8000cf2:	e72f      	b.n	8000b54 <__udivmoddi4+0x124>
 8000cf4:	4638      	mov	r0, r7
 8000cf6:	e708      	b.n	8000b0a <__udivmoddi4+0xda>
 8000cf8:	4637      	mov	r7, r6
 8000cfa:	e6e9      	b.n	8000ad0 <__udivmoddi4+0xa0>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart2);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2e:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f91f 	bl	8000f8c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000d56:	b480      	push	{r7}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d72:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000d7a:	89fa      	ldrh	r2, [r7, #14]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d102      	bne.n	8000d86 <_ZN14BufferedSerial4readEv+0x30>
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d84:	e016      	b.n	8000db4 <_ZN14BufferedSerial4readEv+0x5e>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

  return c;
 8000db2:	68bb      	ldr	r3, [r7, #8]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ddc:	da25      	bge.n	8000e2a <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000de4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	3304      	adds	r3, #4
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 f890 	bl	8006f18 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d921      	bls.n	8000e60 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8000e28:	e01a      	b.n	8000e60 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 f86f 	bl	8006f18 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d905      	bls.n	8000e56 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_head = length;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  }

  // Send data:
  flush_tx_buffer();
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 f805 	bl	8000e70 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00f      	beq.n	8000ea2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d107      	bne.n	8000ea2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
     tx_tail = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b20      	cmp	r3, #32
 8000eae:	d10b      	bne.n	8000ec8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d003      	beq.n	8000ec8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000ec0:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d156      	bne.n	8000f80 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d103      	bne.n	8000ef0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d21c      	bcs.n	8000f3a <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	3304      	adds	r3, #4
 8000f24:	89ba      	ldrh	r2, [r7, #12]
 8000f26:	4619      	mov	r1, r3
 8000f28:	f005 f830 	bl	8005f8c <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 8000f38:	e01e      	b.n	8000f78 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8b3 240a 	ldrh.w	r2, [r3, #1034]	; 0x40a
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8000f54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f005 f813 	bl	8005f8c <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
    tx_tail = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  }

  mutex = false;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e000      	b.n	8000f82 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000f80:	bf00      	nop
}
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000049c 	.word	0x2000049c

08000f8c <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f005 f85f 	bl	8006064 <HAL_UART_Receive_DMA>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_UART_TxCpltCallback+0x34>)
 8000fd6:	f7ff ffea 	bl	8000fae <_ZN14BufferedSerial10get_handleEv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429c      	cmp	r4, r3
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <HAL_UART_TxCpltCallback+0x34>)
 8000fee:	f7ff ff3f 	bl	8000e70 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000090 	.word	0x20000090

08001000 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_UART_RxCpltCallback+0x18>)
 800100a:	f7ff ffbf 	bl	8000f8c <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000090 	.word	0x20000090

0800101c <_Z41__static_initialization_and_destruction_0ii>:
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d108      	bne.n	800103e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	4293      	cmp	r3, r2
 8001034:	d103      	bne.n	800103e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart2);
 8001036:	4904      	ldr	r1, [pc, #16]	; (8001048 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800103a:	f7ff fe61 	bl	8000d00 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000b30 	.word	0x20000b30
 800104c:	20000090 	.word	0x20000090

08001050 <_GLOBAL__sub_I_buff_serial>:
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
 8001054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ffdf 	bl	800101c <_Z41__static_initialization_and_destruction_0ii>
 800105e:	bd80      	pop	{r7, pc}

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f002 fd76 	bl	8003b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f80e 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 f986 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8001070:	f000 f95c 	bl	800132c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001074:	f000 f930 	bl	80012d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001078:	f000 f866 	bl	8001148 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  setup();
 800107c:	f001 fc86 	bl	800298c <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	loop();
 8001080:	f001 fca6 	bl	80029d0 <loop>
 8001084:	e7fc      	b.n	8001080 <main+0x20>
	...

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2234      	movs	r2, #52	; 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f005 ff49 	bl	8006f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <SystemClock_Config+0xb8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <SystemClock_Config+0xb8>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <SystemClock_Config+0xb8>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <SystemClock_Config+0xbc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d4:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <SystemClock_Config+0xbc>)
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <SystemClock_Config+0xbc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f0:	2310      	movs	r3, #16
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fea3 	bl	8004e48 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001108:	f000 f9a8 	bl	800145c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fbd4 	bl	80048d4 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001132:	f000 f993 	bl	800145c <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	; 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2220      	movs	r2, #32
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f005 fed4 	bl	8006f2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001186:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <MX_TIM1_Init+0x188>)
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <MX_TIM1_Init+0x18c>)
 800118a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <MX_TIM1_Init+0x188>)
 800118e:	2207      	movs	r2, #7
 8001190:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <MX_TIM1_Init+0x188>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <MX_TIM1_Init+0x188>)
 800119a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800119e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a6:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b2:	4847      	ldr	r0, [pc, #284]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011b4:	f004 f8a2 	bl	80052fc <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011be:	f000 f94d 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011cc:	4619      	mov	r1, r3
 80011ce:	4840      	ldr	r0, [pc, #256]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011d0:	f004 f9f8 	bl	80055c4 <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 f93f 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011de:	483c      	ldr	r0, [pc, #240]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011e0:	f004 f8b7 	bl	8005352 <HAL_TIM_PWM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ea:	f000 f937 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011fa:	4619      	mov	r1, r3
 80011fc:	4834      	ldr	r0, [pc, #208]	; (80012d0 <MX_TIM1_Init+0x188>)
 80011fe:	f004 fda9 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001208:	f000 f928 	bl	800145c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001210:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4827      	ldr	r0, [pc, #156]	; (80012d0 <MX_TIM1_Init+0x188>)
 8001234:	f004 f900 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800123e:	f000 f90d 	bl	800145c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	2204      	movs	r2, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4820      	ldr	r0, [pc, #128]	; (80012d0 <MX_TIM1_Init+0x188>)
 8001250:	f004 f8f2 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800125a:	f000 f8ff 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	2208      	movs	r2, #8
 8001264:	4619      	mov	r1, r3
 8001266:	481a      	ldr	r0, [pc, #104]	; (80012d0 <MX_TIM1_Init+0x188>)
 8001268:	f004 f8e6 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001272:	f000 f8f3 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	220c      	movs	r2, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM1_Init+0x188>)
 8001280:	f004 f8da 	bl	8005438 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800128a:	f000 f8e7 	bl	800145c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM1_Init+0x188>)
 80012b2:	f004 fdcb 	bl	8005e4c <HAL_TIMEx_ConfigBreakDeadTime>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80012bc:	f000 f8ce 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM1_Init+0x188>)
 80012c2:	f002 fa4b 	bl	800375c <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3758      	adds	r7, #88	; 0x58
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000af0 	.word	0x20000af0
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART2_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART2_UART_Init+0x4c>)
 8001310:	f004 fdee 	bl	8005ef0 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f89f 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000b30 	.word	0x20000b30
 8001328:	40004400 	.word	0x40004400

0800132c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_DMA_Init+0x4c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <MX_DMA_Init+0x4c>)
 800133c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_DMA_Init+0x4c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2010      	movs	r0, #16
 8001354:	f002 fd4b 	bl	8003dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001358:	2010      	movs	r0, #16
 800135a:	f002 fd64 	bl	8003e26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2011      	movs	r0, #17
 8001364:	f002 fd43 	bl	8003dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001368:	2011      	movs	r0, #17
 800136a:	f002 fd5c 	bl	8003e26 <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a2c      	ldr	r2, [pc, #176]	; (800144c <MX_GPIO_Init+0xd0>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_GPIO_Init+0xd0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a25      	ldr	r2, [pc, #148]	; (800144c <MX_GPIO_Init+0xd0>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_GPIO_Init+0xd0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <MX_GPIO_Init+0xd0>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_GPIO_Init+0xd0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <MX_GPIO_Init+0xd0>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2120      	movs	r1, #32
 8001406:	4812      	ldr	r0, [pc, #72]	; (8001450 <MX_GPIO_Init+0xd4>)
 8001408:	f003 fa4a 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_GPIO_Init+0xd8>)
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_GPIO_Init+0xdc>)
 8001422:	f003 f8ab 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001426:	2320      	movs	r3, #32
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_GPIO_Init+0xd4>)
 800143e:	f003 f89d 	bl	800457c <HAL_GPIO_Init>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	10210000 	.word	0x10210000
 8001458:	40020800 	.word	0x40020800

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001462:	e7fe      	b.n	8001462 <Error_Handler+0x6>

08001464 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN13STM32HardwareC1Ev+0x1c>)
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000090 	.word	0x20000090

08001484 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc55 	bl	8000d40 <_ZN14BufferedSerial4initEv>
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc53 	bl	8000d56 <_ZN14BufferedSerial4readEv>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc76 	bl	8000dc0 <_ZN14BufferedSerial5writeEPKhi>
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	f002 fb9c 	bl	8003c20 <HAL_GetTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <_ZN3ros3MsgC1Ev+0x1c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	080074c8 	.word	0x080074c8

08001534 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
      data()
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ffe8 	bl	8001514 <_ZN3ros3MsgC1Ev>
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3304      	adds	r3, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ffcf 	bl	80014f2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	080074b0 	.word	0x080074b0

08001564 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	b2ca      	uxtb	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0a19      	lsrs	r1, r3, #8
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	0c19      	lsrs	r1, r3, #16
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3302      	adds	r3, #2
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	b2ca      	uxtb	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0e19      	lsrs	r1, r3, #24
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3303      	adds	r3, #3
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3304      	adds	r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	0a19      	lsrs	r1, r3, #8
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	0c19      	lsrs	r1, r3, #16
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3302      	adds	r3, #2
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	0e19      	lsrs	r1, r3, #24
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3303      	adds	r3, #3
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3304      	adds	r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
      return offset;
 8001606:	68fb      	ldr	r3, [r7, #12]
    }
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	440b      	add	r3, r1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3302      	adds	r3, #2
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	440b      	add	r3, r1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3303      	adds	r3, #3
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	440b      	add	r3, r1
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	440b      	add	r3, r1
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3302      	adds	r3, #2
 80016a4:	6839      	ldr	r1, [r7, #0]
 80016a6:	440b      	add	r3, r1
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3303      	adds	r3, #3
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	440b      	add	r3, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3304      	adds	r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
     return offset;
 80016ce:	68fb      	ldr	r3, [r7, #12]
    }
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	080071c0 	.word	0x080071c0

080016f8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	080071d0 	.word	0x080071d0

08001714 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fef8 	bl	8001514 <_ZN3ros3MsgC1Ev>
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	809a      	strh	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
    {
    }
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	08007498 	.word	0x08007498
 8001758:	080071f4 	.word	0x080071f4

0800175c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8899      	ldrh	r1, [r3, #4]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	b2ca      	uxtb	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	889b      	ldrh	r3, [r3, #4]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b299      	uxth	r1, r3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	3301      	adds	r3, #1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3302      	adds	r3, #2
 8001790:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fd34 	bl	8000204 <strlen>
 800179c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	69b9      	ldr	r1, [r7, #24]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f9b2 	bl	8002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	3304      	adds	r3, #4
 80017b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	18d0      	adds	r0, r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4619      	mov	r1, r3
 80017c0:	f005 fbaa 	bl	8006f18 <memcpy>
      offset += length_topic_name;
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4413      	add	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fd17 	bl	8000204 <strlen>
 80017d6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	6979      	ldr	r1, [r7, #20]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 f995 	bl	8002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	18d0      	adds	r0, r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f005 fb8d 	bl	8006f18 <memcpy>
      offset += length_message_type;
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4413      	add	r3, r2
 8001804:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fcfa 	bl	8000204 <strlen>
 8001810:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	4618      	mov	r0, r3
 800181c:	f001 f978 	bl	8002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3304      	adds	r3, #4
 8001824:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	18d0      	adds	r0, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4619      	mov	r1, r3
 8001834:	f005 fb70 	bl	8006f18 <memcpy>
      offset += length_md5sum;
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4413      	add	r3, r2
 800183e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	0a19      	lsrs	r1, r3, #8
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	0c19      	lsrs	r1, r3, #16
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3302      	adds	r3, #2
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	4413      	add	r3, r2
 800186e:	b2ca      	uxtb	r2, r1
 8001870:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0e19      	lsrs	r1, r3, #24
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3303      	adds	r3, #3
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	4413      	add	r3, r2
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	61fb      	str	r3, [r7, #28]
      return offset;
 8001888:	69fb      	ldr	r3, [r7, #28]
    }
 800188a:	4618      	mov	r0, r3
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001892:	b580      	push	{r7, lr}
 8001894:	b08a      	sub	sp, #40	; 0x28
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	3301      	adds	r3, #1
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	440b      	add	r3, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3302      	adds	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	441a      	add	r2, r3
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f934 	bl	8002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	3304      	adds	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4413      	add	r3, r2
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d20c      	bcs.n	8001914 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	441a      	add	r2, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3b01      	subs	r3, #1
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	440b      	add	r3, r1
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3301      	adds	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e7ec      	b.n	80018ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	3b01      	subs	r3, #1
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	3b01      	subs	r3, #1
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	441a      	add	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4413      	add	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	441a      	add	r2, r3
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f001 f901 	bl	8002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3304      	adds	r3, #4
 800194e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4413      	add	r3, r2
 800195a:	6a3a      	ldr	r2, [r7, #32]
 800195c:	429a      	cmp	r2, r3
 800195e:	d20c      	bcs.n	800197a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	441a      	add	r2, r3
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	3b01      	subs	r3, #1
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	440b      	add	r3, r1
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	3301      	adds	r3, #1
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	e7ec      	b.n	8001954 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	3b01      	subs	r3, #1
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	3b01      	subs	r3, #1
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	441a      	add	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4413      	add	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	441a      	add	r2, r3
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 f8ce 	bl	8002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	3304      	adds	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d20c      	bcs.n	80019e0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	441a      	add	r2, r3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	440b      	add	r3, r1
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e7ec      	b.n	80019ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	3b01      	subs	r3, #1
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	441a      	add	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4413      	add	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	440a      	add	r2, r1
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	440b      	add	r3, r1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	440b      	add	r3, r1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	3303      	adds	r3, #3
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	440b      	add	r3, r1
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3304      	adds	r3, #4
 8001a56:	61bb      	str	r3, [r7, #24]
     return offset;
 8001a58:	69bb      	ldr	r3, [r7, #24]
    }
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	080071f8 	.word	0x080071f8

08001a80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	08007214 	.word	0x08007214

08001a9c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd34 	bl	8001514 <_ZN3ros3MsgC1Ev>
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	711a      	strb	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001abc:	609a      	str	r2, [r3, #8]
    {
    }
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08007480 	.word	0x08007480
 8001acc:	080071f4 	.word	0x080071f4

08001ad0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	7912      	ldrb	r2, [r2, #4]
 8001ae8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fb85 	bl	8000204 <strlen>
 8001afa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 f803 	bl	8002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	18d0      	adds	r0, r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f005 f9fb 	bl	8006f18 <memcpy>
      offset += length_msg;
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    }
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	3301      	adds	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	441a      	add	r2, r3
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fff3 	bl	8002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d20c      	bcs.n	8001b96 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	441a      	add	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	440b      	add	r3, r1
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e7ec      	b.n	8001b70 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	441a      	add	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
     return offset;
 8001bba:	693b      	ldr	r3, [r7, #16]
    }
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	08007238 	.word	0x08007238

08001be0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	0800724c 	.word	0x0800724c

08001bfc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fc84 	bl	8001514 <_ZN3ros3MsgC1Ev>
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	08007468 	.word	0x08007468

08001c44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0a19      	lsrs	r1, r3, #8
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0c19      	lsrs	r1, r3, #16
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2ca      	uxtb	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0e19      	lsrs	r1, r3, #24
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	3304      	adds	r3, #4
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d22b      	bcs.n	8001d02 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001cb8:	6939      	ldr	r1, [r7, #16]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b2ca      	uxtb	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	0a19      	lsrs	r1, r3, #8
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	3301      	adds	r3, #1
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	b2ca      	uxtb	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	0c19      	lsrs	r1, r3, #16
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	3302      	adds	r3, #2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	b2ca      	uxtb	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	0e19      	lsrs	r1, r3, #24
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3303      	adds	r3, #3
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2ca      	uxtb	r2, r1
 8001cf2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	e7ce      	b.n	8001ca0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6919      	ldr	r1, [r3, #16]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	0a19      	lsrs	r1, r3, #8
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3301      	adds	r3, #1
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	0c19      	lsrs	r1, r3, #16
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	0e19      	lsrs	r1, r3, #24
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3304      	adds	r3, #4
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d22b      	bcs.n	8001db2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	0a19      	lsrs	r1, r3, #8
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	b2ca      	uxtb	r2, r1
 8001d82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	0c19      	lsrs	r1, r3, #16
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b2ca      	uxtb	r2, r1
 8001d92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0e19      	lsrs	r1, r3, #24
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b2ca      	uxtb	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3304      	adds	r3, #4
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	e7ce      	b.n	8001d50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69d9      	ldr	r1, [r3, #28]
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2ca      	uxtb	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	0a19      	lsrs	r1, r3, #8
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	0c19      	lsrs	r1, r3, #16
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	3302      	adds	r3, #2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	b2ca      	uxtb	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	0e19      	lsrs	r1, r3, #24
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	3303      	adds	r3, #3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	3304      	adds	r3, #4
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d228      	bcs.n	8001e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe f9f4 	bl	8000204 <strlen>
 8001e1c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	6979      	ldr	r1, [r7, #20]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fe72 	bl	8002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3304      	adds	r3, #4
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	18d0      	adds	r0, r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4619      	mov	r1, r3
 8001e48:	f005 f866 	bl	8006f18 <memcpy>
      offset += length_stringsi;
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4413      	add	r3, r2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e7d1      	b.n	8001e00 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b08e      	sub	sp, #56	; 0x38
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	3301      	adds	r3, #1
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	6a3a      	ldr	r2, [r7, #32]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	3302      	adds	r3, #2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	6a3a      	ldr	r2, [r7, #32]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	6a3a      	ldr	r2, [r7, #32]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d90a      	bls.n	8001eda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f005 f836 	bl	8006f40 <realloc>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d236      	bcs.n	8001f5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	440a      	add	r2, r1
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	440b      	add	r3, r1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	3302      	adds	r3, #2
 8001f18:	6839      	ldr	r1, [r7, #0]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	3303      	adds	r3, #3
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	3304      	adds	r3, #4
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	3301      	adds	r3, #1
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5a:	e7c3      	b.n	8001ee4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3301      	adds	r3, #1
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d90a      	bls.n	8001fc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f004 ffc2 	bl	8006f40 <realloc>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d236      	bcs.n	8002044 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	440a      	add	r2, r1
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	3301      	adds	r3, #1
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	440b      	add	r3, r1
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3302      	adds	r3, #2
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	440b      	add	r3, r1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	3303      	adds	r3, #3
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	440b      	add	r3, r1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	3304      	adds	r3, #4
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	3214      	adds	r2, #20
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	3301      	adds	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	e7c3      	b.n	8001fcc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	3301      	adds	r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	3302      	adds	r3, #2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	3303      	adds	r3, #3
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	3304      	adds	r3, #4
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	429a      	cmp	r2, r3
 8002092:	d90a      	bls.n	80020aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f004 ff4e 	bl	8006f40 <realloc>
 80020a4:	4602      	mov	r2, r0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d23f      	bcs.n	800213e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	441a      	add	r2, r3
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fd3e 	bl	8002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	3304      	adds	r3, #4
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d20c      	bcs.n	8002100 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	441a      	add	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	440b      	add	r3, r1
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	3301      	adds	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e7ec      	b.n	80020da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	3b01      	subs	r3, #1
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	3b01      	subs	r3, #1
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	441a      	add	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800211c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	3220      	adds	r2, #32
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	3301      	adds	r3, #1
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
 800213c:	e7ba      	b.n	80020b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002140:	4618      	mov	r0, r3
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	080073a4 	.word	0x080073a4

08002164 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	08007270 	.word	0x08007270

08002180 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
  }
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f9b6 	bl	8001514 <_ZN3ros3MsgC1Ev>
 80021a8:	4a08      	ldr	r2, [pc, #32]	; (80021cc <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
    {
    }
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	08007424 	.word	0x08007424
 80021d0:	080071f4 	.word	0x080071f4

080021d4 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f80c 	bl	8000204 <strlen>
 80021ec:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fc8a 	bl	8002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	18d0      	adds	r0, r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4619      	mov	r1, r3
 8002210:	f004 fe82 	bl	8006f18 <memcpy>
      offset += length_label;
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4413      	add	r3, r2
 8002226:	b2ca      	uxtb	r2, r1
 8002228:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a19      	lsrs	r1, r3, #8
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	4413      	add	r3, r2
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	0c19      	lsrs	r1, r3, #16
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3302      	adds	r3, #2
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4413      	add	r3, r2
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0e19      	lsrs	r1, r3, #24
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3303      	adds	r3, #3
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	b2ca      	uxtb	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3304      	adds	r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	4413      	add	r3, r2
 8002270:	b2ca      	uxtb	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a19      	lsrs	r1, r3, #8
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	0c19      	lsrs	r1, r3, #16
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3302      	adds	r3, #2
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4413      	add	r3, r2
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0e19      	lsrs	r1, r3, #24
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3303      	adds	r3, #3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
      return offset;
 80022b0:	68fb      	ldr	r3, [r7, #12]
    }
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	441a      	add	r2, r3
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fc39 	bl	8002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3304      	adds	r3, #4
 80022de:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d20c      	bcs.n	800230a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	441a      	add	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	440b      	add	r3, r1
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e7ec      	b.n	80022e4 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	3b01      	subs	r3, #1
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	3b01      	subs	r3, #1
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3301      	adds	r3, #1
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	440b      	add	r3, r1
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3302      	adds	r3, #2
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	440b      	add	r3, r1
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	3303      	adds	r3, #3
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	440b      	add	r3, r1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	061b      	lsls	r3, r3, #24
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3304      	adds	r3, #4
 8002382:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	3301      	adds	r3, #1
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	440b      	add	r3, r1
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	3302      	adds	r3, #2
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	440b      	add	r3, r1
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	041b      	lsls	r3, r3, #16
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	3303      	adds	r3, #3
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	440b      	add	r3, r1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	3304      	adds	r3, #4
 80023d8:	613b      	str	r3, [r7, #16]
     return offset;
 80023da:	693b      	ldr	r3, [r7, #16]
    }
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	08007294 	.word	0x08007294

08002400 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	080072b4 	.word	0x080072b4

0800241c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f874 	bl	8001514 <_ZN3ros3MsgC1Ev>
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3308      	adds	r3, #8
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff feab 	bl	8002198 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    {
    }
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800740c 	.word	0x0800740c

0800245c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	b2ca      	uxtb	r2, r1
 8002476:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	0a19      	lsrs	r1, r3, #8
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3301      	adds	r3, #1
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	b2ca      	uxtb	r2, r1
 8002488:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0c19      	lsrs	r1, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3302      	adds	r3, #2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0e19      	lsrs	r1, r3, #24
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3303      	adds	r3, #3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	b2ca      	uxtb	r2, r1
 80024ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d218      	bcs.n	80024f4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	18d0      	adds	r0, r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	440a      	add	r2, r1
 80024e0:	4611      	mov	r1, r2
 80024e2:	4798      	blx	r3
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	e7e1      	b.n	80024b8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	b2ca      	uxtb	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	0a19      	lsrs	r1, r3, #8
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	b2ca      	uxtb	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	0c19      	lsrs	r1, r3, #16
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3302      	adds	r3, #2
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4413      	add	r3, r2
 8002522:	b2ca      	uxtb	r2, r1
 8002524:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	0e19      	lsrs	r1, r3, #24
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3303      	adds	r3, #3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	4413      	add	r3, r2
 8002534:	b2ca      	uxtb	r2, r1
 8002536:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3304      	adds	r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
      return offset;
 800253e:	68fb      	ldr	r3, [r7, #12]
    }
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3302      	adds	r3, #2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3303      	adds	r3, #3
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3304      	adds	r3, #4
 800259a:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d90a      	bls.n	80025bc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f004 fcc5 	bl	8006f40 <realloc>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d21b      	bcs.n	8002608 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0008 	add.w	r0, r3, #8
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7ff fe6c 	bl	80022ba <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80025e2:	4602      	mov	r2, r0
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	18d0      	adds	r0, r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3308      	adds	r3, #8
 80025f8:	2210      	movs	r2, #16
 80025fa:	4619      	mov	r1, r3
 80025fc:	f004 fc8c 	bl	8006f18 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	3301      	adds	r3, #1
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	e7de      	b.n	80025c6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3301      	adds	r3, #1
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	440b      	add	r3, r1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3302      	adds	r3, #2
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	440b      	add	r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3303      	adds	r3, #3
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	440b      	add	r3, r1
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3304      	adds	r3, #4
 800265c:	617b      	str	r3, [r7, #20]
     return offset;
 800265e:	697b      	ldr	r3, [r7, #20]
    }
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	080072d8 	.word	0x080072d8

08002684 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	080072f4 	.word	0x080072f4

080026a0 <_ZN8std_msgs15Int32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int32_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int32MultiArray():
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe ff32 	bl	8001514 <_ZN3ros3MsgC1Ev>
 80026b0:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <_ZN8std_msgs15Int32MultiArrayC1Ev+0x38>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff feae 	bl	800241c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	080073f4 	.word	0x080073f4

080026dc <_ZNK8std_msgs15Int32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	1d18      	adds	r0, r3, #4
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7ff feb1 	bl	800245c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80026fa:	4602      	mov	r2, r0
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	b2ca      	uxtb	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	0a19      	lsrs	r1, r3, #8
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	0c19      	lsrs	r1, r3, #16
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3302      	adds	r3, #2
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	b2ca      	uxtb	r2, r1
 8002732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	0e19      	lsrs	r1, r3, #24
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3303      	adds	r3, #3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3304      	adds	r3, #4
 800274a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d22b      	bcs.n	80027b2 <_ZNK8std_msgs15Int32MultiArray9serializeEPh+0xd6>
      union {
        int32_t real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	b2ca      	uxtb	r2, r1
 8002772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0a19      	lsrs	r1, r3, #8
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	b2ca      	uxtb	r2, r1
 8002782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0c19      	lsrs	r1, r3, #16
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3302      	adds	r3, #2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4413      	add	r3, r2
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	0e19      	lsrs	r1, r3, #24
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3303      	adds	r3, #3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3304      	adds	r3, #4
 80027a8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3301      	adds	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e7ce      	b.n	8002750 <_ZNK8std_msgs15Int32MultiArray9serializeEPh+0x74>
      }
      return offset;
 80027b2:	697b      	ldr	r3, [r7, #20]
    }
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN8std_msgs15Int32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1d18      	adds	r0, r3, #4
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7ff feb7 	bl	8002548 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80027da:	4602      	mov	r2, r0
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	4413      	add	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3302      	adds	r3, #2
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3303      	adds	r3, #3
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3304      	adds	r3, #4
 8002826:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	429a      	cmp	r2, r3
 8002830:	d90a      	bls.n	8002848 <_ZN8std_msgs15Int32MultiArray11deserializeEPh+0x8c>
        this->data = (int32_t*)realloc(this->data, data_lengthT * sizeof(int32_t));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f004 fb7f 	bl	8006f40 <realloc>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	429a      	cmp	r2, r3
 800285a:	d236      	bcs.n	80028ca <_ZN8std_msgs15Int32MultiArray11deserializeEPh+0x10e>
      union {
        int32_t real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	440a      	add	r2, r1
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	440b      	add	r3, r1
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4313      	orrs	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3302      	adds	r3, #2
 8002886:	6839      	ldr	r1, [r7, #0]
 8002888:	440b      	add	r3, r1
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	4313      	orrs	r3, r2
 8002890:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3303      	adds	r3, #3
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	440b      	add	r3, r1
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3304      	adds	r3, #4
 80028ae:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int32_t));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	3228      	adds	r2, #40	; 0x28
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	3301      	adds	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e7c3      	b.n	8002852 <_ZN8std_msgs15Int32MultiArray11deserializeEPh+0x96>
      }
     return offset;
 80028ca:	697b      	ldr	r3, [r7, #20]
    }
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZN8std_msgs15Int32MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Int32MultiArray"; };
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <_ZN8std_msgs15Int32MultiArray7getTypeEv+0x18>)
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	08007318 	.word	0x08007318

080028f0 <_ZN8std_msgs15Int32MultiArray6getMD5Ev>:
    const char * getMD5(){ return "1d99f79f8b325b44fee908053e9c945b"; };
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <_ZN8std_msgs15Int32MultiArray6getMD5Ev+0x18>)
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	08007334 	.word	0x08007334

0800290c <_Z9servos_goRKN8std_msgs15Int32MultiArrayE>:

ros::NodeHandle nh;



void servos_go(const std_msgs::Int32MultiArray &msg){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]



	val_0 = int(msg.data[0]);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x70>)
 800291c:	6013      	str	r3, [r2, #0]
	val_1 = int(msg.data[1]);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	3304      	adds	r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a16      	ldr	r2, [pc, #88]	; (8002980 <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x74>)
 8002928:	6013      	str	r3, [r2, #0]
	val_2 = int(msg.data[2]);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	3308      	adds	r3, #8
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a14      	ldr	r2, [pc, #80]	; (8002984 <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x78>)
 8002934:	6013      	str	r3, [r2, #0]
	val_3 = int(msg.data[3]);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	330c      	adds	r3, #12
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x7c>)
 8002940:	6013      	str	r3, [r2, #0]



	servo_write(val_0, 1);
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x70>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2101      	movs	r1, #1
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f88f 	bl	8002a6c <_Z11servo_writeii>
	servo_write(val_1, 2);
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x74>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f889 	bl	8002a6c <_Z11servo_writeii>
	servo_write(val_2, 3);
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x78>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f883 	bl	8002a6c <_Z11servo_writeii>
	servo_write(val_3, 4);
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_Z9servos_goRKN8std_msgs15Int32MultiArrayE+0x7c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2104      	movs	r1, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f87d 	bl	8002a6c <_Z11servo_writeii>


}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200004a0 	.word	0x200004a0
 8002980:	200004a4 	.word	0x200004a4
 8002984:	200004a8 	.word	0x200004a8
 8002988:	200004ac 	.word	0x200004ac

0800298c <setup>:
ros::Subscriber<std_msgs::Int32MultiArray> servo_sub("stm32/anya_arm", &servos_go);



// Setup node:
void setup(void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0



  nh.initNode();
 8002990:	480c      	ldr	r0, [pc, #48]	; (80029c4 <setup+0x38>)
 8002992:	f000 f9c3 	bl	8002d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(servo_sub);
 8002996:	490c      	ldr	r1, [pc, #48]	; (80029c8 <setup+0x3c>)
 8002998:	480a      	ldr	r0, [pc, #40]	; (80029c4 <setup+0x38>)
 800299a:	f000 f9dc 	bl	8002d56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs15Int32MultiArrayEvEEEEbRT_>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800299e:	2100      	movs	r1, #0
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <setup+0x40>)
 80029a2:	f002 fd0b 	bl	80053bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80029a6:	2104      	movs	r1, #4
 80029a8:	4808      	ldr	r0, [pc, #32]	; (80029cc <setup+0x40>)
 80029aa:	f002 fd07 	bl	80053bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80029ae:	2108      	movs	r1, #8
 80029b0:	4806      	ldr	r0, [pc, #24]	; (80029cc <setup+0x40>)
 80029b2:	f002 fd03 	bl	80053bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80029b6:	210c      	movs	r1, #12
 80029b8:	4804      	ldr	r0, [pc, #16]	; (80029cc <setup+0x40>)
 80029ba:	f002 fcff 	bl	80053bc <HAL_TIM_PWM_Start>



}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200004b0 	.word	0x200004b0
 80029c8:	200009e0 	.word	0x200009e0
 80029cc:	20000af0 	.word	0x20000af0

080029d0 <loop>:

// Loop:
void loop(void) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <loop+0x10>)
 80029d6:	f000 f9eb 	bl	8002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//	HAL_Delay(500);
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200004b0 	.word	0x200004b0

080029e4 <_Z3mapiiiii>:


int map(int st1, int fn1, int st2, int fn2, int value)
{
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
    return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fd5d 	bl	80004b8 <__aeabi_i2d>
 80029fe:	4604      	mov	r4, r0
 8002a00:	460d      	mov	r5, r1
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd55 	bl	80004b8 <__aeabi_i2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fee3 	bl	80007e0 <__aeabi_ddiv>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	460c      	mov	r4, r1
 8002a1e:	4625      	mov	r5, r4
 8002a20:	461c      	mov	r4, r3
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd45 	bl	80004b8 <__aeabi_i2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fd fda9 	bl	800058c <__aeabi_dmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	4625      	mov	r5, r4
 8002a40:	461c      	mov	r4, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd fd38 	bl	80004b8 <__aeabi_i2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	4629      	mov	r1, r5
 8002a50:	f7fd fbe6 	bl	8000220 <__adddf3>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	f7fd ffa8 	bl	80009b0 <__aeabi_d2iz>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a6c <_Z11servo_writeii>:

void servo_write(int angle, int channel)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
	if (channel == 1)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10e      	bne.n	8002a9a <_Z11servo_writeii+0x2e>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, map(0,180,1100,5000,angle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a84:	f240 424c 	movw	r2, #1100	; 0x44c
 8002a88:	21b4      	movs	r1, #180	; 0xb4
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7ff ffaa 	bl	80029e4 <_Z3mapiiiii>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <_Z11servo_writeii+0xa0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, map(0,180,1100,5000,angle));
	}


}
 8002a98:	e034      	b.n	8002b04 <_Z11servo_writeii+0x98>
	else if (channel == 2)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d10e      	bne.n	8002abe <_Z11servo_writeii+0x52>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, map(0,180,1100,5000,angle));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aa8:	f240 424c 	movw	r2, #1100	; 0x44c
 8002aac:	21b4      	movs	r1, #180	; 0xb4
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7ff ff98 	bl	80029e4 <_Z3mapiiiii>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <_Z11servo_writeii+0xa0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002abc:	e022      	b.n	8002b04 <_Z11servo_writeii+0x98>
	else if (channel == 3)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d10e      	bne.n	8002ae2 <_Z11servo_writeii+0x76>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, map(0,180,1100,5000,angle));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002acc:	f240 424c 	movw	r2, #1100	; 0x44c
 8002ad0:	21b4      	movs	r1, #180	; 0xb4
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7ff ff86 	bl	80029e4 <_Z3mapiiiii>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <_Z11servo_writeii+0xa0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ae0:	e010      	b.n	8002b04 <_Z11servo_writeii+0x98>
	else if (channel == 4)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d10d      	bne.n	8002b04 <_Z11servo_writeii+0x98>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, map(0,180,1100,5000,angle));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f241 3388 	movw	r3, #5000	; 0x1388
 8002af0:	f240 424c 	movw	r2, #1100	; 0x44c
 8002af4:	21b4      	movs	r1, #180	; 0xb4
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7ff ff74 	bl	80029e4 <_Z3mapiiiii>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <_Z11servo_writeii+0xa0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000af0 	.word	0x20000af0

08002b10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d80d      	bhi.n	8002b40 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	fa22 f103 	lsr.w	r1, r2, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	b2ca      	uxtb	r2, r1
 8002b36:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e7ee      	b.n	8002b1e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d811      	bhi.n	8002b8a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	440a      	add	r2, r1
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	4611      	mov	r1, r2
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3301      	adds	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e7ea      	b.n	8002b60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	08007454 	.word	0x08007454

08002bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffe8 	bl	8002b98 <_ZN3ros15NodeHandleBase_C1Ev>
 8002bc8:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fc46 	bl	8001464 <_ZN13STM32HardwareC1Ev>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f808 	bl	8001bfc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b18      	cmp	r3, #24
 8002bf4:	d80a      	bhi.n	8002c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e7f1      	b.n	8002bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b18      	cmp	r3, #24
 8002c14:	d80b      	bhi.n	8002c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e7f0      	b.n	8002c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d209      	bcs.n	8002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3318      	adds	r3, #24
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e7f1      	b.n	8002c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d20a      	bcs.n	8002c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	e7f0      	b.n	8002c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  }
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	080073e0 	.word	0x080073e0

08002cb4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	0800743c 	.word	0x0800743c

08002cd4 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ffe5 	bl	8002cb4 <_ZN3ros11Subscriber_C1Ev>
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fcd3 	bl	80026a0 <_ZN8std_msgs15Int32MultiArrayC1Ev>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	609a      	str	r2, [r3, #8]
  };
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	080073c8 	.word	0x080073c8

08002d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fbab 	bl	8001484 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs15Int32MultiArrayEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b18      	cmp	r3, #24
 8002d68:	dc1b      	bgt.n	8002da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs15Int32MultiArrayEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10e      	bne.n	8002d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs15Int32MultiArrayEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	605a      	str	r2, [r3, #4]
        return true;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e004      	b.n	8002da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs15Int32MultiArrayEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e7e0      	b.n	8002d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs15Int32MultiArrayEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002da2:	2300      	movs	r3, #0
  }
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fb8d 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 8002dc2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d903      	bls.n	8002dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d903      	bls.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fb67 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad2      	subs	r2, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	bf8c      	ite	hi
 8002e1c:	2301      	movhi	r3, #1
 8002e1e:	2300      	movls	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002e26:	f06f 0301 	mvn.w	r3, #1
 8002e2a:	e193      	b.n	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fb34 	bl	800149e <_ZN13STM32Hardware4readEv>
 8002e36:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f2c0 8173 	blt.w	8003126 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e56:	2b07      	cmp	r3, #7
 8002e58:	d11d      	bne.n	8002e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002e60:	1c59      	adds	r1, r3, #1
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	b2d1      	uxtb	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	460a      	mov	r2, r1
 8002e72:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1b7      	bne.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2208      	movs	r2, #8
 8002e90:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002e94:	e7b2      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d128      	bne.n	8002ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2bff      	cmp	r3, #255	; 0xff
 8002ea4:	d10d      	bne.n	8002ec2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f103 0214 	add.w	r2, r3, #20
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002ec0:	e79c      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fb08 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	bf8c      	ite	hi
 8002eda:	2301      	movhi	r3, #1
 8002edc:	2300      	movls	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d08b      	beq.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8002eec:	f06f 0301 	mvn.w	r3, #1
 8002ef0:	e130      	b.n	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d11b      	bne.n	8002f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2bfe      	cmp	r3, #254	; 0xfe
 8002f00:	d107      	bne.n	8002f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002f10:	e774      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f43f af68 	beq.w	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f915 	bl	800315c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002f32:	e763      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d113      	bne.n	8002f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002f64:	e74a      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d110      	bne.n	8002f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002f90:	e734      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d116      	bne.n	8002fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002fa2:	425a      	negs	r2, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	bf58      	it	pl
 8002faa:	4253      	negpl	r3, r2
 8002fac:	2bff      	cmp	r3, #255	; 0xff
 8002fae:	d107      	bne.n	8002fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002fbe:	e71d      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002fc8:	e718      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d10f      	bne.n	8002ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002ff2:	e703      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d117      	bne.n	800302e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2207      	movs	r2, #7
 8003014:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800301e:	2b00      	cmp	r3, #0
 8003020:	f47f aeec 	bne.w	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2208      	movs	r2, #8
 8003028:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800302c:	e6e6      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003034:	2b08      	cmp	r3, #8
 8003036:	f47f aee1 	bne.w	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003048:	425a      	negs	r2, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	bf58      	it	pl
 8003050:	4253      	negpl	r3, r2
 8003052:	2bff      	cmp	r3, #255	; 0xff
 8003054:	f47f aed2 	bne.w	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d110      	bne.n	8003084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f87a 	bl	800315c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f894 	bl	8003196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003082:	e067      	b.n	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800308a:	2b0a      	cmp	r3, #10
 800308c:	d106      	bne.n	800309c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3318      	adds	r3, #24
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f95f 	bl	8003358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800309a:	e6af      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d10d      	bne.n	80030c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3318      	adds	r3, #24
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f7fe fed7 	bl	8001e66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80030c0:	e69c      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80030c8:	2b0b      	cmp	r3, #11
 80030ca:	d104      	bne.n	80030d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80030d4:	e692      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80030dc:	3b64      	subs	r3, #100	; 0x64
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f43f ae86 	beq.w	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80030f6:	3b64      	subs	r3, #100	; 0x64
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	6858      	ldr	r0, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800310a:	3b64      	subs	r3, #100	; 0x64
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	3218      	adds	r2, #24
 8003120:	4611      	mov	r1, r2
 8003122:	4798      	blx	r3
    while (true)
 8003124:	e66a      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003126:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00f      	beq.n	8003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003140:	4293      	cmp	r3, r2
 8003142:	d906      	bls.n	8003152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f809 	bl	800315c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8003152:	2300      	movs	r3, #0
  }
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe f9e3 	bl	8001534 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f107 020c 	add.w	r2, r7, #12
 8003178:	210a      	movs	r1, #10
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
    rt_time = hardware_.time();
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f9aa 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 8003188:	4602      	mov	r2, r0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
  }
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003196:	b590      	push	{r4, r7, lr}
 8003198:	b08b      	sub	sp, #44	; 0x2c
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800319e:	f107 030c 	add.w	r3, r7, #12
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fab6 	bl	8001714 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	dc5b      	bgt.n	800326a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80031ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d04f      	beq.n	8003262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80031ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80031dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4608      	mov	r0, r1
 8003208:	4798      	blx	r3
 800320a:	4603      	mov	r3, r0
 800320c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4608      	mov	r0, r1
 8003232:	4798      	blx	r3
 8003234:	4603      	mov	r3, r0
 8003236:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681c      	ldr	r4, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe ff95 	bl	8002180 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003256:	4601      	mov	r1, r0
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	461a      	mov	r2, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	e7a0      	b.n	80031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	2b18      	cmp	r3, #24
 8003272:	dc68      	bgt.n	8003346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d05b      	beq.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b29b      	uxth	r3, r3
 8003298:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4608      	mov	r0, r1
 80032d0:	4798      	blx	r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4608      	mov	r0, r1
 80032fa:	4798      	blx	r3
 80032fc:	4603      	mov	r3, r0
 80032fe:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003304:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681c      	ldr	r4, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4608      	mov	r0, r1
 8003330:	4798      	blx	r3
 8003332:	4601      	mov	r1, r0
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	461a      	mov	r2, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	3301      	adds	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	e793      	b.n	800326e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 800334e:	bf00      	nop
 8003350:	372c      	adds	r7, #44	; 0x2c
 8003352:	46bd      	mov	sp, r7
 8003354:	bd90      	pop	{r4, r7, pc}
	...

08003358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f8e4 	bl	8001534 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe f8b3 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f944 	bl	8001614 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	4914      	ldr	r1, [pc, #80]	; (80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8003392:	fba1 1303 	umull	r1, r3, r1, r3
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	4413      	add	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800339c:	6939      	ldr	r1, [r7, #16]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80033a2:	fba3 0302 	umull	r0, r3, r3, r2
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ac:	fb00 f303 	mul.w	r3, r0, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	440b      	add	r3, r1
 80033ba:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8a3 	bl	8003510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe f884 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	10624dd3 	.word	0x10624dd3
 80033e8:	000f4240 	.word	0x000f4240

080033ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b63      	cmp	r3, #99	; 0x63
 80033fc:	dd09      	ble.n	8003412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003404:	f083 0301 	eor.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800340e:	2300      	movs	r3, #0
 8003410:	e077      	b.n	8003502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800341e:	3207      	adds	r2, #7
 8003420:	4611      	mov	r1, r2
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
 8003426:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	22fe      	movs	r2, #254	; 0xfe
 8003434:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	b29b      	uxth	r3, r3
 8003446:	121b      	asrs	r3, r3, #8
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800345c:	4413      	add	r3, r2
 800345e:	b2db      	uxtb	r3, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	b21b      	sxth	r3, r3
 8003478:	121b      	asrs	r3, r3, #8
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003486:	2305      	movs	r3, #5
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	3307      	adds	r3, #7
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	429a      	cmp	r2, r3
 8003492:	da0d      	bge.n	80034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4413      	add	r3, r2
 800349a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	e7ec      	b.n	800348a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3307      	adds	r3, #7
 80034b4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	425a      	negs	r2, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	bf58      	it	pl
 80034c0:	4253      	negpl	r3, r2
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1c59      	adds	r1, r3, #1
 80034c8:	6179      	str	r1, [r7, #20]
 80034ca:	43d2      	mvns	r2, r2
 80034cc:	b2d1      	uxtb	r1, r2
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4413      	add	r3, r2
 80034d2:	460a      	mov	r2, r1
 80034d4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034de:	dc0a      	bgt.n	80034f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1d18      	adds	r0, r3, #4
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd ffe4 	bl	80014ba <_ZN13STM32Hardware5writeEPhi>
      return l;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	e005      	b.n	8003502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80034f6:	4905      	ldr	r1, [pc, #20]	; (800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f847 	bl	800358c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08007358 	.word	0x08007358

08003510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd ffdc 	bl	80014dc <_ZN13STM32Hardware4timeEv>
 8003524:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4914      	ldr	r1, [pc, #80]	; (8003580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800352e:	fba1 1303 	umull	r1, r3, r1, r3
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8003544:	fba3 0302 	umull	r0, r3, r3, r2
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800354e:	fb00 f303 	mul.w	r3, r0, r3
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	1aca      	subs	r2, r1, r3
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800355e:	4413      	add	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f103 020c 	add.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3310      	adds	r3, #16
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 fa99 	bl	8003aa8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	10624dd3 	.word	0x10624dd3
 8003584:	000f4240 	.word	0x000f4240
 8003588:	3b9aca00 	.word	0x3b9aca00

0800358c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	2103      	movs	r1, #3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f804 	bl	80035a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	460b      	mov	r3, r1
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fa6e 	bl	8001a9c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f107 0214 	add.w	r2, r7, #20
 80035d2:	2107      	movs	r1, #7
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	4798      	blx	r3
  }
 80035d8:	bf00      	nop
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_Z41__static_initialization_and_destruction_0ii>:
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10d      	bne.n	800360c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 80035fa:	4806      	ldr	r0, [pc, #24]	; (8003614 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80035fc:	f7ff fadc 	bl	8002bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Int32MultiArray> servo_sub("stm32/anya_arm", &servos_go);
 8003600:	2301      	movs	r3, #1
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003604:	4905      	ldr	r1, [pc, #20]	; (800361c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003606:	4806      	ldr	r0, [pc, #24]	; (8003620 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003608:	f7ff fb64 	bl	8002cd4 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200004b0 	.word	0x200004b0
 8003618:	0800290d 	.word	0x0800290d
 800361c:	08007394 	.word	0x08007394
 8003620:	200009e0 	.word	0x200009e0

08003624 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	330c      	adds	r3, #12
 8003632:	6839      	ldr	r1, [r7, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f8c1 	bl	80027bc <_ZN8std_msgs15Int32MultiArray11deserializeEPh>
    this->cb_(msg);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	320c      	adds	r2, #12
 8003642:	4610      	mov	r0, r2
 8003644:	4798      	blx	r3
  }
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	330c      	adds	r3, #12
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff f92e 	bl	80028d4 <_ZN8std_msgs15Int32MultiArray7getTypeEv>
 8003678:	4603      	mov	r3, r0
  }
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	330c      	adds	r3, #12
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f92e 	bl	80028f0 <_ZN8std_msgs15Int32MultiArray6getMD5Ev>
 8003694:	4603      	mov	r3, r0
  }
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
    return configured_;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_GLOBAL__sub_I_val_0>:
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7ff ff8d 	bl	80035e0 <_Z41__static_initialization_and_destruction_0ii>
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_MspInit+0x4c>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_MspInit+0x4c>)
 80036d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_MspInit+0x4c>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_MspInit+0x4c>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <HAL_MspInit+0x4c>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_MspInit+0x4c>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003706:	2007      	movs	r0, #7
 8003708:	f000 fb66 	bl	8003dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_TIM_Base_MspInit+0x3c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10d      	bne.n	8003746 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_TIM_Base_MspInit+0x40>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_TIM_Base_MspInit+0x40>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6453      	str	r3, [r2, #68]	; 0x44
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_TIM_Base_MspInit+0x40>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40023800 	.word	0x40023800

0800375c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <HAL_TIM_MspPostInit+0x68>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d11e      	bne.n	80037bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_TIM_MspPostInit+0x6c>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_TIM_MspPostInit+0x6c>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_TIM_MspPostInit+0x6c>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800379a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800379e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4619      	mov	r1, r3
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <HAL_TIM_MspPostInit+0x70>)
 80037b8:	f000 fee0 	bl	800457c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020000 	.word	0x40020000

080037d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a4c      	ldr	r2, [pc, #304]	; (8003920 <HAL_UART_MspInit+0x150>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f040 8092 	bne.w	8003918 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_UART_MspInit+0x154>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a49      	ldr	r2, [pc, #292]	; (8003924 <HAL_UART_MspInit+0x154>)
 80037fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
 8003804:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_UART_MspInit+0x154>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_UART_MspInit+0x154>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_UART_MspInit+0x154>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6313      	str	r3, [r2, #48]	; 0x30
 8003820:	4b40      	ldr	r3, [pc, #256]	; (8003924 <HAL_UART_MspInit+0x154>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800382c:	230c      	movs	r3, #12
 800382e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800383c:	2307      	movs	r3, #7
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4619      	mov	r1, r3
 8003846:	4838      	ldr	r0, [pc, #224]	; (8003928 <HAL_UART_MspInit+0x158>)
 8003848:	f000 fe98 	bl	800457c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800384c:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_UART_MspInit+0x15c>)
 800384e:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_UART_MspInit+0x160>)
 8003850:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003854:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003858:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800385a:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_UART_MspInit+0x15c>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003866:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800386c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003874:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_UART_MspInit+0x15c>)
 800387c:	2200      	movs	r2, #0
 800387e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003880:	4b2a      	ldr	r3, [pc, #168]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003886:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_UART_MspInit+0x15c>)
 800388a:	2200      	movs	r2, #0
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800388e:	4827      	ldr	r0, [pc, #156]	; (800392c <HAL_UART_MspInit+0x15c>)
 8003890:	f000 fae4 	bl	8003e5c <HAL_DMA_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800389a:	f7fd fddf 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_UART_MspInit+0x15c>)
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34
 80038a4:	4a21      	ldr	r2, [pc, #132]	; (800392c <HAL_UART_MspInit+0x15c>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_UART_MspInit+0x168>)
 80038ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038d2:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038ec:	4811      	ldr	r0, [pc, #68]	; (8003934 <HAL_UART_MspInit+0x164>)
 80038ee:	f000 fab5 	bl	8003e5c <HAL_DMA_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80038f8:	f7fd fdb0 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <HAL_UART_MspInit+0x164>)
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_UART_MspInit+0x164>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003908:	2200      	movs	r2, #0
 800390a:	2100      	movs	r1, #0
 800390c:	2026      	movs	r0, #38	; 0x26
 800390e:	f000 fa6e 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003912:	2026      	movs	r0, #38	; 0x26
 8003914:	f000 fa87 	bl	8003e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003918:	bf00      	nop
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40004400 	.word	0x40004400
 8003924:	40023800 	.word	0x40023800
 8003928:	40020000 	.word	0x40020000
 800392c:	20000a30 	.word	0x20000a30
 8003930:	40026088 	.word	0x40026088
 8003934:	20000a90 	.word	0x20000a90
 8003938:	400260a0 	.word	0x400260a0

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <NMI_Handler+0x4>

08003942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003946:	e7fe      	b.n	8003946 <HardFault_Handler+0x4>

08003948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800394c:	e7fe      	b.n	800394c <MemManage_Handler+0x4>

0800394e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003952:	e7fe      	b.n	8003952 <BusFault_Handler+0x4>

08003954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <UsageFault_Handler+0x4>

0800395a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003988:	f000 f936 	bl	8003bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <DMA1_Stream5_IRQHandler+0x10>)
 8003996:	f000 fb89 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000a30 	.word	0x20000a30

080039a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <DMA1_Stream6_IRQHandler+0x10>)
 80039aa:	f000 fb7f 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000a90 	.word	0x20000a90

080039b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <USART2_IRQHandler+0x10>)
 80039be:	f002 fbd1 	bl	8006164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000b30 	.word	0x20000b30

080039cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
	return 1;
 80039d0:	2301      	movs	r3, #1
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <_kill>:

int _kill(int pid, int sig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039e6:	f003 fa6d 	bl	8006ec4 <__errno>
 80039ea:	4602      	mov	r2, r0
 80039ec:	2316      	movs	r3, #22
 80039ee:	6013      	str	r3, [r2, #0]
	return -1;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_exit>:

void _exit (int status)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ffe7 	bl	80039dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a0e:	e7fe      	b.n	8003a0e <_exit+0x12>

08003a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <_sbrk+0x5c>)
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <_sbrk+0x60>)
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <_sbrk+0x64>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <_sbrk+0x64>)
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <_sbrk+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <_sbrk+0x64>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d207      	bcs.n	8003a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a40:	f003 fa40 	bl	8006ec4 <__errno>
 8003a44:	4602      	mov	r2, r0
 8003a46:	230c      	movs	r3, #12
 8003a48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a4e:	e009      	b.n	8003a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <_sbrk+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <_sbrk+0x64>)
 8003a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20020000 	.word	0x20020000
 8003a70:	00000400 	.word	0x00000400
 8003a74:	20000a24 	.word	0x20000a24
 8003a78:	20000b78 	.word	0x20000b78

08003a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <SystemInit+0x28>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <SystemInit+0x28>)
 8003a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SystemInit+0x28>)
 8003a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a96:	609a      	str	r2, [r3, #8]
#endif
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	0a5a      	lsrs	r2, r3, #9
 8003ab8:	490f      	ldr	r1, [pc, #60]	; (8003af8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003aba:	fba1 1202 	umull	r1, r2, r1, r2
 8003abe:	09d2      	lsrs	r2, r2, #7
 8003ac0:	490e      	ldr	r1, [pc, #56]	; (8003afc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003ac2:	fb01 f202 	mul.w	r2, r1, r2
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	09db      	lsrs	r3, r3, #7
 8003ad8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	00044b83 	.word	0x00044b83
 8003afc:	3b9aca00 	.word	0x3b9aca00

08003b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b06:	e003      	b.n	8003b10 <LoopCopyDataInit>

08003b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b0e:	3104      	adds	r1, #4

08003b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b10:	480b      	ldr	r0, [pc, #44]	; (8003b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b18:	d3f6      	bcc.n	8003b08 <CopyDataInit>
  ldr  r2, =_sbss
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b1c:	e002      	b.n	8003b24 <LoopFillZerobss>

08003b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b20:	f842 3b04 	str.w	r3, [r2], #4

08003b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b28:	d3f9      	bcc.n	8003b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b2a:	f7ff ffa7 	bl	8003a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b2e:	f003 f9cf 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b32:	f7fd fa95 	bl	8001060 <main>
  bx  lr    
 8003b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b3c:	08007510 	.word	0x08007510
  ldr  r0, =_sdata
 8003b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b44:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003b48:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8003b4c:	20000b78 	.word	0x20000b78

08003b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b50:	e7fe      	b.n	8003b50 <ADC_IRQHandler>
	...

08003b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_Init+0x40>)
 8003b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_Init+0x40>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_Init+0x40>)
 8003b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_Init+0x40>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <HAL_Init+0x40>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b7c:	2003      	movs	r0, #3
 8003b7e:	f000 f92b 	bl	8003dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f000 f808 	bl	8003b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b88:	f7ff fd9e 	bl	80036c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00

08003b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_InitTick+0x54>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_InitTick+0x58>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f943 	bl	8003e42 <HAL_SYSTICK_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00e      	b.n	8003be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b0f      	cmp	r3, #15
 8003bca:	d80a      	bhi.n	8003be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd4:	f000 f90b 	bl	8003dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd8:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <HAL_InitTick+0x5c>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	20000008 	.word	0x20000008
 8003bf4:	20000004 	.word	0x20000004

08003bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_IncTick+0x20>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_IncTick+0x24>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <HAL_IncTick+0x24>)
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000008 	.word	0x20000008
 8003c1c:	20000b70 	.word	0x20000b70

08003c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return uwTick;
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_GetTick+0x14>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000b70 	.word	0x20000b70

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <__NVIC_EnableIRQ+0x38>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db0a      	blt.n	8003d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	490c      	ldr	r1, [pc, #48]	; (8003d24 <__NVIC_SetPriority+0x4c>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d00:	e00a      	b.n	8003d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4908      	ldr	r1, [pc, #32]	; (8003d28 <__NVIC_SetPriority+0x50>)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000e100 	.word	0xe000e100
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f1c3 0307 	rsb	r3, r3, #7
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	bf28      	it	cs
 8003d4a:	2304      	movcs	r3, #4
 8003d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d902      	bls.n	8003d5c <NVIC_EncodePriority+0x30>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3b03      	subs	r3, #3
 8003d5a:	e000      	b.n	8003d5e <NVIC_EncodePriority+0x32>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	401a      	ands	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43d9      	mvns	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	4313      	orrs	r3, r2
         );
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da4:	d301      	bcc.n	8003daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00f      	b.n	8003dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <SysTick_Config+0x40>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db2:	210f      	movs	r1, #15
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003db8:	f7ff ff8e 	bl	8003cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <SysTick_Config+0x40>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc2:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <SysTick_Config+0x40>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000e010 	.word	0xe000e010

08003dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff29 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e00:	f7ff ff3e 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f7ff ff8e 	bl	8003d2c <NVIC_EncodePriority>
 8003e10:	4602      	mov	r2, r0
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff5d 	bl	8003cd8 <__NVIC_SetPriority>
}
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff31 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ffa2 	bl	8003d94 <SysTick_Config>
 8003e50:	4603      	mov	r3, r0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff feda 	bl	8003c20 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e099      	b.n	8003fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e98:	e00f      	b.n	8003eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9a:	f7ff fec1 	bl	8003c20 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d908      	bls.n	8003eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e078      	b.n	8003fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e8      	bne.n	8003e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_DMA_Init+0x158>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d107      	bne.n	8003f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d117      	bne.n	8003f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fa91 	bl	8004488 <DMA_CheckFifoParam>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e016      	b.n	8003fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa48 	bl	800441c <DMA_CalcBaseAndBitshift>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	223f      	movs	r2, #63	; 0x3f
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	f010803f 	.word	0xf010803f

08003fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Start_IT+0x26>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e040      	b.n	8004060 <HAL_DMA_Start_IT+0xa8>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d12f      	bne.n	8004052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f9da 	bl	80043c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	223f      	movs	r2, #63	; 0x3f
 8004012:	409a      	lsls	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0216 	orr.w	r2, r2, #22
 8004026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e005      	b.n	800405e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d004      	beq.n	8004086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00c      	b.n	80040a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2205      	movs	r2, #5
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040b8:	4b92      	ldr	r3, [pc, #584]	; (8004304 <HAL_DMA_IRQHandler+0x258>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a92      	ldr	r2, [pc, #584]	; (8004308 <HAL_DMA_IRQHandler+0x25c>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0a9b      	lsrs	r3, r3, #10
 80040c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	2208      	movs	r2, #8
 80040d8:	409a      	lsls	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01a      	beq.n	8004118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	2208      	movs	r2, #8
 8004106:	409a      	lsls	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	2201      	movs	r2, #1
 800411e:	409a      	lsls	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	2201      	movs	r2, #1
 800413c:	409a      	lsls	r2, r3
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	2204      	movs	r2, #4
 8004154:	409a      	lsls	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	2204      	movs	r2, #4
 8004172:	409a      	lsls	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	2210      	movs	r2, #16
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d043      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03c      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	2210      	movs	r2, #16
 80041a8:	409a      	lsls	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d018      	beq.n	80041ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d024      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
 80041da:	e01f      	b.n	800421c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
 80041ec:	e016      	b.n	800421c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0208 	bic.w	r2, r2, #8
 800420a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	2220      	movs	r2, #32
 8004222:	409a      	lsls	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 808e 	beq.w	800434a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8086 	beq.w	800434a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2220      	movs	r2, #32
 8004244:	409a      	lsls	r2, r3
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b05      	cmp	r3, #5
 8004254:	d136      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0216 	bic.w	r2, r2, #22
 8004264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <HAL_DMA_IRQHandler+0x1da>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d07d      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
        }
        return;
 80042c2:	e078      	b.n	80043b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01c      	beq.n	800430c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d030      	beq.n	800434a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
 80042f0:	e02b      	b.n	800434a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d027      	beq.n	800434a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e022      	b.n	800434a <HAL_DMA_IRQHandler+0x29e>
 8004304:	20000000 	.word	0x20000000
 8004308:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0210 	bic.w	r2, r2, #16
 8004328:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	2b00      	cmp	r3, #0
 8004350:	d032      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d022      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2205      	movs	r2, #5
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3301      	adds	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	429a      	cmp	r2, r3
 8004380:	d307      	bcc.n	8004392 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f2      	bne.n	8004376 <HAL_DMA_IRQHandler+0x2ca>
 8004390:	e000      	b.n	8004394 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004392:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
 80043b4:	e000      	b.n	80043b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043b6:	bf00      	nop
    }
  }
}
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop

080043c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b40      	cmp	r3, #64	; 0x40
 80043ec:	d108      	bne.n	8004400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043fe:	e007      	b.n	8004410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3b10      	subs	r3, #16
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <DMA_CalcBaseAndBitshift+0x64>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <DMA_CalcBaseAndBitshift+0x68>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d909      	bls.n	800445e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	1d1a      	adds	r2, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	659a      	str	r2, [r3, #88]	; 0x58
 800445c:	e007      	b.n	800446e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	aaaaaaab 	.word	0xaaaaaaab
 8004484:	080074f0 	.word	0x080074f0

08004488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11f      	bne.n	80044e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d855      	bhi.n	8004554 <DMA_CheckFifoParam+0xcc>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <DMA_CheckFifoParam+0x28>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044d3 	.word	0x080044d3
 80044b8:	080044c1 	.word	0x080044c1
 80044bc:	08004555 	.word	0x08004555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d045      	beq.n	8004558 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d0:	e042      	b.n	8004558 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044da:	d13f      	bne.n	800455c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e0:	e03c      	b.n	800455c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ea:	d121      	bne.n	8004530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d836      	bhi.n	8004560 <DMA_CheckFifoParam+0xd8>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <DMA_CheckFifoParam+0x70>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	08004509 	.word	0x08004509
 80044fc:	0800450f 	.word	0x0800450f
 8004500:	08004509 	.word	0x08004509
 8004504:	08004521 	.word	0x08004521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      break;
 800450c:	e02f      	b.n	800456e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d024      	beq.n	8004564 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451e:	e021      	b.n	8004564 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004528:	d11e      	bne.n	8004568 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800452e:	e01b      	b.n	8004568 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <DMA_CheckFifoParam+0xb4>
 8004536:	2b03      	cmp	r3, #3
 8004538:	d003      	beq.n	8004542 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800453a:	e018      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      break;
 8004540:	e015      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
      break;
 8004552:	e00b      	b.n	800456c <DMA_CheckFifoParam+0xe4>
      break;
 8004554:	bf00      	nop
 8004556:	e00a      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      break;
 8004558:	bf00      	nop
 800455a:	e008      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      break;
 800455c:	bf00      	nop
 800455e:	e006      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      break;
 8004560:	bf00      	nop
 8004562:	e004      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      break;
 8004564:	bf00      	nop
 8004566:	e002      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      break;   
 8004568:	bf00      	nop
 800456a:	e000      	b.n	800456e <DMA_CheckFifoParam+0xe6>
      break;
 800456c:	bf00      	nop
    }
  } 
  
  return status; 
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e165      	b.n	8004864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	f040 8154 	bne.w	800485e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d00b      	beq.n	80045d6 <HAL_GPIO_Init+0x5a>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d007      	beq.n	80045d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ca:	2b11      	cmp	r3, #17
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b12      	cmp	r3, #18
 80045d4:	d130      	bne.n	8004638 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800460c:	2201      	movs	r2, #1
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 0201 	and.w	r2, r3, #1
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	2203      	movs	r2, #3
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0xfc>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b12      	cmp	r3, #18
 8004676:	d123      	bne.n	80046c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	08da      	lsrs	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3208      	adds	r2, #8
 8004680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	220f      	movs	r2, #15
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	08da      	lsrs	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3208      	adds	r2, #8
 80046ba:	69b9      	ldr	r1, [r7, #24]
 80046bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	2203      	movs	r2, #3
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0203 	and.w	r2, r3, #3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80ae 	beq.w	800485e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	4b5c      	ldr	r3, [pc, #368]	; (8004878 <HAL_GPIO_Init+0x2fc>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	4a5b      	ldr	r2, [pc, #364]	; (8004878 <HAL_GPIO_Init+0x2fc>)
 800470c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004710:	6453      	str	r3, [r2, #68]	; 0x44
 8004712:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_GPIO_Init+0x2fc>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800471e:	4a57      	ldr	r2, [pc, #348]	; (800487c <HAL_GPIO_Init+0x300>)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3302      	adds	r3, #2
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4e      	ldr	r2, [pc, #312]	; (8004880 <HAL_GPIO_Init+0x304>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d025      	beq.n	8004796 <HAL_GPIO_Init+0x21a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a4d      	ldr	r2, [pc, #308]	; (8004884 <HAL_GPIO_Init+0x308>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01f      	beq.n	8004792 <HAL_GPIO_Init+0x216>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4c      	ldr	r2, [pc, #304]	; (8004888 <HAL_GPIO_Init+0x30c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d019      	beq.n	800478e <HAL_GPIO_Init+0x212>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4b      	ldr	r2, [pc, #300]	; (800488c <HAL_GPIO_Init+0x310>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_GPIO_Init+0x20e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <HAL_GPIO_Init+0x314>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00d      	beq.n	8004786 <HAL_GPIO_Init+0x20a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a49      	ldr	r2, [pc, #292]	; (8004894 <HAL_GPIO_Init+0x318>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <HAL_GPIO_Init+0x206>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a48      	ldr	r2, [pc, #288]	; (8004898 <HAL_GPIO_Init+0x31c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_GPIO_Init+0x202>
 800477a:	2306      	movs	r3, #6
 800477c:	e00c      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 800477e:	2307      	movs	r3, #7
 8004780:	e00a      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004782:	2305      	movs	r3, #5
 8004784:	e008      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004786:	2304      	movs	r3, #4
 8004788:	e006      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 800478a:	2303      	movs	r3, #3
 800478c:	e004      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 800478e:	2302      	movs	r3, #2
 8004790:	e002      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004796:	2300      	movs	r3, #0
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	f002 0203 	and.w	r2, r2, #3
 800479e:	0092      	lsls	r2, r2, #2
 80047a0:	4093      	lsls	r3, r2
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a8:	4934      	ldr	r1, [pc, #208]	; (800487c <HAL_GPIO_Init+0x300>)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	3302      	adds	r3, #2
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b6:	4b39      	ldr	r3, [pc, #228]	; (800489c <HAL_GPIO_Init+0x320>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047da:	4a30      	ldr	r2, [pc, #192]	; (800489c <HAL_GPIO_Init+0x320>)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047e0:	4b2e      	ldr	r3, [pc, #184]	; (800489c <HAL_GPIO_Init+0x320>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <HAL_GPIO_Init+0x320>)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_GPIO_Init+0x320>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800482e:	4a1b      	ldr	r2, [pc, #108]	; (800489c <HAL_GPIO_Init+0x320>)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_GPIO_Init+0x320>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004858:	4a10      	ldr	r2, [pc, #64]	; (800489c <HAL_GPIO_Init+0x320>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b0f      	cmp	r3, #15
 8004868:	f67f ae96 	bls.w	8004598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800486c:	bf00      	nop
 800486e:	3724      	adds	r7, #36	; 0x24
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40023800 	.word	0x40023800
 800487c:	40013800 	.word	0x40013800
 8004880:	40020000 	.word	0x40020000
 8004884:	40020400 	.word	0x40020400
 8004888:	40020800 	.word	0x40020800
 800488c:	40020c00 	.word	0x40020c00
 8004890:	40021000 	.word	0x40021000
 8004894:	40021400 	.word	0x40021400
 8004898:	40021800 	.word	0x40021800
 800489c:	40013c00 	.word	0x40013c00

080048a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	807b      	strh	r3, [r7, #2]
 80048ac:	4613      	mov	r3, r2
 80048ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b0:	787b      	ldrb	r3, [r7, #1]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048bc:	e003      	b.n	80048c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	041a      	lsls	r2, r3, #16
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0cc      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b68      	ldr	r3, [pc, #416]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d90c      	bls.n	8004910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b65      	ldr	r3, [pc, #404]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0b8      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d020      	beq.n	800495e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004928:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004940:	4b53      	ldr	r3, [pc, #332]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a52      	ldr	r2, [pc, #328]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	494d      	ldr	r1, [pc, #308]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d044      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d119      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e07f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d003      	beq.n	8004992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	2b03      	cmp	r3, #3
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e067      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4934      	ldr	r1, [pc, #208]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c4:	f7ff f92c 	bl	8003c20 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7ff f928 	bl	8003c20 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e04f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d20c      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e032      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	490e      	ldr	r1, [pc, #56]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a5a:	f000 f855 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004a5e:	4601      	mov	r1, r0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	5cd3      	ldrb	r3, [r2, r3]
 8004a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff f88c 	bl	8003b98 <HAL_InitTick>

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023c00 	.word	0x40023c00
 8004a90:	40023800 	.word	0x40023800
 8004a94:	080074d8 	.word	0x080074d8
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000000 	.word	0x20000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004abc:	f7ff fff0 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0a9b      	lsrs	r3, r3, #10
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4a03      	ldr	r2, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ace:	5cd3      	ldrb	r3, [r2, r3]
 8004ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	080074e8 	.word	0x080074e8

08004ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ae4:	f7ff ffdc 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4601      	mov	r1, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	0b5b      	lsrs	r3, r3, #13
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4a03      	ldr	r2, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af6:	5cd3      	ldrb	r3, [r2, r3]
 8004af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	080074e8 	.word	0x080074e8

08004b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b22:	4bc6      	ldr	r3, [pc, #792]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	f200 817e 	bhi.w	8004e2c <HAL_RCC_GetSysClockFreq+0x324>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <HAL_RCC_GetSysClockFreq+0x30>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004e2d 	.word	0x08004e2d
 8004b40:	08004e2d 	.word	0x08004e2d
 8004b44:	08004e2d 	.word	0x08004e2d
 8004b48:	08004b73 	.word	0x08004b73
 8004b4c:	08004e2d 	.word	0x08004e2d
 8004b50:	08004e2d 	.word	0x08004e2d
 8004b54:	08004e2d 	.word	0x08004e2d
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004e2d 	.word	0x08004e2d
 8004b60:	08004e2d 	.word	0x08004e2d
 8004b64:	08004e2d 	.word	0x08004e2d
 8004b68:	08004cd5 	.word	0x08004cd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4bb4      	ldr	r3, [pc, #720]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x338>)
 8004b6e:	613b      	str	r3, [r7, #16]
       break;
 8004b70:	e15f      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b72:	4bb4      	ldr	r3, [pc, #720]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004b74:	613b      	str	r3, [r7, #16]
      break;
 8004b76:	e15c      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b78:	4bb0      	ldr	r3, [pc, #704]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b82:	4bae      	ldr	r3, [pc, #696]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d04a      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8e:	4bab      	ldr	r3, [pc, #684]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	099b      	lsrs	r3, r3, #6
 8004b94:	f04f 0400 	mov.w	r4, #0
 8004b98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	ea03 0501 	and.w	r5, r3, r1
 8004ba4:	ea04 0602 	and.w	r6, r4, r2
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4632      	mov	r2, r6
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	f04f 0400 	mov.w	r4, #0
 8004bb4:	0154      	lsls	r4, r2, #5
 8004bb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bba:	014b      	lsls	r3, r1, #5
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	1b49      	subs	r1, r1, r5
 8004bc2:	eb62 0206 	sbc.w	r2, r2, r6
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	0194      	lsls	r4, r2, #6
 8004bd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bd4:	018b      	lsls	r3, r1, #6
 8004bd6:	1a5b      	subs	r3, r3, r1
 8004bd8:	eb64 0402 	sbc.w	r4, r4, r2
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	00e2      	lsls	r2, r4, #3
 8004be6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bea:	00d9      	lsls	r1, r3, #3
 8004bec:	460b      	mov	r3, r1
 8004bee:	4614      	mov	r4, r2
 8004bf0:	195b      	adds	r3, r3, r5
 8004bf2:	eb44 0406 	adc.w	r4, r4, r6
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	0262      	lsls	r2, r4, #9
 8004c00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c04:	0259      	lsls	r1, r3, #9
 8004c06:	460b      	mov	r3, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f04f 0400 	mov.w	r4, #0
 8004c14:	461a      	mov	r2, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	f7fb fef2 	bl	8000a00 <__aeabi_uldivmod>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e049      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c24:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	f04f 0400 	mov.w	r4, #0
 8004c2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	ea03 0501 	and.w	r5, r3, r1
 8004c3a:	ea04 0602 	and.w	r6, r4, r2
 8004c3e:	4629      	mov	r1, r5
 8004c40:	4632      	mov	r2, r6
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	0154      	lsls	r4, r2, #5
 8004c4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c50:	014b      	lsls	r3, r1, #5
 8004c52:	4619      	mov	r1, r3
 8004c54:	4622      	mov	r2, r4
 8004c56:	1b49      	subs	r1, r1, r5
 8004c58:	eb62 0206 	sbc.w	r2, r2, r6
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	0194      	lsls	r4, r2, #6
 8004c66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c6a:	018b      	lsls	r3, r1, #6
 8004c6c:	1a5b      	subs	r3, r3, r1
 8004c6e:	eb64 0402 	sbc.w	r4, r4, r2
 8004c72:	f04f 0100 	mov.w	r1, #0
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	00e2      	lsls	r2, r4, #3
 8004c7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c80:	00d9      	lsls	r1, r3, #3
 8004c82:	460b      	mov	r3, r1
 8004c84:	4614      	mov	r4, r2
 8004c86:	195b      	adds	r3, r3, r5
 8004c88:	eb44 0406 	adc.w	r4, r4, r6
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	02a2      	lsls	r2, r4, #10
 8004c96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c9a:	0299      	lsls	r1, r3, #10
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f04f 0400 	mov.w	r4, #0
 8004caa:	461a      	mov	r2, r3
 8004cac:	4623      	mov	r3, r4
 8004cae:	f7fb fea7 	bl	8000a00 <__aeabi_uldivmod>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cb8:	4b60      	ldr	r3, [pc, #384]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	613b      	str	r3, [r7, #16]
      break;
 8004cd2:	e0ae      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cdc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cde:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d04a      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	ea03 0501 	and.w	r5, r3, r1
 8004d00:	ea04 0602 	and.w	r6, r4, r2
 8004d04:	4629      	mov	r1, r5
 8004d06:	4632      	mov	r2, r6
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	f04f 0400 	mov.w	r4, #0
 8004d10:	0154      	lsls	r4, r2, #5
 8004d12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d16:	014b      	lsls	r3, r1, #5
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	1b49      	subs	r1, r1, r5
 8004d1e:	eb62 0206 	sbc.w	r2, r2, r6
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	f04f 0400 	mov.w	r4, #0
 8004d2a:	0194      	lsls	r4, r2, #6
 8004d2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d30:	018b      	lsls	r3, r1, #6
 8004d32:	1a5b      	subs	r3, r3, r1
 8004d34:	eb64 0402 	sbc.w	r4, r4, r2
 8004d38:	f04f 0100 	mov.w	r1, #0
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	00e2      	lsls	r2, r4, #3
 8004d42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d46:	00d9      	lsls	r1, r3, #3
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4614      	mov	r4, r2
 8004d4c:	195b      	adds	r3, r3, r5
 8004d4e:	eb44 0406 	adc.w	r4, r4, r6
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	0262      	lsls	r2, r4, #9
 8004d5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d60:	0259      	lsls	r1, r3, #9
 8004d62:	460b      	mov	r3, r1
 8004d64:	4614      	mov	r4, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	4621      	mov	r1, r4
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	461a      	mov	r2, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	f7fb fe44 	bl	8000a00 <__aeabi_uldivmod>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e049      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	099b      	lsrs	r3, r3, #6
 8004d86:	f04f 0400 	mov.w	r4, #0
 8004d8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	ea03 0501 	and.w	r5, r3, r1
 8004d96:	ea04 0602 	and.w	r6, r4, r2
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	f04f 0400 	mov.w	r4, #0
 8004da6:	0154      	lsls	r4, r2, #5
 8004da8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dac:	014b      	lsls	r3, r1, #5
 8004dae:	4619      	mov	r1, r3
 8004db0:	4622      	mov	r2, r4
 8004db2:	1b49      	subs	r1, r1, r5
 8004db4:	eb62 0206 	sbc.w	r2, r2, r6
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f04f 0400 	mov.w	r4, #0
 8004dc0:	0194      	lsls	r4, r2, #6
 8004dc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dc6:	018b      	lsls	r3, r1, #6
 8004dc8:	1a5b      	subs	r3, r3, r1
 8004dca:	eb64 0402 	sbc.w	r4, r4, r2
 8004dce:	f04f 0100 	mov.w	r1, #0
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	00e2      	lsls	r2, r4, #3
 8004dd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ddc:	00d9      	lsls	r1, r3, #3
 8004dde:	460b      	mov	r3, r1
 8004de0:	4614      	mov	r4, r2
 8004de2:	195b      	adds	r3, r3, r5
 8004de4:	eb44 0406 	adc.w	r4, r4, r6
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	02a2      	lsls	r2, r4, #10
 8004df2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004df6:	0299      	lsls	r1, r3, #10
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	4621      	mov	r1, r4
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f04f 0400 	mov.w	r4, #0
 8004e06:	461a      	mov	r2, r3
 8004e08:	4623      	mov	r3, r4
 8004e0a:	f7fb fdf9 	bl	8000a00 <__aeabi_uldivmod>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	0f1b      	lsrs	r3, r3, #28
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	613b      	str	r3, [r7, #16]
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x338>)
 8004e2e:	613b      	str	r3, [r7, #16]
      break;
 8004e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e32:	693b      	ldr	r3, [r7, #16]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8083 	beq.w	8004f68 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e62:	4b95      	ldr	r3, [pc, #596]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d019      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e6e:	4b92      	ldr	r3, [pc, #584]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e7a:	4b8f      	ldr	r3, [pc, #572]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d00c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e88:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d112      	bne.n	8004eba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e94:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea2:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d05b      	beq.n	8004f66 <HAL_RCC_OscConfig+0x11e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d157      	bne.n	8004f66 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e216      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x8a>
 8004ec4:	4b7c      	ldr	r3, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a7b      	ldr	r2, [pc, #492]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e01d      	b.n	8004f0e <HAL_RCC_OscConfig+0xc6>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCC_OscConfig+0xae>
 8004edc:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a75      	ldr	r2, [pc, #468]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b73      	ldr	r3, [pc, #460]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a72      	ldr	r2, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	e00b      	b.n	8004f0e <HAL_RCC_OscConfig+0xc6>
 8004ef6:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6f      	ldr	r2, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b6d      	ldr	r3, [pc, #436]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6c      	ldr	r2, [pc, #432]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d013      	beq.n	8004f3e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fe fe83 	bl	8003c20 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f1e:	f7fe fe7f 	bl	8003c20 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b64      	cmp	r3, #100	; 0x64
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e1db      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f30:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0xd6>
 8004f3c:	e014      	b.n	8004f68 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fe fe6f 	bl	8003c20 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f46:	f7fe fe6b 	bl	8003c20 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e1c7      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f58:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f0      	bne.n	8004f46 <HAL_RCC_OscConfig+0xfe>
 8004f64:	e000      	b.n	8004f68 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d06f      	beq.n	8005054 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f74:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d017      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f80:	4b4d      	ldr	r3, [pc, #308]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f8c:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f98:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d11c      	bne.n	8004fde <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa4:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d116      	bne.n	8004fde <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb0:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x180>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e18f      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4938      	ldr	r1, [pc, #224]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fdc:	e03a      	b.n	8005054 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe6:	4b35      	ldr	r3, [pc, #212]	; (80050bc <HAL_RCC_OscConfig+0x274>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe fe18 	bl	8003c20 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff4:	f7fe fe14 	bl	8003c20 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e170      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005006:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4925      	ldr	r1, [pc, #148]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005022:	4313      	orrs	r3, r2
 8005024:	600b      	str	r3, [r1, #0]
 8005026:	e015      	b.n	8005054 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005028:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCC_OscConfig+0x274>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fe fdf7 	bl	8003c20 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005036:	f7fe fdf3 	bl	8003c20 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e14f      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005048:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d037      	beq.n	80050d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d016      	beq.n	8005096 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <HAL_RCC_OscConfig+0x278>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506e:	f7fe fdd7 	bl	8003c20 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005076:	f7fe fdd3 	bl	8003c20 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e12f      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 800508a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x22e>
 8005094:	e01c      	b.n	80050d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <HAL_RCC_OscConfig+0x278>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509c:	f7fe fdc0 	bl	8003c20 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a2:	e00f      	b.n	80050c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a4:	f7fe fdbc 	bl	8003c20 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d908      	bls.n	80050c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e118      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
 80050bc:	42470000 	.word	0x42470000
 80050c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80050c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e9      	bne.n	80050a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8097 	beq.w	800520c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e2:	4b83      	ldr	r3, [pc, #524]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10f      	bne.n	800510e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b7f      	ldr	r3, [pc, #508]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a7e      	ldr	r2, [pc, #504]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
 80050fe:	4b7c      	ldr	r3, [pc, #496]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <HAL_RCC_OscConfig+0x4ac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d118      	bne.n	800514c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511a:	4b76      	ldr	r3, [pc, #472]	; (80052f4 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a75      	ldr	r2, [pc, #468]	; (80052f4 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005126:	f7fe fd7b 	bl	8003c20 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512e:	f7fe fd77 	bl	8003c20 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0d3      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	4b6c      	ldr	r3, [pc, #432]	; (80052f4 <HAL_RCC_OscConfig+0x4ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d106      	bne.n	8005162 <HAL_RCC_OscConfig+0x31a>
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a65      	ldr	r2, [pc, #404]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	e01c      	b.n	800519c <HAL_RCC_OscConfig+0x354>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b05      	cmp	r3, #5
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x33c>
 800516a:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a60      	ldr	r2, [pc, #384]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
 8005176:	4b5e      	ldr	r3, [pc, #376]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a5d      	ldr	r2, [pc, #372]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	; 0x70
 8005182:	e00b      	b.n	800519c <HAL_RCC_OscConfig+0x354>
 8005184:	4b5a      	ldr	r3, [pc, #360]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a59      	ldr	r2, [pc, #356]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	4b57      	ldr	r3, [pc, #348]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a56      	ldr	r2, [pc, #344]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005196:	f023 0304 	bic.w	r3, r3, #4
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fe fd3c 	bl	8003c20 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ac:	f7fe fd38 	bl	8003c20 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e092      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ee      	beq.n	80051ac <HAL_RCC_OscConfig+0x364>
 80051ce:	e014      	b.n	80051fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fe fd26 	bl	8003c20 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fe fd22 	bl	8003c20 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e07c      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ee      	bne.n	80051d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d105      	bne.n	800520c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005200:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	4a3a      	ldr	r2, [pc, #232]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d068      	beq.n	80052e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005214:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b08      	cmp	r3, #8
 800521e:	d060      	beq.n	80052e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d145      	bne.n	80052b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005228:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <HAL_RCC_OscConfig+0x4b0>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fe fcf7 	bl	8003c20 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fe fcf3 	bl	8003c20 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e04f      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005248:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	3b01      	subs	r3, #1
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	071b      	lsls	r3, r3, #28
 8005280:	491b      	ldr	r1, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005286:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_RCC_OscConfig+0x4b0>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fe fcc8 	bl	8003c20 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005294:	f7fe fcc4 	bl	8003c20 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e020      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x44c>
 80052b2:	e018      	b.n	80052e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCC_OscConfig+0x4b0>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fe fcb1 	bl	8003c20 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fe fcad 	bl	8003c20 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e009      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x4a8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x47a>
 80052e0:	e001      	b.n	80052e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40007000 	.word	0x40007000
 80052f8:	42470060 	.word	0x42470060

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e01d      	b.n	800534a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fe f9f8 	bl	8003718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 f9fa 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e01d      	b.n	80053a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f815 	bl	80053a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f000 f9cf 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fc9a 	bl	8005d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <HAL_TIM_PWM_Start+0x74>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIM_PWM_Start+0x2c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a14      	ldr	r2, [pc, #80]	; (8005434 <HAL_TIM_PWM_Start+0x78>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_TIM_PWM_Start+0x30>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_TIM_PWM_Start+0x32>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b06      	cmp	r3, #6
 8005412:	d007      	beq.n	8005424 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400

08005438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544e:	2302      	movs	r3, #2
 8005450:	e0b4      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	f200 809f 	bhi.w	80055a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	080054a5 	.word	0x080054a5
 8005474:	080055a9 	.word	0x080055a9
 8005478:	080055a9 	.word	0x080055a9
 800547c:	080055a9 	.word	0x080055a9
 8005480:	080054e5 	.word	0x080054e5
 8005484:	080055a9 	.word	0x080055a9
 8005488:	080055a9 	.word	0x080055a9
 800548c:	080055a9 	.word	0x080055a9
 8005490:	08005527 	.word	0x08005527
 8005494:	080055a9 	.word	0x080055a9
 8005498:	080055a9 	.word	0x080055a9
 800549c:	080055a9 	.word	0x080055a9
 80054a0:	08005567 	.word	0x08005567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f9e2 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0204 	bic.w	r2, r2, #4
 80054ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6999      	ldr	r1, [r3, #24]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	619a      	str	r2, [r3, #24]
      break;
 80054e2:	e062      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fa32 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	619a      	str	r2, [r3, #24]
      break;
 8005524:	e041      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fa87 	bl	8005a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0208 	orr.w	r2, r2, #8
 8005540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0204 	bic.w	r2, r2, #4
 8005550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69d9      	ldr	r1, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
      break;
 8005564:	e021      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fadb 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	61da      	str	r2, [r3, #28]
      break;
 80055a6:	e000      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80055a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_ConfigClockSource+0x18>
 80055d8:	2302      	movs	r3, #2
 80055da:	e0a6      	b.n	800572a <HAL_TIM_ConfigClockSource+0x166>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005602:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d067      	beq.n	80056e4 <HAL_TIM_ConfigClockSource+0x120>
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d80b      	bhi.n	8005630 <HAL_TIM_ConfigClockSource+0x6c>
 8005618:	2b10      	cmp	r3, #16
 800561a:	d073      	beq.n	8005704 <HAL_TIM_ConfigClockSource+0x140>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d802      	bhi.n	8005626 <HAL_TIM_ConfigClockSource+0x62>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d06f      	beq.n	8005704 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005624:	e078      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005626:	2b20      	cmp	r3, #32
 8005628:	d06c      	beq.n	8005704 <HAL_TIM_ConfigClockSource+0x140>
 800562a:	2b30      	cmp	r3, #48	; 0x30
 800562c:	d06a      	beq.n	8005704 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800562e:	e073      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005630:	2b70      	cmp	r3, #112	; 0x70
 8005632:	d00d      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0x8c>
 8005634:	2b70      	cmp	r3, #112	; 0x70
 8005636:	d804      	bhi.n	8005642 <HAL_TIM_ConfigClockSource+0x7e>
 8005638:	2b50      	cmp	r3, #80	; 0x50
 800563a:	d033      	beq.n	80056a4 <HAL_TIM_ConfigClockSource+0xe0>
 800563c:	2b60      	cmp	r3, #96	; 0x60
 800563e:	d041      	beq.n	80056c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005640:	e06a      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005646:	d066      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x152>
 8005648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564c:	d017      	beq.n	800567e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800564e:	e063      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f000 fb32 	bl	8005cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005672:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
      break;
 800567c:	e04c      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6899      	ldr	r1, [r3, #8]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f000 fb1b 	bl	8005cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a0:	609a      	str	r2, [r3, #8]
      break;
 80056a2:	e039      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f000 fa8f 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2150      	movs	r1, #80	; 0x50
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fae8 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056c2:	e029      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	461a      	mov	r2, r3
 80056d2:	f000 faae 	bl	8005c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2160      	movs	r1, #96	; 0x60
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fad8 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056e2:	e019      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f000 fa6f 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2140      	movs	r1, #64	; 0x40
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fac8 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005702:	e009      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fabf 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005714:	e000      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a40      	ldr	r2, [pc, #256]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005752:	d00f      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3d      	ldr	r2, [pc, #244]	; (800584c <TIM_Base_SetConfig+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3b      	ldr	r2, [pc, #236]	; (8005854 <TIM_Base_SetConfig+0x120>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3a      	ldr	r2, [pc, #232]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <TIM_Base_SetConfig+0x114>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d02b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d027      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2c      	ldr	r2, [pc, #176]	; (800584c <TIM_Base_SetConfig+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d023      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <TIM_Base_SetConfig+0x120>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <TIM_Base_SetConfig+0x124>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d017      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a28      	ldr	r2, [pc, #160]	; (800585c <TIM_Base_SetConfig+0x128>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <TIM_Base_SetConfig+0x12c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a26      	ldr	r2, [pc, #152]	; (8005864 <TIM_Base_SetConfig+0x130>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <TIM_Base_SetConfig+0x134>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a24      	ldr	r2, [pc, #144]	; (800586c <TIM_Base_SetConfig+0x138>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a23      	ldr	r2, [pc, #140]	; (8005870 <TIM_Base_SetConfig+0x13c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d108      	bne.n	80057f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0xf8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40001800 	.word	0x40001800
 800586c:	40001c00 	.word	0x40001c00
 8005870:	40002000 	.word	0x40002000

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC1_SetConfig+0x64>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x92>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC4_SetConfig+0xa4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0210 	bic.w	r2, r3, #16
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1a      	ldr	r2, [r3, #32]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e05a      	b.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d01d      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10c      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e03d      	b.n	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e03f      	b.n	8005f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fd fc5a 	bl	80037d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fc2d 	bl	8006794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d153      	bne.n	800604e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_UART_Transmit_DMA+0x26>
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e04c      	b.n	8006050 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Transmit_DMA+0x38>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e045      	b.n	8006050 <HAL_UART_Transmit_DMA+0xc4>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2221      	movs	r2, #33	; 0x21
 8005fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	4a19      	ldr	r2, [pc, #100]	; (8006058 <HAL_UART_Transmit_DMA+0xcc>)
 8005ff2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_UART_Transmit_DMA+0xd0>)
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	4a17      	ldr	r2, [pc, #92]	; (8006060 <HAL_UART_Transmit_DMA+0xd4>)
 8006002:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2200      	movs	r2, #0
 800600a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3304      	adds	r3, #4
 8006020:	461a      	mov	r2, r3
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	f7fd ffc8 	bl	8003fb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006030:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006048:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	080063a1 	.word	0x080063a1
 800605c:	080063f3 	.word	0x080063f3
 8006060:	08006493 	.word	0x08006493

08006064 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b20      	cmp	r3, #32
 800607c:	d166      	bne.n	800614c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_UART_Receive_DMA+0x26>
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e05f      	b.n	800614e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_UART_Receive_DMA+0x38>
 8006098:	2302      	movs	r3, #2
 800609a:	e058      	b.n	800614e <HAL_UART_Receive_DMA+0xea>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	88fa      	ldrh	r2, [r7, #6]
 80060ae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2222      	movs	r2, #34	; 0x22
 80060ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c2:	4a25      	ldr	r2, [pc, #148]	; (8006158 <HAL_UART_Receive_DMA+0xf4>)
 80060c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	4a24      	ldr	r2, [pc, #144]	; (800615c <HAL_UART_Receive_DMA+0xf8>)
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	4a23      	ldr	r2, [pc, #140]	; (8006160 <HAL_UART_Receive_DMA+0xfc>)
 80060d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	2200      	movs	r2, #0
 80060dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	f7fd ff5f 	bl	8003fb8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006126:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006146:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	0800640f 	.word	0x0800640f
 800615c:	08006477 	.word	0x08006477
 8006160:	08006493 	.word	0x08006493

08006164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_UART_IRQHandler+0x52>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa6f 	bl	8006692 <UART_Receive_IT>
      return;
 80061b4:	e0d1      	b.n	800635a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80b0 	beq.w	800631e <HAL_UART_IRQHandler+0x1ba>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_UART_IRQHandler+0x70>
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80a5 	beq.w	800631e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_UART_IRQHandler+0x90>
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	f043 0201 	orr.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_UART_IRQHandler+0xb0>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	f043 0202 	orr.w	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_UART_IRQHandler+0xd0>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	f043 0204 	orr.w	r2, r3, #4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00f      	beq.n	800625e <HAL_UART_IRQHandler+0xfa>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_UART_IRQHandler+0xee>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d078      	beq.n	8006358 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_UART_IRQHandler+0x11c>
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa09 	bl	8006692 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <HAL_UART_IRQHandler+0x144>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d031      	beq.n	800630c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f952 	bl	8006552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d123      	bne.n	8006304 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	4a21      	ldr	r2, [pc, #132]	; (8006360 <HAL_UART_IRQHandler+0x1fc>)
 80062da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fd fec1 	bl	8004068 <HAL_DMA_Abort_IT>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062f6:	4610      	mov	r0, r2
 80062f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fa:	e00e      	b.n	800631a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f845 	bl	800638c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006302:	e00a      	b.n	800631a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f841 	bl	800638c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630a:	e006      	b.n	800631a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f83d 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006318:	e01e      	b.n	8006358 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631a:	bf00      	nop
    return;
 800631c:	e01c      	b.n	8006358 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f93f 	bl	80065b6 <UART_Transmit_IT>
    return;
 8006338:	e00f      	b.n	800635a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_UART_IRQHandler+0x1f6>
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f987 	bl	8006662 <UART_EndTransmit_IT>
    return;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006358:	bf00      	nop
  }
}
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	0800658f 	.word	0x0800658f

08006364 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d113      	bne.n	80063e4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063e2:	e002      	b.n	80063ea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7fa fdef 	bl	8000fc8 <HAL_UART_TxCpltCallback>
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff ffaf 	bl	8006364 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11e      	bne.n	8006468 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800643e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7fa fdc9 	bl	8001000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff ff77 	bl	8006378 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b21      	cmp	r3, #33	; 0x21
 80064c4:	d108      	bne.n	80064d8 <UART_DMAError+0x46>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f000 f827 	bl	8006526 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b22      	cmp	r3, #34	; 0x22
 80064f8:	d108      	bne.n	800650c <UART_DMAError+0x7a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006506:	68b8      	ldr	r0, [r7, #8]
 8006508:	f000 f823 	bl	8006552 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006510:	f043 0210 	orr.w	r2, r3, #16
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006518:	68b8      	ldr	r0, [r7, #8]
 800651a:	f7ff ff37 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800653c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006568:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff feef 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b21      	cmp	r3, #33	; 0x21
 80065c8:	d144      	bne.n	8006654 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d2:	d11a      	bne.n	800660a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	1c9a      	adds	r2, r3, #2
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	621a      	str	r2, [r3, #32]
 80065fc:	e00e      	b.n	800661c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]
 8006608:	e008      	b.n	800661c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6211      	str	r1, [r2, #32]
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29b      	uxth	r3, r3
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4619      	mov	r1, r3
 800662a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10f      	bne.n	8006650 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006678:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fa fca0 	bl	8000fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b22      	cmp	r3, #34	; 0x22
 80066a4:	d171      	bne.n	800678a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d123      	bne.n	80066f8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	629a      	str	r2, [r3, #40]	; 0x28
 80066da:	e029      	b.n	8006730 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
 80066f6:	e01b      	b.n	8006730 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6858      	ldr	r0, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6291      	str	r1, [r2, #40]	; 0x28
 8006710:	b2c2      	uxtb	r2, r0
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	e00c      	b.n	8006730 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	1c58      	adds	r0, r3, #1
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	6288      	str	r0, [r1, #40]	; 0x28
 8006728:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29b      	uxth	r3, r3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006740:	2b00      	cmp	r3, #0
 8006742:	d120      	bne.n	8006786 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0220 	bic.w	r2, r2, #32
 8006752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7fa fc3f 	bl	8001000 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e002      	b.n	800678c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	e000      	b.n	800678c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800678a:	2302      	movs	r3, #2
  }
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067d6:	f023 030c 	bic.w	r3, r3, #12
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	430b      	orrs	r3, r1
 80067e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006802:	f040 818b 	bne.w	8006b1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4ac1      	ldr	r2, [pc, #772]	; (8006b10 <UART_SetConfig+0x37c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d005      	beq.n	800681c <UART_SetConfig+0x88>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4abf      	ldr	r2, [pc, #764]	; (8006b14 <UART_SetConfig+0x380>)
 8006816:	4293      	cmp	r3, r2
 8006818:	f040 80bd 	bne.w	8006996 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800681c:	f7fe f960 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 8006820:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	461d      	mov	r5, r3
 8006826:	f04f 0600 	mov.w	r6, #0
 800682a:	46a8      	mov	r8, r5
 800682c:	46b1      	mov	r9, r6
 800682e:	eb18 0308 	adds.w	r3, r8, r8
 8006832:	eb49 0409 	adc.w	r4, r9, r9
 8006836:	4698      	mov	r8, r3
 8006838:	46a1      	mov	r9, r4
 800683a:	eb18 0805 	adds.w	r8, r8, r5
 800683e:	eb49 0906 	adc.w	r9, r9, r6
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800684e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006852:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006856:	4688      	mov	r8, r1
 8006858:	4691      	mov	r9, r2
 800685a:	eb18 0005 	adds.w	r0, r8, r5
 800685e:	eb49 0106 	adc.w	r1, r9, r6
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	461d      	mov	r5, r3
 8006868:	f04f 0600 	mov.w	r6, #0
 800686c:	196b      	adds	r3, r5, r5
 800686e:	eb46 0406 	adc.w	r4, r6, r6
 8006872:	461a      	mov	r2, r3
 8006874:	4623      	mov	r3, r4
 8006876:	f7fa f8c3 	bl	8000a00 <__aeabi_uldivmod>
 800687a:	4603      	mov	r3, r0
 800687c:	460c      	mov	r4, r1
 800687e:	461a      	mov	r2, r3
 8006880:	4ba5      	ldr	r3, [pc, #660]	; (8006b18 <UART_SetConfig+0x384>)
 8006882:	fba3 2302 	umull	r2, r3, r3, r2
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	461d      	mov	r5, r3
 8006890:	f04f 0600 	mov.w	r6, #0
 8006894:	46a9      	mov	r9, r5
 8006896:	46b2      	mov	sl, r6
 8006898:	eb19 0309 	adds.w	r3, r9, r9
 800689c:	eb4a 040a 	adc.w	r4, sl, sl
 80068a0:	4699      	mov	r9, r3
 80068a2:	46a2      	mov	sl, r4
 80068a4:	eb19 0905 	adds.w	r9, r9, r5
 80068a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ac:	f04f 0100 	mov.w	r1, #0
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068c0:	4689      	mov	r9, r1
 80068c2:	4692      	mov	sl, r2
 80068c4:	eb19 0005 	adds.w	r0, r9, r5
 80068c8:	eb4a 0106 	adc.w	r1, sl, r6
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	461d      	mov	r5, r3
 80068d2:	f04f 0600 	mov.w	r6, #0
 80068d6:	196b      	adds	r3, r5, r5
 80068d8:	eb46 0406 	adc.w	r4, r6, r6
 80068dc:	461a      	mov	r2, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	f7fa f88e 	bl	8000a00 <__aeabi_uldivmod>
 80068e4:	4603      	mov	r3, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b8b      	ldr	r3, [pc, #556]	; (8006b18 <UART_SetConfig+0x384>)
 80068ec:	fba3 1302 	umull	r1, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	2164      	movs	r1, #100	; 0x64
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	3332      	adds	r3, #50	; 0x32
 80068fe:	4a86      	ldr	r2, [pc, #536]	; (8006b18 <UART_SetConfig+0x384>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800690c:	4498      	add	r8, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	461d      	mov	r5, r3
 8006912:	f04f 0600 	mov.w	r6, #0
 8006916:	46a9      	mov	r9, r5
 8006918:	46b2      	mov	sl, r6
 800691a:	eb19 0309 	adds.w	r3, r9, r9
 800691e:	eb4a 040a 	adc.w	r4, sl, sl
 8006922:	4699      	mov	r9, r3
 8006924:	46a2      	mov	sl, r4
 8006926:	eb19 0905 	adds.w	r9, r9, r5
 800692a:	eb4a 0a06 	adc.w	sl, sl, r6
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800693a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800693e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006942:	4689      	mov	r9, r1
 8006944:	4692      	mov	sl, r2
 8006946:	eb19 0005 	adds.w	r0, r9, r5
 800694a:	eb4a 0106 	adc.w	r1, sl, r6
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	461d      	mov	r5, r3
 8006954:	f04f 0600 	mov.w	r6, #0
 8006958:	196b      	adds	r3, r5, r5
 800695a:	eb46 0406 	adc.w	r4, r6, r6
 800695e:	461a      	mov	r2, r3
 8006960:	4623      	mov	r3, r4
 8006962:	f7fa f84d 	bl	8000a00 <__aeabi_uldivmod>
 8006966:	4603      	mov	r3, r0
 8006968:	460c      	mov	r4, r1
 800696a:	461a      	mov	r2, r3
 800696c:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <UART_SetConfig+0x384>)
 800696e:	fba3 1302 	umull	r1, r3, r3, r2
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	2164      	movs	r1, #100	; 0x64
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	3332      	adds	r3, #50	; 0x32
 8006980:	4a65      	ldr	r2, [pc, #404]	; (8006b18 <UART_SetConfig+0x384>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	f003 0207 	and.w	r2, r3, #7
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4442      	add	r2, r8
 8006992:	609a      	str	r2, [r3, #8]
 8006994:	e26f      	b.n	8006e76 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006996:	f7fe f88f 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 800699a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	461d      	mov	r5, r3
 80069a0:	f04f 0600 	mov.w	r6, #0
 80069a4:	46a8      	mov	r8, r5
 80069a6:	46b1      	mov	r9, r6
 80069a8:	eb18 0308 	adds.w	r3, r8, r8
 80069ac:	eb49 0409 	adc.w	r4, r9, r9
 80069b0:	4698      	mov	r8, r3
 80069b2:	46a1      	mov	r9, r4
 80069b4:	eb18 0805 	adds.w	r8, r8, r5
 80069b8:	eb49 0906 	adc.w	r9, r9, r6
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069d0:	4688      	mov	r8, r1
 80069d2:	4691      	mov	r9, r2
 80069d4:	eb18 0005 	adds.w	r0, r8, r5
 80069d8:	eb49 0106 	adc.w	r1, r9, r6
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	461d      	mov	r5, r3
 80069e2:	f04f 0600 	mov.w	r6, #0
 80069e6:	196b      	adds	r3, r5, r5
 80069e8:	eb46 0406 	adc.w	r4, r6, r6
 80069ec:	461a      	mov	r2, r3
 80069ee:	4623      	mov	r3, r4
 80069f0:	f7fa f806 	bl	8000a00 <__aeabi_uldivmod>
 80069f4:	4603      	mov	r3, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b47      	ldr	r3, [pc, #284]	; (8006b18 <UART_SetConfig+0x384>)
 80069fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	461d      	mov	r5, r3
 8006a0a:	f04f 0600 	mov.w	r6, #0
 8006a0e:	46a9      	mov	r9, r5
 8006a10:	46b2      	mov	sl, r6
 8006a12:	eb19 0309 	adds.w	r3, r9, r9
 8006a16:	eb4a 040a 	adc.w	r4, sl, sl
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	46a2      	mov	sl, r4
 8006a1e:	eb19 0905 	adds.w	r9, r9, r5
 8006a22:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a26:	f04f 0100 	mov.w	r1, #0
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a3a:	4689      	mov	r9, r1
 8006a3c:	4692      	mov	sl, r2
 8006a3e:	eb19 0005 	adds.w	r0, r9, r5
 8006a42:	eb4a 0106 	adc.w	r1, sl, r6
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	f04f 0600 	mov.w	r6, #0
 8006a50:	196b      	adds	r3, r5, r5
 8006a52:	eb46 0406 	adc.w	r4, r6, r6
 8006a56:	461a      	mov	r2, r3
 8006a58:	4623      	mov	r3, r4
 8006a5a:	f7f9 ffd1 	bl	8000a00 <__aeabi_uldivmod>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	461a      	mov	r2, r3
 8006a64:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <UART_SetConfig+0x384>)
 8006a66:	fba3 1302 	umull	r1, r3, r3, r2
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	2164      	movs	r1, #100	; 0x64
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	3332      	adds	r3, #50	; 0x32
 8006a78:	4a27      	ldr	r2, [pc, #156]	; (8006b18 <UART_SetConfig+0x384>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a86:	4498      	add	r8, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	461d      	mov	r5, r3
 8006a8c:	f04f 0600 	mov.w	r6, #0
 8006a90:	46a9      	mov	r9, r5
 8006a92:	46b2      	mov	sl, r6
 8006a94:	eb19 0309 	adds.w	r3, r9, r9
 8006a98:	eb4a 040a 	adc.w	r4, sl, sl
 8006a9c:	4699      	mov	r9, r3
 8006a9e:	46a2      	mov	sl, r4
 8006aa0:	eb19 0905 	adds.w	r9, r9, r5
 8006aa4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006aa8:	f04f 0100 	mov.w	r1, #0
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ab4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ab8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006abc:	4689      	mov	r9, r1
 8006abe:	4692      	mov	sl, r2
 8006ac0:	eb19 0005 	adds.w	r0, r9, r5
 8006ac4:	eb4a 0106 	adc.w	r1, sl, r6
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	461d      	mov	r5, r3
 8006ace:	f04f 0600 	mov.w	r6, #0
 8006ad2:	196b      	adds	r3, r5, r5
 8006ad4:	eb46 0406 	adc.w	r4, r6, r6
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4623      	mov	r3, r4
 8006adc:	f7f9 ff90 	bl	8000a00 <__aeabi_uldivmod>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <UART_SetConfig+0x384>)
 8006ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	2164      	movs	r1, #100	; 0x64
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	3332      	adds	r3, #50	; 0x32
 8006afa:	4a07      	ldr	r2, [pc, #28]	; (8006b18 <UART_SetConfig+0x384>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	f003 0207 	and.w	r2, r3, #7
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4442      	add	r2, r8
 8006b0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b0e:	e1b2      	b.n	8006e76 <UART_SetConfig+0x6e2>
 8006b10:	40011000 	.word	0x40011000
 8006b14:	40011400 	.word	0x40011400
 8006b18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4ad7      	ldr	r2, [pc, #860]	; (8006e80 <UART_SetConfig+0x6ec>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d005      	beq.n	8006b32 <UART_SetConfig+0x39e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4ad6      	ldr	r2, [pc, #856]	; (8006e84 <UART_SetConfig+0x6f0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	f040 80d1 	bne.w	8006cd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b32:	f7fd ffd5 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 8006b36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	469a      	mov	sl, r3
 8006b3c:	f04f 0b00 	mov.w	fp, #0
 8006b40:	46d0      	mov	r8, sl
 8006b42:	46d9      	mov	r9, fp
 8006b44:	eb18 0308 	adds.w	r3, r8, r8
 8006b48:	eb49 0409 	adc.w	r4, r9, r9
 8006b4c:	4698      	mov	r8, r3
 8006b4e:	46a1      	mov	r9, r4
 8006b50:	eb18 080a 	adds.w	r8, r8, sl
 8006b54:	eb49 090b 	adc.w	r9, r9, fp
 8006b58:	f04f 0100 	mov.w	r1, #0
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b6c:	4688      	mov	r8, r1
 8006b6e:	4691      	mov	r9, r2
 8006b70:	eb1a 0508 	adds.w	r5, sl, r8
 8006b74:	eb4b 0609 	adc.w	r6, fp, r9
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	f04f 0400 	mov.w	r4, #0
 8006b8a:	0094      	lsls	r4, r2, #2
 8006b8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b90:	008b      	lsls	r3, r1, #2
 8006b92:	461a      	mov	r2, r3
 8006b94:	4623      	mov	r3, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	4631      	mov	r1, r6
 8006b9a:	f7f9 ff31 	bl	8000a00 <__aeabi_uldivmod>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4bb8      	ldr	r3, [pc, #736]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	469b      	mov	fp, r3
 8006bb4:	f04f 0c00 	mov.w	ip, #0
 8006bb8:	46d9      	mov	r9, fp
 8006bba:	46e2      	mov	sl, ip
 8006bbc:	eb19 0309 	adds.w	r3, r9, r9
 8006bc0:	eb4a 040a 	adc.w	r4, sl, sl
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	46a2      	mov	sl, r4
 8006bc8:	eb19 090b 	adds.w	r9, r9, fp
 8006bcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bd0:	f04f 0100 	mov.w	r1, #0
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006be0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006be4:	4689      	mov	r9, r1
 8006be6:	4692      	mov	sl, r2
 8006be8:	eb1b 0509 	adds.w	r5, fp, r9
 8006bec:	eb4c 060a 	adc.w	r6, ip, sl
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	f04f 0400 	mov.w	r4, #0
 8006c02:	0094      	lsls	r4, r2, #2
 8006c04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c08:	008b      	lsls	r3, r1, #2
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4631      	mov	r1, r6
 8006c12:	f7f9 fef5 	bl	8000a00 <__aeabi_uldivmod>
 8006c16:	4603      	mov	r3, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4b9a      	ldr	r3, [pc, #616]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	2164      	movs	r1, #100	; 0x64
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	3332      	adds	r3, #50	; 0x32
 8006c30:	4a95      	ldr	r2, [pc, #596]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c3c:	4498      	add	r8, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	469b      	mov	fp, r3
 8006c42:	f04f 0c00 	mov.w	ip, #0
 8006c46:	46d9      	mov	r9, fp
 8006c48:	46e2      	mov	sl, ip
 8006c4a:	eb19 0309 	adds.w	r3, r9, r9
 8006c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8006c52:	4699      	mov	r9, r3
 8006c54:	46a2      	mov	sl, r4
 8006c56:	eb19 090b 	adds.w	r9, r9, fp
 8006c5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c5e:	f04f 0100 	mov.w	r1, #0
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c72:	4689      	mov	r9, r1
 8006c74:	4692      	mov	sl, r2
 8006c76:	eb1b 0509 	adds.w	r5, fp, r9
 8006c7a:	eb4c 060a 	adc.w	r6, ip, sl
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	f04f 0400 	mov.w	r4, #0
 8006c90:	0094      	lsls	r4, r2, #2
 8006c92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c96:	008b      	lsls	r3, r1, #2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	f7f9 feae 	bl	8000a00 <__aeabi_uldivmod>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4b77      	ldr	r3, [pc, #476]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006cac:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	2164      	movs	r1, #100	; 0x64
 8006cb4:	fb01 f303 	mul.w	r3, r1, r3
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	3332      	adds	r3, #50	; 0x32
 8006cbe:	4a72      	ldr	r2, [pc, #456]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f003 020f 	and.w	r2, r3, #15
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4442      	add	r2, r8
 8006cd0:	609a      	str	r2, [r3, #8]
 8006cd2:	e0d0      	b.n	8006e76 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cd4:	f7fd fef0 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8006cd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	469a      	mov	sl, r3
 8006cde:	f04f 0b00 	mov.w	fp, #0
 8006ce2:	46d0      	mov	r8, sl
 8006ce4:	46d9      	mov	r9, fp
 8006ce6:	eb18 0308 	adds.w	r3, r8, r8
 8006cea:	eb49 0409 	adc.w	r4, r9, r9
 8006cee:	4698      	mov	r8, r3
 8006cf0:	46a1      	mov	r9, r4
 8006cf2:	eb18 080a 	adds.w	r8, r8, sl
 8006cf6:	eb49 090b 	adc.w	r9, r9, fp
 8006cfa:	f04f 0100 	mov.w	r1, #0
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d0e:	4688      	mov	r8, r1
 8006d10:	4691      	mov	r9, r2
 8006d12:	eb1a 0508 	adds.w	r5, sl, r8
 8006d16:	eb4b 0609 	adc.w	r6, fp, r9
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	f04f 0400 	mov.w	r4, #0
 8006d2c:	0094      	lsls	r4, r2, #2
 8006d2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d32:	008b      	lsls	r3, r1, #2
 8006d34:	461a      	mov	r2, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	f7f9 fe60 	bl	8000a00 <__aeabi_uldivmod>
 8006d40:	4603      	mov	r3, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006d48:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	469b      	mov	fp, r3
 8006d56:	f04f 0c00 	mov.w	ip, #0
 8006d5a:	46d9      	mov	r9, fp
 8006d5c:	46e2      	mov	sl, ip
 8006d5e:	eb19 0309 	adds.w	r3, r9, r9
 8006d62:	eb4a 040a 	adc.w	r4, sl, sl
 8006d66:	4699      	mov	r9, r3
 8006d68:	46a2      	mov	sl, r4
 8006d6a:	eb19 090b 	adds.w	r9, r9, fp
 8006d6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d72:	f04f 0100 	mov.w	r1, #0
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d86:	4689      	mov	r9, r1
 8006d88:	4692      	mov	sl, r2
 8006d8a:	eb1b 0509 	adds.w	r5, fp, r9
 8006d8e:	eb4c 060a 	adc.w	r6, ip, sl
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4619      	mov	r1, r3
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	f04f 0400 	mov.w	r4, #0
 8006da4:	0094      	lsls	r4, r2, #2
 8006da6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006daa:	008b      	lsls	r3, r1, #2
 8006dac:	461a      	mov	r2, r3
 8006dae:	4623      	mov	r3, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	4631      	mov	r1, r6
 8006db4:	f7f9 fe24 	bl	8000a00 <__aeabi_uldivmod>
 8006db8:	4603      	mov	r3, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4b32      	ldr	r3, [pc, #200]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	2164      	movs	r1, #100	; 0x64
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	3332      	adds	r3, #50	; 0x32
 8006dd2:	4a2d      	ldr	r2, [pc, #180]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dde:	4498      	add	r8, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	469b      	mov	fp, r3
 8006de4:	f04f 0c00 	mov.w	ip, #0
 8006de8:	46d9      	mov	r9, fp
 8006dea:	46e2      	mov	sl, ip
 8006dec:	eb19 0309 	adds.w	r3, r9, r9
 8006df0:	eb4a 040a 	adc.w	r4, sl, sl
 8006df4:	4699      	mov	r9, r3
 8006df6:	46a2      	mov	sl, r4
 8006df8:	eb19 090b 	adds.w	r9, r9, fp
 8006dfc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e00:	f04f 0100 	mov.w	r1, #0
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e14:	4689      	mov	r9, r1
 8006e16:	4692      	mov	sl, r2
 8006e18:	eb1b 0509 	adds.w	r5, fp, r9
 8006e1c:	eb4c 060a 	adc.w	r6, ip, sl
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4619      	mov	r1, r3
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	f04f 0400 	mov.w	r4, #0
 8006e32:	0094      	lsls	r4, r2, #2
 8006e34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e38:	008b      	lsls	r3, r1, #2
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	4631      	mov	r1, r6
 8006e42:	f7f9 fddd 	bl	8000a00 <__aeabi_uldivmod>
 8006e46:	4603      	mov	r3, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2164      	movs	r1, #100	; 0x64
 8006e56:	fb01 f303 	mul.w	r3, r1, r3
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	3332      	adds	r3, #50	; 0x32
 8006e60:	4a09      	ldr	r2, [pc, #36]	; (8006e88 <UART_SetConfig+0x6f4>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	f003 020f 	and.w	r2, r3, #15
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4442      	add	r2, r8
 8006e72:	609a      	str	r2, [r3, #8]
}
 8006e74:	e7ff      	b.n	8006e76 <UART_SetConfig+0x6e2>
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e80:	40011000 	.word	0x40011000
 8006e84:	40011400 	.word	0x40011400
 8006e88:	51eb851f 	.word	0x51eb851f

08006e8c <__cxa_pure_virtual>:
 8006e8c:	b508      	push	{r3, lr}
 8006e8e:	f000 f80d 	bl	8006eac <_ZSt9terminatev>

08006e92 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006e92:	b508      	push	{r3, lr}
 8006e94:	4780      	blx	r0
 8006e96:	f000 f80e 	bl	8006eb6 <abort>
	...

08006e9c <_ZSt13get_terminatev>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <_ZSt13get_terminatev+0xc>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	f3bf 8f5b 	dmb	ish
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	2000000c 	.word	0x2000000c

08006eac <_ZSt9terminatev>:
 8006eac:	b508      	push	{r3, lr}
 8006eae:	f7ff fff5 	bl	8006e9c <_ZSt13get_terminatev>
 8006eb2:	f7ff ffee 	bl	8006e92 <_ZN10__cxxabiv111__terminateEPFvvE>

08006eb6 <abort>:
 8006eb6:	b508      	push	{r3, lr}
 8006eb8:	2006      	movs	r0, #6
 8006eba:	f000 f871 	bl	8006fa0 <raise>
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	f7fc fd9c 	bl	80039fc <_exit>

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000010 	.word	0x20000010

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4e0d      	ldr	r6, [pc, #52]	; (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	; (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1ba4      	subs	r4, r4, r6
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2500      	movs	r5, #0
 8006edc:	42a5      	cmp	r5, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4e0b      	ldr	r6, [pc, #44]	; (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	; (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f000 f960 	bl	80071a8 <_init>
 8006ee8:	1ba4      	subs	r4, r4, r6
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2500      	movs	r5, #0
 8006eee:	42a5      	cmp	r5, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ef8:	4798      	blx	r3
 8006efa:	3501      	adds	r5, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f02:	4798      	blx	r3
 8006f04:	3501      	adds	r5, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08007500 	.word	0x08007500
 8006f0c:	08007500 	.word	0x08007500
 8006f10:	08007500 	.word	0x08007500
 8006f14:	0800750c 	.word	0x0800750c

08006f18 <memcpy>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	1e43      	subs	r3, r0, #1
 8006f1c:	440a      	add	r2, r1
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d100      	bne.n	8006f24 <memcpy+0xc>
 8006f22:	bd10      	pop	{r4, pc}
 8006f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2c:	e7f7      	b.n	8006f1e <memcpy+0x6>

08006f2e <memset>:
 8006f2e:	4402      	add	r2, r0
 8006f30:	4603      	mov	r3, r0
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d100      	bne.n	8006f38 <memset+0xa>
 8006f36:	4770      	bx	lr
 8006f38:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3c:	e7f9      	b.n	8006f32 <memset+0x4>
	...

08006f40 <realloc>:
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <realloc+0xc>)
 8006f42:	460a      	mov	r2, r1
 8006f44:	4601      	mov	r1, r0
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	f000 b8a0 	b.w	800708c <_realloc_r>
 8006f4c:	20000010 	.word	0x20000010

08006f50 <_raise_r>:
 8006f50:	291f      	cmp	r1, #31
 8006f52:	b538      	push	{r3, r4, r5, lr}
 8006f54:	4604      	mov	r4, r0
 8006f56:	460d      	mov	r5, r1
 8006f58:	d904      	bls.n	8006f64 <_raise_r+0x14>
 8006f5a:	2316      	movs	r3, #22
 8006f5c:	6003      	str	r3, [r0, #0]
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f66:	b112      	cbz	r2, 8006f6e <_raise_r+0x1e>
 8006f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f6c:	b94b      	cbnz	r3, 8006f82 <_raise_r+0x32>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f830 	bl	8006fd4 <_getpid_r>
 8006f74:	462a      	mov	r2, r5
 8006f76:	4601      	mov	r1, r0
 8006f78:	4620      	mov	r0, r4
 8006f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f7e:	f000 b817 	b.w	8006fb0 <_kill_r>
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d00a      	beq.n	8006f9c <_raise_r+0x4c>
 8006f86:	1c59      	adds	r1, r3, #1
 8006f88:	d103      	bne.n	8006f92 <_raise_r+0x42>
 8006f8a:	2316      	movs	r3, #22
 8006f8c:	6003      	str	r3, [r0, #0]
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e7e7      	b.n	8006f62 <_raise_r+0x12>
 8006f92:	2400      	movs	r4, #0
 8006f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f98:	4628      	mov	r0, r5
 8006f9a:	4798      	blx	r3
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7e0      	b.n	8006f62 <_raise_r+0x12>

08006fa0 <raise>:
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <raise+0xc>)
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	f7ff bfd3 	b.w	8006f50 <_raise_r>
 8006faa:	bf00      	nop
 8006fac:	20000010 	.word	0x20000010

08006fb0 <_kill_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4c07      	ldr	r4, [pc, #28]	; (8006fd0 <_kill_r+0x20>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	f7fc fd0d 	bl	80039dc <_kill>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	d102      	bne.n	8006fcc <_kill_r+0x1c>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	b103      	cbz	r3, 8006fcc <_kill_r+0x1c>
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000b74 	.word	0x20000b74

08006fd4 <_getpid_r>:
 8006fd4:	f7fc bcfa 	b.w	80039cc <_getpid>

08006fd8 <_malloc_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	1ccd      	adds	r5, r1, #3
 8006fdc:	f025 0503 	bic.w	r5, r5, #3
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	2d0c      	cmp	r5, #12
 8006fe4:	bf38      	it	cc
 8006fe6:	250c      	movcc	r5, #12
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	4606      	mov	r6, r0
 8006fec:	db01      	blt.n	8006ff2 <_malloc_r+0x1a>
 8006fee:	42a9      	cmp	r1, r5
 8006ff0:	d903      	bls.n	8006ffa <_malloc_r+0x22>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	f000 f87d 	bl	80070f8 <__malloc_lock>
 8006ffe:	4a21      	ldr	r2, [pc, #132]	; (8007084 <_malloc_r+0xac>)
 8007000:	6814      	ldr	r4, [r2, #0]
 8007002:	4621      	mov	r1, r4
 8007004:	b991      	cbnz	r1, 800702c <_malloc_r+0x54>
 8007006:	4c20      	ldr	r4, [pc, #128]	; (8007088 <_malloc_r+0xb0>)
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	b91b      	cbnz	r3, 8007014 <_malloc_r+0x3c>
 800700c:	4630      	mov	r0, r6
 800700e:	f000 f863 	bl	80070d8 <_sbrk_r>
 8007012:	6020      	str	r0, [r4, #0]
 8007014:	4629      	mov	r1, r5
 8007016:	4630      	mov	r0, r6
 8007018:	f000 f85e 	bl	80070d8 <_sbrk_r>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d124      	bne.n	800706a <_malloc_r+0x92>
 8007020:	230c      	movs	r3, #12
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	4630      	mov	r0, r6
 8007026:	f000 f868 	bl	80070fa <__malloc_unlock>
 800702a:	e7e4      	b.n	8006ff6 <_malloc_r+0x1e>
 800702c:	680b      	ldr	r3, [r1, #0]
 800702e:	1b5b      	subs	r3, r3, r5
 8007030:	d418      	bmi.n	8007064 <_malloc_r+0x8c>
 8007032:	2b0b      	cmp	r3, #11
 8007034:	d90f      	bls.n	8007056 <_malloc_r+0x7e>
 8007036:	600b      	str	r3, [r1, #0]
 8007038:	50cd      	str	r5, [r1, r3]
 800703a:	18cc      	adds	r4, r1, r3
 800703c:	4630      	mov	r0, r6
 800703e:	f000 f85c 	bl	80070fa <__malloc_unlock>
 8007042:	f104 000b 	add.w	r0, r4, #11
 8007046:	1d23      	adds	r3, r4, #4
 8007048:	f020 0007 	bic.w	r0, r0, #7
 800704c:	1ac3      	subs	r3, r0, r3
 800704e:	d0d3      	beq.n	8006ff8 <_malloc_r+0x20>
 8007050:	425a      	negs	r2, r3
 8007052:	50e2      	str	r2, [r4, r3]
 8007054:	e7d0      	b.n	8006ff8 <_malloc_r+0x20>
 8007056:	428c      	cmp	r4, r1
 8007058:	684b      	ldr	r3, [r1, #4]
 800705a:	bf16      	itet	ne
 800705c:	6063      	strne	r3, [r4, #4]
 800705e:	6013      	streq	r3, [r2, #0]
 8007060:	460c      	movne	r4, r1
 8007062:	e7eb      	b.n	800703c <_malloc_r+0x64>
 8007064:	460c      	mov	r4, r1
 8007066:	6849      	ldr	r1, [r1, #4]
 8007068:	e7cc      	b.n	8007004 <_malloc_r+0x2c>
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d005      	beq.n	8007080 <_malloc_r+0xa8>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4630      	mov	r0, r6
 8007078:	f000 f82e 	bl	80070d8 <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d0cf      	beq.n	8007020 <_malloc_r+0x48>
 8007080:	6025      	str	r5, [r4, #0]
 8007082:	e7db      	b.n	800703c <_malloc_r+0x64>
 8007084:	20000a28 	.word	0x20000a28
 8007088:	20000a2c 	.word	0x20000a2c

0800708c <_realloc_r>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	4607      	mov	r7, r0
 8007090:	4614      	mov	r4, r2
 8007092:	460e      	mov	r6, r1
 8007094:	b921      	cbnz	r1, 80070a0 <_realloc_r+0x14>
 8007096:	4611      	mov	r1, r2
 8007098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800709c:	f7ff bf9c 	b.w	8006fd8 <_malloc_r>
 80070a0:	b922      	cbnz	r2, 80070ac <_realloc_r+0x20>
 80070a2:	f000 f82b 	bl	80070fc <_free_r>
 80070a6:	4625      	mov	r5, r4
 80070a8:	4628      	mov	r0, r5
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	f000 f874 	bl	8007198 <_malloc_usable_size_r>
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d20f      	bcs.n	80070d4 <_realloc_r+0x48>
 80070b4:	4621      	mov	r1, r4
 80070b6:	4638      	mov	r0, r7
 80070b8:	f7ff ff8e 	bl	8006fd8 <_malloc_r>
 80070bc:	4605      	mov	r5, r0
 80070be:	2800      	cmp	r0, #0
 80070c0:	d0f2      	beq.n	80070a8 <_realloc_r+0x1c>
 80070c2:	4631      	mov	r1, r6
 80070c4:	4622      	mov	r2, r4
 80070c6:	f7ff ff27 	bl	8006f18 <memcpy>
 80070ca:	4631      	mov	r1, r6
 80070cc:	4638      	mov	r0, r7
 80070ce:	f000 f815 	bl	80070fc <_free_r>
 80070d2:	e7e9      	b.n	80070a8 <_realloc_r+0x1c>
 80070d4:	4635      	mov	r5, r6
 80070d6:	e7e7      	b.n	80070a8 <_realloc_r+0x1c>

080070d8 <_sbrk_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4c06      	ldr	r4, [pc, #24]	; (80070f4 <_sbrk_r+0x1c>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4605      	mov	r5, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	f7fc fc94 	bl	8003a10 <_sbrk>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_sbrk_r+0x1a>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_sbrk_r+0x1a>
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20000b74 	.word	0x20000b74

080070f8 <__malloc_lock>:
 80070f8:	4770      	bx	lr

080070fa <__malloc_unlock>:
 80070fa:	4770      	bx	lr

080070fc <_free_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4605      	mov	r5, r0
 8007100:	2900      	cmp	r1, #0
 8007102:	d045      	beq.n	8007190 <_free_r+0x94>
 8007104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007108:	1f0c      	subs	r4, r1, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	bfb8      	it	lt
 800710e:	18e4      	addlt	r4, r4, r3
 8007110:	f7ff fff2 	bl	80070f8 <__malloc_lock>
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <_free_r+0x98>)
 8007116:	6813      	ldr	r3, [r2, #0]
 8007118:	4610      	mov	r0, r2
 800711a:	b933      	cbnz	r3, 800712a <_free_r+0x2e>
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6014      	str	r4, [r2, #0]
 8007120:	4628      	mov	r0, r5
 8007122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007126:	f7ff bfe8 	b.w	80070fa <__malloc_unlock>
 800712a:	42a3      	cmp	r3, r4
 800712c:	d90c      	bls.n	8007148 <_free_r+0x4c>
 800712e:	6821      	ldr	r1, [r4, #0]
 8007130:	1862      	adds	r2, r4, r1
 8007132:	4293      	cmp	r3, r2
 8007134:	bf04      	itt	eq
 8007136:	681a      	ldreq	r2, [r3, #0]
 8007138:	685b      	ldreq	r3, [r3, #4]
 800713a:	6063      	str	r3, [r4, #4]
 800713c:	bf04      	itt	eq
 800713e:	1852      	addeq	r2, r2, r1
 8007140:	6022      	streq	r2, [r4, #0]
 8007142:	6004      	str	r4, [r0, #0]
 8007144:	e7ec      	b.n	8007120 <_free_r+0x24>
 8007146:	4613      	mov	r3, r2
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	b10a      	cbz	r2, 8007150 <_free_r+0x54>
 800714c:	42a2      	cmp	r2, r4
 800714e:	d9fa      	bls.n	8007146 <_free_r+0x4a>
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	1858      	adds	r0, r3, r1
 8007154:	42a0      	cmp	r0, r4
 8007156:	d10b      	bne.n	8007170 <_free_r+0x74>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	4401      	add	r1, r0
 800715c:	1858      	adds	r0, r3, r1
 800715e:	4282      	cmp	r2, r0
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	d1dd      	bne.n	8007120 <_free_r+0x24>
 8007164:	6810      	ldr	r0, [r2, #0]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	4401      	add	r1, r0
 800716c:	6019      	str	r1, [r3, #0]
 800716e:	e7d7      	b.n	8007120 <_free_r+0x24>
 8007170:	d902      	bls.n	8007178 <_free_r+0x7c>
 8007172:	230c      	movs	r3, #12
 8007174:	602b      	str	r3, [r5, #0]
 8007176:	e7d3      	b.n	8007120 <_free_r+0x24>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	1821      	adds	r1, r4, r0
 800717c:	428a      	cmp	r2, r1
 800717e:	bf04      	itt	eq
 8007180:	6811      	ldreq	r1, [r2, #0]
 8007182:	6852      	ldreq	r2, [r2, #4]
 8007184:	6062      	str	r2, [r4, #4]
 8007186:	bf04      	itt	eq
 8007188:	1809      	addeq	r1, r1, r0
 800718a:	6021      	streq	r1, [r4, #0]
 800718c:	605c      	str	r4, [r3, #4]
 800718e:	e7c7      	b.n	8007120 <_free_r+0x24>
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	20000a28 	.word	0x20000a28

08007198 <_malloc_usable_size_r>:
 8007198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800719c:	1f18      	subs	r0, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfbc      	itt	lt
 80071a2:	580b      	ldrlt	r3, [r1, r0]
 80071a4:	18c0      	addlt	r0, r0, r3
 80071a6:	4770      	bx	lr

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
